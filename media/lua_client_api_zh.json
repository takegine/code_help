{
    "CDOTAGameManager": [
        {
            "desc": "Get the hero unit ",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetHeroDataByName_Script"
        },
        {
            "desc": "Get the hero ID given the hero name.",
            "func": "( string_1 )",
            "return": "int",
            "name": "GetHeroIDByName"
        },
        {
            "desc": "Get the hero name given a hero ID.",
            "func": "( int_1 )",
            "return": "string",
            "name": "GetHeroNameByID"
        },
        {
            "desc": "Get the hero name given a unit name.",
            "func": "( string_1 )",
            "return": "string",
            "name": "GetHeroNameForUnitName"
        },
        {
            "desc": "Get the hero unit name given the hero ID.",
            "func": "( int_1 )",
            "return": "string",
            "name": "GetHeroUnitNameByID"
        }
    ],
    "C_BaseEntity": [
        {
            "desc": "",
            "func": "()",
            "return": "Vector",
            "name": "GetAbsOrigin"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetTeamNumber"
        },
        {
            "desc": "Set a think function on this entity.",
            "func": "( string pszContextName, handle hThinkFunc, float flInterval )",
            "return": "void",
            "name": "SetContextThink"
        }
    ],
    "Convars": [
        {
            "desc": "GetBool(name):将指定的控制台变量（convar）作为boolean返回.",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetBool"
        },
        {
            "desc": "GetCommandClient():返回输入该控制台指令的玩家",
            "func": "()",
            "return": "handle",
            "name": "GetCommandClient"
        },
        {
            "desc": "GetDOTACommandClient():返回输入该控制台智力的DOTA玩家",
            "func": "()",
            "return": "handle",
            "name": "GetDOTACommandClient"
        },
        {
            "desc": "GetFloat(name):将指定的控制台变量（convar）作为float返回.不存在时返回nil",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetFloat"
        },
        {
            "desc": "GetInt(name):将指定的控制台变量（convar）作为int返回.不存在时返回nil",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetInt"
        },
        {
            "desc": "GetStr(name):将指定的控制台变量（convar）作为string返回.不存在时返回nil",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetStr"
        },
        {
            "desc": "RegisterCommand(name,fn,helpString,flags):注册一个控制台指令.",
            "func": "( string_1, handle_2, string_3, int_4 )",
            "return": "void",
            "name": "RegisterCommand"
        },
        {
            "desc": "RegisterConvar(name,defaultValue,helpString,flags):注册一个新的控制台变量.",
            "func": "( string_1, string_2, string_3, int_4 )",
            "return": "void",
            "name": "RegisterConvar"
        },
        {
            "desc": "SetBool(name,val):将指定控制台变量（convar）设置为指定bool.",
            "func": "( string_1, bool_2 )",
            "return": "void",
            "name": "SetBool"
        },
        {
            "desc": "SetFloat(name,val):将指定控制台变量（convar）设置为指定float.",
            "func": "( string_1, float_2 )",
            "return": "void",
            "name": "SetFloat"
        },
        {
            "desc": "SetInt(name,val):将指定控制台变量（convar）设置为指定int.",
            "func": "( string_1, int_2 )",
            "return": "void",
            "name": "SetInt"
        },
        {
            "desc": "SetStr(name,val):将指定控制台变量（convar）设置为指定string.",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "SetStr"
        }
    ],
    "C_DOTA_Ability_Lua": [
        {
            "desc": "Determine whether an issued command with no target is valid.",
            "func": "()",
            "return": "int",
            "name": "CastFilterResult"
        },
        {
            "desc": "(Vector vLocation) Determine whether an issued command on a location is valid.",
            "func": "( Vector vLocation )",
            "return": "int",
            "name": "CastFilterResultLocation"
        },
        {
            "desc": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
            "func": "( handle hTarget )",
            "return": "int",
            "name": "CastFilterResultTarget"
        },
        {
            "desc": "Controls the size of the AOE casting cursor.",
            "func": "()",
            "return": "float",
            "name": "GetAOERadius"
        },
        {
            "desc": "Allows code overriding of the ability texture shown in the HUD.",
            "func": "()",
            "return": "string",
            "name": "GetAbilityTextureName"
        },
        {
            "desc": "Return cast behavior type of this ability.",
            "func": "()",
            "return": "int",
            "name": "GetBehavior"
        },
        {
            "desc": "Return cast point of this ability.",
            "func": "()",
            "return": "float",
            "name": "GetCastPoint"
        },
        {
            "desc": "Return cast range of this ability.",
            "func": "( Vector vLocation, handle hTarget )",
            "return": "int",
            "name": "GetCastRange"
        },
        {
            "desc": "Return the channel time of this ability.",
            "func": "()",
            "return": "float",
            "name": "GetChannelTime"
        },
        {
            "desc": "Return mana cost at the given level per second while channeling (-1 is current).",
            "func": "( int iLevel )",
            "return": "int",
            "name": "GetChannelledManaCostPerSecond"
        },
        {
            "desc": "Return cooldown of this ability.",
            "func": "( int iLevel )",
            "return": "float",
            "name": "GetCooldown"
        },
        {
            "desc": "Return the error string of a failed command with no target.",
            "func": "()",
            "return": "string",
            "name": "GetCustomCastError"
        },
        {
            "desc": "(Vector vLocation) Return the error string of a failed command on a location.",
            "func": "( Vector vLocation )",
            "return": "string",
            "name": "GetCustomCastErrorLocation"
        },
        {
            "desc": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
            "func": "( handle hTarget )",
            "return": "string",
            "name": "GetCustomCastErrorTarget"
        },
        {
            "desc": "Return gold cost at the given level (-1 is current).",
            "func": "( int iLevel )",
            "return": "int",
            "name": "GetGoldCost"
        },
        {
            "desc": "Return mana cost at the given level (-1 is current).",
            "func": "( int iLevel )",
            "return": "int",
            "name": "GetManaCost"
        }
    ],
    "CDOTA_Modifier_Lua_Horizontal_Motion": [
        {
            "desc": "当运动被打断时进行回调。",
            "func": "()",
            "return": "void",
            "name": "OnHorizontalMotionInterrupted"
        },
        {
            "desc": "根据给定的间隔对NPC施加水平运动",
            "func": "( handle me, float dt )",
            "return": "void",
            "name": "UpdateHorizontalMotion"
        }
    ],
    "Globals": [
        {
            "desc": "返回两个偏航角度之差",
            "func": "( float_1, float_2 )",
            "return": "float",
            "name": "AngleDiff"
        },
        {
            "desc": "在服务器日志文件上增加一个string",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "AppendToLogFile"
        },
        {
            "desc": "构造一个四元数，表现出围绕给定的vector轴线的旋转角",
            "func": "( Vector_1, float_2 )",
            "return": "Quaternion",
            "name": "AxisAngleToQuaternion"
        },
        {
            "desc": "计算实体的OBB上最接近的两个点。",
            "func": "( handle_1, Vector_2 )",
            "return": "Vector",
            "name": "CalcClosestPointOnEntityOBB"
        },
        {
            "desc": "计算两个实体的OBB间距离。如果返回值为负，代表输入值有错误。返回值为0则代表OBB互相重叠。",
            "func": "( handle_1, handle_2 )",
            "return": "float",
            "name": "CalcDistanceBetweenEntityOBB"
        },
        {
            "desc": "",
            "func": "( Vector_1, Vector_2, Vector_3 )",
            "return": "float",
            "name": "CalcDistanceToLineSegment2D"
        },
        {
            "desc": "为特定的实体创建所有输入/输出事件",
            "func": "( ehandle_1 )",
            "return": "void",
            "name": "CancelEntityIOEvents"
        },
        {
            "desc": "传递table-输入：实体，效果",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "CreateEffect"
        },
        {
            "desc": "生成一个HTTP请求。",
            "func": "( string_1, string_2 )",
            "return": "handle",
            "name": "CreateHTTPRequest"
        },
        {
            "desc": "Create an HTTP request.",
            "func": "( string_1, string_2 )",
            "return": "handle",
            "name": "CreateHTTPRequestScriptVM"
        },
        {
            "desc": "(vector,vector) cross product between two vectors",
            "func": "( Vector_1, Vector_2 )",
            "return": "Vector",
            "name": "CrossVectors"
        },
        {
            "desc": "在debugger（调试模式）中停止运行",
            "func": "()",
            "return": "void",
            "name": "DebugBreak"
        },
        {
            "desc": "显示一个debugoverlay窗口(origin,mins,maxs,r,g,b,a,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, float_8 )",
            "return": "void",
            "name": "DebugDrawBox"
        },
        {
            "desc": "显示一个debugforward窗口(cent,min,max,forward,vRgb,a,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, Vector_4, Vector_5, float_6, float_7 )",
            "return": "void",
            "name": "DebugDrawBoxDirection"
        },
        {
            "desc": "显示一个debug圆(center,vRgb,a,rad,ztest,duration)",
            "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
            "return": "void",
            "name": "DebugDrawCircle"
        },
        {
            "desc": "尝试清理所有debugoverlay信息",
            "func": "()",
            "return": "void",
            "name": "DebugDrawClear"
        },
        {
            "desc": "显示一个debugoverlay线段origin,target,r,g,b,ztest,duration)",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, bool_6, float_7 )",
            "return": "void",
            "name": "DebugDrawLine"
        },
        {
            "desc": "使用vec颜色显示一个debug线段(start,end,vRgb,a,ztest,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, bool_4, float_5 )",
            "return": "void",
            "name": "DebugDrawLine_vCol"
        },
        {
            "desc": "显示给定行间距（lineoffset）的文字(x,y,lineOffset,text,r,g,b,a,duration)",
            "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9 )",
            "return": "void",
            "name": "DebugDrawScreenTextLine"
        },
        {
            "desc": "显示一个debug球(center,vRgb,a,rad,ztest,duration)",
            "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
            "return": "void",
            "name": "DebugDrawSphere"
        },
        {
            "desc": "显示3d文字(origin,text,bViewCheck,duration)",
            "func": "( Vector_1, string_2, bool_3, float_4 )",
            "return": "void",
            "name": "DebugDrawText"
        },
        {
            "desc": "显示漂亮的debug文字(x,y,lineOffset,text,r,g,b,a,duration,font,size,bBold)",
            "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9, string_10, int_11, bool_12 )",
            "return": "void",
            "name": "DebugScreenTextPretty"
        },
        {
            "desc": "运行一个内部脚本",
            "func": "( string_1, handle_2 )",
            "return": "bool",
            "name": "DoIncludeScript"
        },
        {
            "desc": "ScriptAssert:断言传入数据是数值，输出信息并显示断言对话框（参考编程中的Assert功能，主要用于调试，译者注）",
            "func": "( bool_1, string_2 )",
            "return": "void",
            "name": "DoScriptAssert"
        },
        {
            "desc": "UniqueString:使用任意的根字符串构造一个保证在VM脚本运行周期内唯一的字符串。当给表增加数据但不确定已用关键字时有用",
            "func": "( string_1 )",
            "return": "string",
            "name": "DoUniqueString"
        },
        {
            "desc": "在一个实体上播放给定名称的音效",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "EmitSoundOn"
        },
        {
            "desc": "为指定玩家播放给定名称的音效",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "EmitSoundOnClient"
        },
        {
            "desc": "把一个实体的整数索引转化为表达该实体脚本实例的HScript",
            "func": "( int_1 )",
            "return": "handle",
            "name": "EntIndexToHScript"
        },
        {
            "desc": "滑的曲线，接近0时减少较慢",
            "func": "( float_1, float_2, float_3 )",
            "return": "float",
            "name": "ExponentialDecay"
        },
        {
            "desc": "触发实体的动作输入w/no数据",
            "func": "( ehandle_1, string_2 )",
            "return": "void",
            "name": "FireEntityIOInputNameOnly"
        },
        {
            "desc": "用给定字符串（由你分配内存）触发实体的动作输入",
            "func": "( ehandle_1, string_2, string_3 )",
            "return": "void",
            "name": "FireEntityIOInputString"
        },
        {
            "desc": "用给定的Vector(hEntity,szActionName,vector)触发实体的动作输入",
            "func": "( ehandle_1, string_2, Vector_3 )",
            "return": "void",
            "name": "FireEntityIOInputVec"
        },
        {
            "desc": "触发一个预定义事件，可以在custom_events.txt或dota的资源/.res中找到",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "FireGameEvent"
        },
        {
            "desc": "触发一个游戏事件但不广播给客户端",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "FireGameEventLocal"
        },
        {
            "desc": "获取上一帧在服务器上花费的时间",
            "func": "()",
            "return": "float",
            "name": "FrameTime"
        },
        {
            "desc": "返回引擎当然的帧数",
            "func": "()",
            "return": "int",
            "name": "GetFrameCount"
        },
        {
            "desc": "在广播服务器获取本地玩家",
            "func": "()",
            "return": "handle",
            "name": "GetListenServerHost"
        },
        {
            "desc": "Get the local player ID.",
            "func": "()",
            "return": "int",
            "name": "GetLocalPlayerID"
        },
        {
            "desc": "Get the local player team.",
            "func": "()",
            "return": "int",
            "name": "GetLocalPlayerTeam"
        },
        {
            "desc": "获取地图的名字",
            "func": "()",
            "return": "string",
            "name": "GetMapName"
        },
        {
            "desc": "获取输出事件的最大延迟",
            "func": "( ehandle_1, string_2 )",
            "return": "float",
            "name": "GetMaxOutputDelay"
        },
        {
            "desc": "获取VPHYS或普通物体的角速度",
            "func": "( handle_1 )",
            "return": "Vector",
            "name": "GetPhysAngularVelocity"
        },
        {
            "desc": "获取VPHYS或普通物体的速度",
            "func": "( handle_1 )",
            "return": "Vector",
            "name": "GetPhysVelocity"
        },
        {
            "desc": "如果给定文件不存在，用给定内容创建它；如果存在则不做任何动作",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "InitLogFile"
        },
        {
            "desc": "Returnstrueifthisisluarunningfromtheclient.dll.",
            "func": "()",
            "return": "bool",
            "name": "IsClient"
        },
        {
            "desc": "如果服务器开放返回true",
            "func": "()",
            "return": "bool",
            "name": "IsDedicatedServer"
        },
        {
            "desc": "当此Lua脚本在Dota2创意工坊工具模式下运行时返回true。",
            "func": "()",
            "return": "bool",
            "name": "IsInToolsMode"
        },
        {
            "desc": "如果实体有效并被标记为删除返回true",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "IsMarkedForDeletion"
        },
        {
            "desc": "当Lua代码是从Server.dll中被运行的时候，返回True。",
            "func": "()",
            "return": "bool",
            "name": "IsServer"
        },
        {
            "desc": "检查给定hScript是否为有效实体",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "IsValidEntity"
        },
        {
            "desc": "(vector,vector,float) lerp between two vectors by a float factor returning new vector",
            "func": "( Vector_1, Vector_2, float_3 )",
            "return": "Vector",
            "name": "LerpVectors"
        },
        {
            "desc": "将一个Lua定义的Modifier和与其相关的类联系起来。如果这个Modifier的定义在Vscript根目录下，那么第二个argument(file_path)可能会被忽略。",
            "func": "( string_1, string_2, int_3 )",
            "return": "void",
            "name": "LinkLuaModifier"
        },
        {
            "desc": "从脚本给游戏事件注册一个listner，Tip:另外，为listenstandardengineevents,你也可以创建自己的事件，把它们放置在/scripts/custom_events.txt.",
            "func": "( string_1, handle_2, handle_3 )",
            "return": "int",
            "name": "ListenToGameEvent"
        },
        {
            "desc": "用给定的关键字文件创建table",
            "func": "( string_1 )",
            "return": "table",
            "name": "LoadKeyValues"
        },
        {
            "desc": "用给定的关键字string创建table",
            "func": "( string_1 )",
            "return": "table",
            "name": "LoadKeyValuesFromString"
        },
        {
            "desc": "Get the current local time",
            "func": "()",
            "return": "table",
            "name": "LocalTime"
        },
        {
            "desc": "检查给定的hScript是否是有效实体（？）",
            "func": "( string_1 )",
            "return": "int",
            "name": "MakeStringToken"
        },
        {
            "desc": "输出信息",
            "func": "( string_1 )",
            "return": "void",
            "name": "Msg"
        },
        {
            "desc": "通过索引获取玩家的脚本实例",
            "func": "( int_1 )",
            "return": "handle",
            "name": "PlayerInstanceFromIndex"
        },
        {
            "desc": "用关键字从table中预缓存一个实体",
            "func": "( string_1, handle_2, handle_3 )",
            "return": "void",
            "name": "PrecacheEntityFromTable"
        },
        {
            "desc": "预缓存一个实体关键字列表",
            "func": "( handle_1, handle_2 )",
            "return": "void",
            "name": "PrecacheEntityListFromTable"
        },
        {
            "desc": "Printaconsolemessagewithalinkedconsolecommand",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "PrintLinkedConsoleMessage"
        },
        {
            "desc": "获取范围内随机float",
            "func": "( float_1, float_2 )",
            "return": "float",
            "name": "RandomFloat"
        },
        {
            "desc": "获取范围内随机int",
            "func": "( int_1, int_2 )",
            "return": "int",
            "name": "RandomInt"
        },
        {
            "desc": "为一个脚本基础的生成单位过滤器创建一个C代理",
            "func": "( string_1 )",
            "return": "void",
            "name": "RegisterSpawnGroupFilterProxy"
        },
        {
            "desc": "重载MotD文件",
            "func": "()",
            "return": "void",
            "name": "ReloadMOTD"
        },
        {
            "desc": "为一个脚本基础的生成单位过滤器删除一个C代理",
            "func": "( string_1 )",
            "return": "void",
            "name": "RemoveSpawnGroupFilterProxy"
        },
        {
            "desc": "旋转一个QAngle，用另一个QAngle",
            "func": "( QAngle_1, QAngle_2 )",
            "return": "QAngle",
            "name": "RotateOrientation"
        },
        {
            "desc": "Rotate a Vector around a point.",
            "func": "( Vector_1, QAngle_2, Vector_3 )",
            "return": "Vector",
            "name": "RotatePosition"
        },
        {
            "desc": "围绕给定vector轴线旋转一个四元数",
            "func": "( Quaternion_1, Vector_2, float_3 )",
            "return": "Quaternion",
            "name": "RotateQuaternionByAxisAngle"
        },
        {
            "desc": "两个QAngle间的delta值",
            "func": "( QAngle_1, QAngle_2 )",
            "return": "QAngle",
            "name": "RotationDelta"
        },
        {
            "desc": "converts delta QAngle to an angular velocity Vector",
            "func": "( QAngle_1, QAngle_2 )",
            "return": "Vector",
            "name": "RotationDeltaAsAngularVelocity"
        },
        {
            "desc": "用下列参数开始镜头摇晃：vecCenter,flAmplitude,flFrequency,flDuration,flRadius,eCommand(SHAKE_START=0,SHAKE_STOP=1),bAirShake",
            "func": "( Vector_1, float_2, float_3, float_4, float_5, int_6, bool_7 )",
            "return": "void",
            "name": "ScreenShake"
        },
        {
            "desc": "给控制台发送string作为客户端命令",
            "func": "( string_1 )",
            "return": "void",
            "name": "SendToConsole"
        },
        {
            "desc": "为所有玩家设置opvar值",
            "func": "( string_1, string_2, string_3, float_4 )",
            "return": "void",
            "name": "SetOpvarFloatAll"
        },
        {
            "desc": "为单一玩家设置opvar值(szStackName,szOperatorName,szOpvarName,flOpvarValue,hEnt)",
            "func": "( string_1, string_2, string_3, float_4, handle_5 )",
            "return": "void",
            "name": "SetOpvarFloatPlayer"
        },
        {
            "desc": "Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
            "func": "( handle_1, Vector_2 )",
            "return": "void",
            "name": "SetPhysAngularVelocity"
        },
        {
            "desc": "设置当前任务名",
            "func": "( string_1 )",
            "return": "void",
            "name": "SetQuestName"
        },
        {
            "desc": "设置当前任务阶段",
            "func": "( int_1 )",
            "return": "void",
            "name": "SetQuestPhase"
        },
        {
            "desc": "为ehandle设置rendering（渲染）开/关",
            "func": "( ehandle_1, bool_2 )",
            "return": "void",
            "name": "SetRenderingEnabled"
        },
        {
            "desc": "从table同步生成一个实体",
            "func": "( string_1, handle_2 )",
            "return": "handle",
            "name": "SpawnEntityFromTableSynchronous"
        },
        {
            "desc": "从一系列生成表中分级生成一个实体组",
            "func": "( handle_1, bool_2, handle_3 )",
            "return": "bool",
            "name": "SpawnEntityGroupFromTable"
        },
        {
            "desc": "从一个生成表列表异步生成一个实体组，生成完成后会触发一次回调",
            "func": "( handle_1, handle_2 )",
            "return": "int",
            "name": "SpawnEntityListFromTableAsynchronous"
        },
        {
            "desc": "从一个生成表列表同步生成一个实体组.",
            "func": "( handle_1 )",
            "return": "handle",
            "name": "SpawnEntityListFromTableSynchronous"
        },
        {
            "desc": "(quaternion,quaternion,float)非常基础的v0到v1差值，t属于[0,1]为参数",
            "func": "( Quaternion_1, Quaternion_2, float_3 )",
            "return": "Quaternion",
            "name": "SplineQuaternions"
        },
        {
            "desc": "(vector,vector,float)非常基础的v0到v1差值，t属于[0,1]为参数",
            "func": "( Vector_1, Vector_2, float_3 )",
            "return": "Vector",
            "name": "SplineVectors"
        },
        {
            "desc": "开始音效事件",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StartSoundEvent"
        },
        {
            "desc": "在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "return": "void",
            "name": "StartSoundEventFromPosition"
        },
        {
            "desc": "通过可靠的传递，在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "return": "void",
            "name": "StartSoundEventFromPositionReliable"
        },
        {
            "desc": "通过随意的传递，在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "return": "void",
            "name": "StartSoundEventFromPositionUnreliable"
        },
        {
            "desc": "通过可靠的传递，开始音效事件。",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StartSoundEventReliable"
        },
        {
            "desc": "通过随意的传递，开始音效事件。",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StartSoundEventUnreliable"
        },
        {
            "desc": "(hEntity,szEffectName)",
            "func": "( handle_1, string_2 )",
            "return": "void",
            "name": "StopEffect"
        },
        {
            "desc": "停止listen在给定内容内的所有游戏事件",
            "func": "( handle_1 )",
            "return": "void",
            "name": "StopListeningToAllGameEvents"
        },
        {
            "desc": "停止listen特定的游戏事件",
            "func": "( int_1 )",
            "return": "bool",
            "name": "StopListeningToGameEvent"
        },
        {
            "desc": "停止音效事件",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StopSoundEvent"
        },
        {
            "desc": "停止实体上的命名音效",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StopSoundOn"
        },
        {
            "desc": "获取当前服务器时间",
            "func": "()",
            "return": "float",
            "name": "Time"
        },
        {
            "desc": "传递table-输入:start,end,ent,(可选mins,maxs)--输出:pos,fraction,hit,startsolid,normal",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "TraceCollideable"
        },
        {
            "desc": "传递table-输入:start,end,min,max,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "TraceHull"
        },
        {
            "desc": "传递table-输入:startpos,endpos,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "TraceLine"
        },
        {
            "desc": "删除给定实体",
            "func": "( handle_1 )",
            "return": "void",
            "name": "UTIL_Remove"
        },
        {
            "desc": "立即删除给定实体",
            "func": "( handle_1 )",
            "return": "void",
            "name": "UTIL_RemoveImmediate"
        },
        {
            "desc": "当一个单位通过一系列过滤器时进行检查。(hNPC,nTargetTeam,nTargetType,nTargetFlags,nTeam",
            "func": "( handle_1, int_2, int_3, int_4, int_5 )",
            "return": "int",
            "name": "UnitFilter"
        },
        {
            "desc": "通过名称去除生成组",
            "func": "( string_1 )",
            "return": "void",
            "name": "UnloadSpawnGroup"
        },
        {
            "desc": "通过handle去除生成组",
            "func": "( int_1 )",
            "return": "void",
            "name": "UnloadSpawnGroupByHandle"
        },
        {
            "desc": "为Vector获取Qangle（没有滚动）",
            "func": "( Vector_1 )",
            "return": "QAngle",
            "name": "VectorToAngles"
        },
        {
            "desc": "输出警告",
            "func": "( string_1 )",
            "return": "void",
            "name": "Warning"
        },
        {
            "desc": "获取给定cvar的值，返回float.",
            "func": "( string_1 )",
            "return": "float",
            "name": "cvar_getf"
        },
        {
            "desc": "设置给定cvar的值,传递float.",
            "func": "( string_1, float_2 )",
            "return": "bool",
            "name": "cvar_setf"
        },
        {
            "desc": "给决定数据库增加一个规则",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "rr_AddDecisionRule"
        },
        {
            "desc": "把QueryBestResponse的结果交付给定的实体播放，用参数调用(entity,airesponse)",
            "func": "( handle_1, handle_2 )",
            "return": "bool",
            "name": "rr_CommitAIResponse"
        },
        {
            "desc": "获取所有提供的表达者目标的table，格式为{name:handle,name:handle}.",
            "func": "()",
            "return": "handle",
            "name": "rr_GetResponseTargets"
        },
        {
            "desc": "参数:(hEnt,hQuery,hResult)//静态:对实体的回复系统测试'query'并返回最佳回复(无回复返回nil)",
            "func": "( handle_1, handle_2, handle_3 )",
            "return": "bool",
            "name": "rr_QueryBestResponse"
        }
    ],
    "CDOTA_Modifier_Lua_Motion_Both": [
        {
            "desc": "当水平运动被打断时进行回调。",
            "func": "()",
            "return": "void",
            "name": "OnHorizontalMotionInterrupted"
        },
        {
            "desc": "当竖直运动被打断时进行回调。",
            "func": "()",
            "return": "void",
            "name": "OnVerticalMotionInterrupted"
        },
        {
            "desc": "根据给定的间隔对NPC施加水平运动。",
            "func": "( handle me, float dt )",
            "return": "void",
            "name": "UpdateHorizontalMotion"
        },
        {
            "desc": "根据给定的间隔对NPC施加竖直运动。",
            "func": "( handle me, float dt )",
            "return": "void",
            "name": "UpdateVerticalMotion"
        }
    ],
    "C_DOTABaseAbility": [
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetBehavior"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "GetCaster"
        },
        {
            "desc": "Return the level of the ability",
            "func": "()",
            "return": "int",
            "name": "GetLevel"
        },
        {
            "desc": "Gets a value from this ability's special value block for its current level.",
            "func": "( string szName )",
            "return": "table",
            "name": "GetSpecialValueFor"
        },
        {
            "desc": "Whether or not this ability is toggled.",
            "func": "()",
            "return": "bool",
            "name": "GetToggleState"
        },
        {
            "desc": "Whether or not this ability is an item.",
            "func": "()",
            "return": "bool",
            "name": "IsItem"
        }
    ],
    "C_DOTA_Modifier_Lua": [
        {
            "desc": "True/false if this modifier is active on illusions.",
            "func": "()",
            "return": "bool",
            "name": "AllowIllusionDuplicate"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "CanParentBeAutoAttacked"
        },
        {
            "desc": "True/false if this buff is removed when the duration expires.",
            "func": "()",
            "return": "bool",
            "name": "DestroyOnExpire"
        },
        {
            "desc": "Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t",
            "func": "()",
            "return": "int",
            "name": "GetAttributes"
        },
        {
            "desc": "Returns aura stickiness",
            "func": "()",
            "return": "float",
            "name": "GetAuraDuration"
        },
        {
            "desc": "Return true/false if this entity should receive the aura under specific conditions",
            "func": "( handle hEntity )",
            "return": "bool",
            "name": "GetAuraEntityReject"
        },
        {
            "desc": "Return the range around the parent this aura tries to apply its buff.",
            "func": "()",
            "return": "int",
            "name": "GetAuraRadius"
        },
        {
            "desc": "Return the unit flags this aura respects when placing buffs.",
            "func": "()",
            "return": "int",
            "name": "GetAuraSearchFlags"
        },
        {
            "desc": "Return the teams this aura applies its buff to.",
            "func": "()",
            "return": "int",
            "name": "GetAuraSearchTeam"
        },
        {
            "desc": "Return the unit classifications this aura applies its buff to.",
            "func": "()",
            "return": "int",
            "name": "GetAuraSearchType"
        },
        {
            "desc": "Return the attach type of the particle system from GetEffectName.",
            "func": "()",
            "return": "int",
            "name": "GetEffectAttachType"
        },
        {
            "desc": "Return the name of the particle system that is created while this modifier is active.",
            "func": "()",
            "return": "string",
            "name": "GetEffectName"
        },
        {
            "desc": "Return the name of the hero effect particle system that is created while this modifier is active.",
            "func": "()",
            "return": "string",
            "name": "GetHeroEffectName"
        },
        {
            "desc": "The name of the secondary modifier that will be applied by this modifier (if it is an aura).",
            "func": "()",
            "return": "string",
            "name": "GetModifierAura"
        },
        {
            "desc": "Return the priority order this modifier will be applied over others.",
            "func": "()",
            "return": "int",
            "name": "GetPriority"
        },
        {
            "desc": "Return the name of the status effect particle system that is created while this modifier is active.",
            "func": "()",
            "return": "string",
            "name": "GetStatusEffectName"
        },
        {
            "desc": "Return the name of the buff icon to be shown for this modifier.",
            "func": "()",
            "return": "string",
            "name": "GetTexture"
        },
        {
            "desc": "Relationship of this hero effect with those from other buffs (higher is more likely to be shown).",
            "func": "()",
            "return": "int",
            "name": "HeroEffectPriority"
        },
        {
            "desc": "True/false if this modifier is an aura.",
            "func": "()",
            "return": "bool",
            "name": "IsAura"
        },
        {
            "desc": "True/false if this aura provides buffs when the parent is dead.",
            "func": "()",
            "return": "bool",
            "name": "IsAuraActiveOnDeath"
        },
        {
            "desc": "True/false if this modifier should be displayed as a debuff.",
            "func": "()",
            "return": "bool",
            "name": "IsDebuff"
        },
        {
            "desc": "True/false if this modifier should be displayed on the buff bar.",
            "func": "()",
            "return": "bool",
            "name": "IsHidden"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsPermanent"
        },
        {
            "desc": "True/false if this modifier can be purged.",
            "func": "()",
            "return": "bool",
            "name": "IsPurgable"
        },
        {
            "desc": "True/false if this modifier can be purged by strong dispels.",
            "func": "()",
            "return": "bool",
            "name": "IsPurgeException"
        },
        {
            "desc": "True/false if this modifier is considered a stun for purge reasons.",
            "func": "()",
            "return": "bool",
            "name": "IsStunDebuff"
        },
        {
            "desc": "Runs when the modifier is created.",
            "func": "( handle table )",
            "return": "void",
            "name": "OnCreated"
        },
        {
            "desc": "Runs when the modifier is destroyed (after unit loses modifier).",
            "func": "()",
            "return": "void",
            "name": "OnDestroy"
        },
        {
            "desc": "Runs when the think interval occurs.",
            "func": "()",
            "return": "void",
            "name": "OnIntervalThink"
        },
        {
            "desc": "Runs when the modifier is refreshed.",
            "func": "( handle table )",
            "return": "void",
            "name": "OnRefresh"
        },
        {
            "desc": "Runs when the modifier is destroyed (before unit loses modifier).",
            "func": "()",
            "return": "void",
            "name": "OnRemoved"
        },
        {
            "desc": "Runs when stack count changes (param is old count).",
            "func": "( int iStackCount )",
            "return": "void",
            "name": "OnStackCountChanged"
        },
        {
            "desc": "True/false if this modifier is removed when the parent dies.",
            "func": "()",
            "return": "bool",
            "name": "RemoveOnDeath"
        },
        {
            "desc": "Apply the overhead offset to the attached effect.",
            "func": "()",
            "return": "bool",
            "name": "ShouldUseOverheadOffset"
        },
        {
            "desc": "Relationship of this status effect with those from other buffs (higher is more likely to be shown).",
            "func": "()",
            "return": "int",
            "name": "StatusEffectPriority"
        }
    ],
    "GlobalSys": [
        {
            "desc": "CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
            "func": "( string_1 )",
            "return": "table",
            "name": "CommandLineCheck"
        },
        {
            "desc": "CommandLineFloat(name) : returns the command line param as a float.",
            "func": "( string_1, float_2 )",
            "return": "table",
            "name": "CommandLineFloat"
        },
        {
            "desc": "CommandLineInt(name) : returns the command line param as an int.",
            "func": "( string_1, int_2 )",
            "return": "table",
            "name": "CommandLineInt"
        },
        {
            "desc": "CommandLineStr(name) : returns the command line param as a string.",
            "func": "( string_1, string_2 )",
            "return": "table",
            "name": "CommandLineStr"
        }
    ],
    "CScriptPrecacheContext": [
        {
            "desc": "预缓存指定资源",
            "func": "( string_1 )",
            "return": "void",
            "name": "AddResource"
        },
        {
            "desc": "读取一个键值（spawnkey）",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetValue"
        }
    ],
    "C_BaseModelEntity": [
        {
            "desc": "GetRenderAlpha(): Get the alpha modulation of this entity.",
            "func": "()",
            "return": "int",
            "name": "GetRenderAlpha"
        }
    ],
    "C_DOTA_BaseNPC": [
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityCount"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetAttackSpeed"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetAttacksPerSecond"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetBaseAttackTime"
        },
        {
            "desc": "Returns base magical armor value.",
            "func": "()",
            "return": "float",
            "name": "GetBaseMagicalResistanceValue"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetBaseMoveSpeed"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCastRangeBonus"
        },
        {
            "desc": "Returns the size of the collision padding around the hull.",
            "func": "()",
            "return": "float",
            "name": "GetCollisionPadding"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCooldownReduction"
        },
        {
            "desc": "Gets the current vision range.",
            "func": "()",
            "return": "int",
            "name": "GetCurrentVisionRange"
        },
        {
            "desc": "Returns the vision range after modifiers.",
            "func": "()",
            "return": "int",
            "name": "GetDayTimeVisionRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetHasteFactor"
        },
        {
            "desc": "Get the current health percent of the unit.",
            "func": "()",
            "return": "int",
            "name": "GetHealthPercent"
        },
        {
            "desc": "Get the collision hull radius of this NPC.",
            "func": "()",
            "return": "float",
            "name": "GetHullRadius"
        },
        {
            "desc": "Returns speed after all modifiers.",
            "func": "()",
            "return": "float",
            "name": "GetIdealSpeed"
        },
        {
            "desc": "Returns speed after all modifiers, but excluding those that reduce speed.",
            "func": "()",
            "return": "float",
            "name": "GetIdealSpeedNoSlows"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetIncreasedAttackSpeed"
        },
        {
            "desc": "Returns the level of this unit.",
            "func": "()",
            "return": "int",
            "name": "GetLevel"
        },
        {
            "desc": "Returns current magical armor value.",
            "func": "()",
            "return": "float",
            "name": "GetMagicalArmorValue"
        },
        {
            "desc": "Get the mana on this unit.",
            "func": "()",
            "return": "float",
            "name": "GetMana"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetManaRegen"
        },
        {
            "desc": "Get the maximum mana of this unit.",
            "func": "()",
            "return": "float",
            "name": "GetMaxMana"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetModelRadius"
        },
        {
            "desc": "Gets the stack count of a given modifier.",
            "func": "( string pszScriptName, handle hCaster )",
            "return": "int",
            "name": "GetModifierStackCount"
        },
        {
            "desc": "",
            "func": "( float flBaseSpeed, bool bReturnUnslowed )",
            "return": "float",
            "name": "GetMoveSpeedModifier"
        },
        {
            "desc": "Returns the vision range after modifiers.",
            "func": "()",
            "return": "int",
            "name": "GetNightTimeVisionRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetOpposingTeamNumber"
        },
        {
            "desc": "Get the collision hull radius (including padding) of this NPC.",
            "func": "()",
            "return": "float",
            "name": "GetPaddedCollisionRadius"
        },
        {
            "desc": "Returns base physical armor value.",
            "func": "()",
            "return": "float",
            "name": "GetPhysicalArmorBaseValue"
        },
        {
            "desc": "Returns current physical armor value.",
            "func": "( bool bIgnoreBase )",
            "return": "float",
            "name": "GetPhysicalArmorValue"
        },
        {
            "desc": "Get the owner player ID for this unit.",
            "func": "()",
            "return": "int",
            "name": "GetPlayerOwnerID"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetSecondsPerAttack"
        },
        {
            "desc": "Get how much gold has been spent on ability upgrades.",
            "func": "()",
            "return": "int",
            "name": "GetTotalPurchasedUpgradeGoldCost"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetUnitLabel"
        },
        {
            "desc": "Get the name of this unit.",
            "func": "()",
            "return": "string",
            "name": "GetUnitName"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasAttackCapability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasFlyMovementCapability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasFlyingVision"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasGroundMovementCapability"
        },
        {
            "desc": "See whether this unit has an item by name.",
            "func": "( string pItemName )",
            "return": "bool",
            "name": "HasItemInInventory"
        },
        {
            "desc": "Sees if this unit has a given modifier.",
            "func": "( string pszScriptName )",
            "return": "bool",
            "name": "HasModifier"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasMovementCapability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasScepter"
        },
        {
            "desc": "Is this unit an Ancient?",
            "func": "()",
            "return": "bool",
            "name": "IsAncient"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsAttackImmune"
        },
        {
            "desc": "Is this unit a Barracks?",
            "func": "()",
            "return": "bool",
            "name": "IsBarracks"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsBlind"
        },
        {
            "desc": "Is this unit a boss?",
            "func": "()",
            "return": "bool",
            "name": "IsBoss"
        },
        {
            "desc": "Is this unit a building?",
            "func": "()",
            "return": "bool",
            "name": "IsBuilding"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsCommandRestricted"
        },
        {
            "desc": "Is this unit a considered a hero for targeting purposes?",
            "func": "()",
            "return": "bool",
            "name": "IsConsideredHero"
        },
        {
            "desc": "Is this unit controlled by any non-bot player?",
            "func": "()",
            "return": "bool",
            "name": "IsControllableByAnyPlayer"
        },
        {
            "desc": "Is this unit a courier?",
            "func": "()",
            "return": "bool",
            "name": "IsCourier"
        },
        {
            "desc": "Is this a Creature type NPC?",
            "func": "()",
            "return": "bool",
            "name": "IsCreature"
        },
        {
            "desc": "Is this unit a creep?",
            "func": "()",
            "return": "bool",
            "name": "IsCreep"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDisarmed"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDominated"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsEvadeDisabled"
        },
        {
            "desc": "Is this unit an Ancient?",
            "func": "()",
            "return": "bool",
            "name": "IsFort"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsFrozen"
        },
        {
            "desc": "Is this a hero or hero illusion?",
            "func": "()",
            "return": "bool",
            "name": "IsHero"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHexed"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsIllusion"
        },
        {
            "desc": "Does this unit have an inventory.",
            "func": "()",
            "return": "bool",
            "name": "IsInventoryEnabled"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsInvisible"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsInvulnerable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsLowAttackPriority"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsMagicImmune"
        },
        {
            "desc": "Is this unit moving?",
            "func": "()",
            "return": "bool",
            "name": "IsMoving"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsMuted"
        },
        {
            "desc": "Is this a neutral?",
            "func": "()",
            "return": "bool",
            "name": "IsNeutralUnitType"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsNightmared"
        },
        {
            "desc": "Is this unit a ward-type unit?",
            "func": "()",
            "return": "bool",
            "name": "IsOther"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsOutOfGame"
        },
        {
            "desc": "Is this unit owned by any non-bot player?",
            "func": "()",
            "return": "bool",
            "name": "IsOwnedByAnyPlayer"
        },
        {
            "desc": "Is this a phantom unit?",
            "func": "()",
            "return": "bool",
            "name": "IsPhantom"
        },
        {
            "desc": "Is this unit a ranged attacker?",
            "func": "()",
            "return": "bool",
            "name": "IsRangedAttacker"
        },
        {
            "desc": "Is this a real hero?",
            "func": "()",
            "return": "bool",
            "name": "IsRealHero"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsRooted"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsSilenced"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsSpeciallyDeniable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsStunned"
        },
        {
            "desc": "Is this unit summoned?",
            "func": "()",
            "return": "bool",
            "name": "IsSummoned"
        },
        {
            "desc": "Is this a tower?",
            "func": "()",
            "return": "bool",
            "name": "IsTower"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsUnselectable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsUntargetable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoHealthBar"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoTeamMoveTo"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoTeamSelect"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoUnitCollision"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NotOnMinimap"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NotOnMinimapForEnemies"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "PassivesDisabled"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ProvidesVision"
        },
        {
            "desc": "Gets this unit's attack range after all modifiers.",
            "func": "()",
            "return": "float",
            "name": "Script_GetAttackRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "Script_IsDeniable"
        },
        {
            "desc": "Can the unit respawn?",
            "func": "()",
            "return": "bool",
            "name": "UnitCanRespawn"
        }
    ],
    "CBodyComponent": [
        {
            "desc": "在指定的世界位置施加一个物理推动",
            "func": "( Vector_1, Vector_2 )",
            "return": "void",
            "name": "AddImpulseAtPosition"
        },
        {
            "desc": "为物理物件增加一个线速度或角速度",
            "func": "( Vector_1, Vector_2 )",
            "return": "void",
            "name": "AddVelocity"
        },
        {
            "desc": "从其父项（parent）中分离",
            "func": "()",
            "return": "void",
            "name": "DetachFromParent"
        },
        {
            "desc": "返回激活的序列（sequence）",
            "func": "()",
            "return": "<unknown>",
            "name": "GetSequence"
        },
        {
            "desc": "是否依附父项（parent）",
            "func": "()",
            "return": "bool",
            "name": "IsAttachedToParent"
        },
        {
            "desc": "输入名字返回序列（sequence）ID",
            "func": "( string_1 )",
            "return": "<unknown>",
            "name": "LookupSequence"
        },
        {
            "desc": "按秒数返回指定序列（sequence）的持续时间",
            "func": "( string_1 )",
            "return": "float",
            "name": "SequenceDuration"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "return": "void",
            "name": "SetAngularVelocity"
        },
        {
            "desc": "输入动画名称播放动作，需要模型拥有该动画",
            "func": "( string_1 )",
            "return": "void",
            "name": "SetAnimation"
        },
        {
            "desc": "",
            "func": "( utlstringtoken_1 )",
            "return": "void",
            "name": "SetMaterialGroup"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "return": "void",
            "name": "SetVelocity"
        }
    ],
    "C_PointWorldText": [
        {
            "desc": "Set the message on this entity.",
            "func": "( string pMessage )",
            "return": "void",
            "name": "SetMessage"
        }
    ],
    "CScriptKeyValues": [
        {
            "desc": "读取一个键值（spawnkey）",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetValue"
        }
    ],
    "C_BaseCombatCharacter": [],
    "Constants": {
        "Attributes": [
            {
                "desc": "属性无效",
                "name": "DOTA_ATTRIBUTE_INVALID",
                "value": -1
            },
            {
                "desc": "属性强度",
                "name": "DOTA_ATTRIBUTE_STRENGTH",
                "value": 0
            },
            {
                "desc": "属性敏捷",
                "name": "DOTA_ATTRIBUTE_AGILITY",
                "value": 1
            },
            {
                "desc": "属性智力",
                "name": "DOTA_ATTRIBUTE_INTELLECT",
                "value": 2
            },
            {
                "desc": "属性最大值",
                "name": "DOTA_ATTRIBUTE_MAX",
                "value": 3
            }
        ],
        "DOTALimits_t": [
            {
                "desc": "Default number of players per team.()",
                "name": "DOTA_DEFAULT_MAX_TEAM",
                "value": 5
            },
            {
                "desc": "Default number of non-spectator players supported.()",
                "name": "DOTA_DEFAULT_MAX_TEAM_PLAYERS",
                "value": 10
            },
            {
                "desc": "Max number of player teams supported.(最大队伍数？)",
                "name": "DOTA_MAX_PLAYER_TEAMS",
                "value": 10
            },
            {
                "desc": "Max number of viewers in a spectator lobby.()",
                "name": "DOTA_MAX_SPECTATOR_LOBBY_SIZE",
                "value": 15
            },
            {
                "desc": "Max number of non-spectator players supported.(玩家最大数量)",
                "name": "DOTA_MAX_TEAM_PLAYERS",
                "value": 24
            },
            {
                "desc": "Max number of players per team.()",
                "name": "DOTA_MAX_TEAM",
                "value": 24
            },
            {
                "desc": "How many spectators can watch.()",
                "name": "DOTA_MAX_SPECTATOR_TEAM_SIZE",
                "value": 40
            },
            {
                "desc": "Max number of players connected to the server including spectators.(最大玩家数？)",
                "name": "DOTA_MAX_PLAYERS",
                "value": 64
            }
        ],
        "DOTA_ABILITY_BEHAVIOR": [
            {
                "desc": "DOTA能力行为的最后求助点",
                "name": "DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT",
                "value": -2147483648
            },
            {
                "desc": "DOTA能力行为抑制相关消耗品",
                "name": "DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE",
                "value": 0
            },
            {
                "desc": "DOTA能力-行为-自由绘制目标",
                "name": "DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING",
                "value": 0
            },
            {
                "desc": "指南中显示的DOTA能力行为",
                "name": "DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES",
                "value": 0
            },
            {
                "desc": "DOTA能力行为可以自我施放",
                "name": "DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST",
                "value": 0
            },
            {
                "desc": "DOTA能力行为被效果索引解锁",
                "name": "DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX",
                "value": 0
            },
            {
                "desc": "DOTA能力行为无",
                "name": "DOTA_ABILITY_BEHAVIOR_NONE",
                "value": 0
            },
            {
                "desc": "隐藏技能",
                "name": "DOTA_ABILITY_BEHAVIOR_HIDDEN",
                "value": 1
            },
            {
                "desc": "被动",
                "name": "DOTA_ABILITY_BEHAVIOR_PASSIVE",
                "value": 2
            },
            {
                "desc": "无目标施法",
                "name": "DOTA_ABILITY_BEHAVIOR_NO_TARGET",
                "value": 4
            },
            {
                "desc": "单位目标",
                "name": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
                "value": 8
            },
            {
                "desc": "点目标",
                "name": "DOTA_ABILITY_BEHAVIOR_POINT",
                "value": 16
            },
            {
                "desc": "范围施法",
                "name": "DOTA_ABILITY_BEHAVIOR_AOE",
                "value": 32
            },
            {
                "desc": "无法作为升级的技能",
                "name": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
                "value": 64
            },
            {
                "desc": "持续施法",
                "name": "DOTA_ABILITY_BEHAVIOR_CHANNELLED",
                "value": 128
            },
            {
                "desc": "物品目标",
                "name": "DOTA_ABILITY_BEHAVIOR_ITEM",
                "value": 256
            },
            {
                "desc": "切换技能",
                "name": "DOTA_ABILITY_BEHAVIOR_TOGGLE",
                "value": 512
            },
            {
                "desc": "不影响朝向",
                "name": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
                "value": 1024
            },
            {
                "desc": "忽视前摇",
                "name": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
                "value": 2048
            },
            {
                "desc": "自动施法",
                "name": "DOTA_ABILITY_BEHAVIOR_AUTOCAST",
                "value": 4096
            },
            {
                "desc": "可选单位目标?",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
                "value": 8192
            },
            {
                "desc": "DOTA能力行为可选点",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
                "value": 16384
            },
            {
                "desc": "可选无目标?",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
                "value": 32768
            },
            {
                "desc": "光环_仅改变技能说明",
                "name": "DOTA_ABILITY_BEHAVIOR_AURA",
                "value": 65536
            },
            {
                "desc": "法球",
                "name": "DOTA_ABILITY_BEHAVIOR_ATTACK",
                "value": 131072
            },
            {
                "desc": "不恢复移动",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
                "value": 262144
            },
            {
                "desc": "定身无法释放",
                "name": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
                "value": 524288
            },
            {
                "desc": "无视限制",
                "name": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
                "value": 1048576
            },
            {
                "desc": "自动施法_总有效",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
                "value": 2097152
            },
            {
                "desc": "施法打断有效",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
                "value": 4194304
            },
            {
                "desc": "不影响移动",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
                "value": 8388608
            },
            {
                "desc": "不惊醒目标",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
                "value": 16777216
            },
            {
                "desc": "不恢复攻击",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
                "value": 33554432
            },
            {
                "desc": "被偷取技能不影响施法",
                "name": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
                "value": 67108864
            },
            {
                "desc": "忽略后摇",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
                "value": 134217728
            },
            {
                "desc": "神符目标",
                "name": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
                "value": 268435456
            },
            {
                "desc": "不取消持续施法",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
                "value": 536870912
            },
            {
                "desc": "DOTA能力行为向量定向",
                "name": "DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING",
                "value": 1073741824
            }
        ],
        "DOTATeam_t": [
            {
                "desc": "DOTA团队第一",
                "name": "DOTA_TEAM_FIRST",
                "value": 2
            },
            {
                "desc": "天辉",
                "name": "DOTA_TEAM_GOODGUYS",
                "value": 2
            },
            {
                "desc": "夜魇",
                "name": "DOTA_TEAM_BADGUYS",
                "value": 3
            },
            {
                "desc": "野怪队伍",
                "name": "DOTA_TEAM_NEUTRALS",
                "value": 4
            },
            {
                "desc": "没有队伍",
                "name": "DOTA_TEAM_NOTEAM",
                "value": 5
            },
            {
                "desc": "DOTA团队自定义最小值",
                "name": "DOTA_TEAM_CUSTOM_MIN",
                "value": 6
            },
            {
                "desc": "DOTA团队自定义1",
                "name": "DOTA_TEAM_CUSTOM_1",
                "value": 6
            },
            {
                "desc": "DOTA团队自定义2",
                "name": "DOTA_TEAM_CUSTOM_2",
                "value": 7
            },
            {
                "desc": "DOTA团队自定义计数",
                "name": "DOTA_TEAM_CUSTOM_COUNT",
                "value": 8
            },
            {
                "desc": "DOTA团队自定义3",
                "name": "DOTA_TEAM_CUSTOM_3",
                "value": 8
            },
            {
                "desc": "DOTA团队自定义4",
                "name": "DOTA_TEAM_CUSTOM_4",
                "value": 9
            },
            {
                "desc": "DOTA团队自定义5",
                "name": "DOTA_TEAM_CUSTOM_5",
                "value": 10
            },
            {
                "desc": "DOTA团队自定义6",
                "name": "DOTA_TEAM_CUSTOM_6",
                "value": 11
            },
            {
                "desc": "DOTA团队自定义7",
                "name": "DOTA_TEAM_CUSTOM_7",
                "value": 12
            },
            {
                "desc": "DOTA团队自定义8",
                "name": "DOTA_TEAM_CUSTOM_8",
                "value": 13
            },
            {
                "desc": "DOTA团队自定义最大值",
                "name": "DOTA_TEAM_CUSTOM_MAX",
                "value": 13
            },
            {
                "desc": "DOTA团队计数",
                "name": "DOTA_TEAM_COUNT",
                "value": 14
            }
        ],
        "modifierfunction": [
            {
                "desc": "GetModifierPreAttack_BonusDamage(设置附加攻击力)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
                "value": 0
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage_Target(设置攻击前额外伤害目标)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
                "value": 1
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage_Proc(设置攻击前附加伤害)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
                "value": 2
            },
            {
                "desc": "GetModifierPreAttack_BonusDamagePostCrit(设置增加的伤害_不参与暴击计算)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
                "value": 3
            },
            {
                "desc": "GetModifierBaseAttack_BonusDamage(设置基础攻击力)",
                "name": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
                "value": 4
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Physical(修改在普通攻击后计算的物理伤害)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
                "value": 5
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Magical(修改在普通攻击后计算的魔法伤害)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
                "value": 6
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Pure(修改在普通攻击后计算的纯粹伤害)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
                "value": 7
            },
            {
                "desc": "GetModifierProcAttack_Feedback(设置攻击反馈过程)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
                "value": 8
            },
            {
                "desc": "GetModifierOverrideAttackDamage(覆盖攻击伤害)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
                "value": 9
            },
            {
                "desc": "GetModifierPreAttack(设置攻击前？)",
                "name": "MODIFIER_PROPERTY_PRE_ATTACK",
                "value": 10
            },
            {
                "desc": "GetModifierInvisibilityLevel(设置隐身等级)",
                "name": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
                "value": 11
            },
            {
                "desc": "GetModifierInvisibilityAttackBehaviorException(设置所受技能伤害数值)",
                "name": "MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
                "value": 12
            },
            {
                "desc": "GetModifierPersistentInvisibility(是否永久隐身)",
                "name": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
                "value": 13
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant(设置移动速度奖励)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
                "value": 14
            },
            {
                "desc": "GetModifierMoveSpeedOverride(设置基础移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
                "value": 15
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage(设置移动速度百分比_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
                "value": 16
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage_Unique(设置移动速度百分比1_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
                "value": 17
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage_Unique_2(设置移动速度百分比2_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
                "value": 18
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Special_Boots(设置移动速度奖励_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
                "value": 19
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Special_Boots_2(设置移动速度奖励2_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
                "value": 20
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant_Unique(设置移动速度奖励_1)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
                "value": 21
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant_Unique_2(设置移动速度奖励_2)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
                "value": 22
            },
            {
                "desc": "GetModifierMoveSpeed_Absolute(设置移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
                "value": 23
            },
            {
                "desc": "GetModifierMoveSpeed_AbsoluteMin(设置最小移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
                "value": 24
            },
            {
                "desc": "GetModifierMoveSpeed_AbsoluteMax(设置最大移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
                "value": 25
            },
            {
                "desc": "GetModifierIgnoreMovespeedLimit(是否忽略移动速度限制)",
                "name": "MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
                "value": 26
            },
            {
                "desc": "GetModifierMoveSpeed_Limit(是否限制移动速度_无效)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_LIMIT",
                "value": 27
            },
            {
                "desc": "GetModifierAttackSpeedBaseOverride(设置加成的基础攻击速度)",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
                "value": 28
            },
            {
                "desc": "GetModifierFixedAttackRate(设置固定攻击率？)",
                "name": "MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
                "value": 29
            },
            {
                "desc": "GetModifierAttackSpeedBonus_Constant(设置攻击速度)",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
                "value": 30
            },
            {
                "desc": "GetModifierCooldownReduction_Constant(设置减少冷却时间)",
                "name": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
                "value": 31
            },
            {
                "desc": "GetModifierBaseAttackTimeConstant(设置攻击初始间隔)",
                "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
                "value": 32
            },
            {
                "desc": "GetModifierBaseAttackTimeConstant_Adjust(修正属性基攻击时间常数调整)",
                "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
                "value": 33
            },
            {
                "desc": "GetModifierAttackPointConstant(修正属性攻击点常数)",
                "name": "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
                "value": 34
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage(设置伤害百分比)",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
                "value": 35
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage_Illusion(设置幻象攻击百分比)",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
                "value": 36
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage_Illusion_Amplify(设置幻象伤害百分比)",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
                "value": 37
            },
            {
                "desc": "GetModifierTotalDamageOutgoing_Percentage(设置伤害总百分比)",
                "name": "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
                "value": 38
            },
            {
                "desc": "GetModifierSpellAmplify_Percentage(设置施法增强比例)",
                "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
                "value": 39
            },
            {
                "desc": "GetModifierSpellAmplify_PercentageUnique(设置施法增强比例2)",
                "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
                "value": 40
            },
            {
                "desc": "GetModifierHealAmplify_PercentageSource(设置治疗百分比来源？)",
                "name": "MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
                "value": 41
            },
            {
                "desc": "GetModifierHealAmplify_PercentageTarget(修正属性治疗放大百分比目标)",
                "name": "MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
                "value": 42
            },
            {
                "desc": "GetModifierHPRegenAmplify_Percentage(设置施法HP增强比例)",
                "name": "MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
                "value": 43
            },
            {
                "desc": "GetModifierLifestealRegenAmplify_Percentage(设置生命回复奖励百分比？)",
                "name": "MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
                "value": 44
            },
            {
                "desc": "GetModifierMPRegenAmplify_Percentage(设置施法MP增强比例)",
                "name": "MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
                "value": 45
            },
            {
                "desc": "GetModifierMPRestoreAmplify_Percentage(设置施法MP消耗加大比例)",
                "name": "MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
                "value": 46
            },
            {
                "desc": "GetModifierBaseDamageOutgoing_Percentage(设置基础伤害百分比)",
                "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
                "value": 47
            },
            {
                "desc": "GetModifierBaseDamageOutgoing_PercentageUnique(设置基础伤害百分比_不叠加)",
                "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
                "value": 48
            },
            {
                "desc": "GetModifierIncomingDamage_Percentage(设置受到伤害的百分比)",
                "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
                "value": 49
            },
            {
                "desc": "GetModifierIncomingPhysicalDamage_Percentage(设置受到的物理伤害百分比)",
                "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
                "value": 50
            },
            {
                "desc": "GetModifierIncomingPhysicalDamageConstant(设置所受物理伤害数值)",
                "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
                "value": 51
            },
            {
                "desc": "GetModifierIncomingSpellDamageConstant(修正属性传入法术伤害常量)",
                "name": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
                "value": 52
            },
            {
                "desc": "GetModifierEvasion_Constant(设置闪避值)",
                "name": "MODIFIER_PROPERTY_EVASION_CONSTANT",
                "value": 53
            },
            {
                "desc": "GetModifierNegativeEvasion_Constant(设置闪避降低值)",
                "name": "MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
                "value": 54
            },
            {
                "desc": "GetModifierStatusResistance(设置状态抗性)",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE",
                "value": 55
            },
            {
                "desc": "GetModifierStatusResistanceStacking(设置状态抗性2？)",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
                "value": 56
            },
            {
                "desc": "GetModifierStatusResistanceCaster(设置状态抗性3？)",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
                "value": 57
            },
            {
                "desc": "GetModifierAvoidDamage(是否免疫伤害)",
                "name": "MODIFIER_PROPERTY_AVOID_DAMAGE",
                "value": 58
            },
            {
                "desc": "GetModifierAvoidSpell(是否免疫技能伤害)",
                "name": "MODIFIER_PROPERTY_AVOID_SPELL",
                "value": 59
            },
            {
                "desc": "GetModifierMiss_Percentage(设置MISS率)",
                "name": "MODIFIER_PROPERTY_MISS_PERCENTAGE",
                "value": 60
            },
            {
                "desc": "GetModifierPhysicalArmorBase_Percentage(设置护甲基础百分比)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
                "value": 61
            },
            {
                "desc": "GetModifierPhysicalArmorTotal_Percentage(设置护甲总百分比)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
                "value": 62
            },
            {
                "desc": "GetModifierPhysicalArmorBonus(设置护甲)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
                "value": 63
            },
            {
                "desc": "GetModifierPhysicalArmorBonusUnique(设置护甲增加值_不叠加)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
                "value": 64
            },
            {
                "desc": "GetModifierPhysicalArmorBonusUniqueActive(设置减伤_圆盾)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
                "value": 65
            },
            {
                "desc": "GetModifierIgnorePhysicalArmor(是否忽略护甲)",
                "name": "MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
                "value": 66
            },
            {
                "desc": "GetModifierMagicalResistanceBaseReduction(设置基础魔抗降低值)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
                "value": 67
            },
            {
                "desc": "GetModifierMagicalResistanceDirectModification(设置魔抗_覆盖？)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
                "value": 68
            },
            {
                "desc": "GetModifierMagicalResistanceBonus(魔法抗性，对神圣伤害无效，可以累加)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
                "value": 69
            },
            {
                "desc": "GetModifierMagicalResistanceBonusIllusions(设置幻象魔抗奖励)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
                "value": 70
            },
            {
                "desc": "GetModifierMagicalResistanceDecrepifyUnique(骨法的衰老_影响魔法抗性_不可累加)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
                "value": 71
            },
            {
                "desc": "GetModifierBaseRegen(设置MP基础回复)",
                "name": "MODIFIER_PROPERTY_BASE_MANA_REGEN",
                "value": 72
            },
            {
                "desc": "GetModifierConstantManaRegen(设置基础魔法回复)",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
                "value": 73
            },
            {
                "desc": "GetModifierConstantManaRegenUnique(设置基础魔法回复_不叠加)",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
                "value": 74
            },
            {
                "desc": "GetModifierTotalPercentageManaRegen(设置魔法回复百分比)",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
                "value": 75
            },
            {
                "desc": "GetModifierConstantHealthRegen(设置生命回复值)",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
                "value": 76
            },
            {
                "desc": "GetModifierHealthRegenPercentage(设置生命回复值百分比)",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
                "value": 77
            },
            {
                "desc": "GetModifierHealthRegenPercentageUnique(设置生命回复百分比奖励_不叠加)",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
                "value": 78
            },
            {
                "desc": "GetModifierHealthBonus(设置生命值奖励)",
                "name": "MODIFIER_PROPERTY_HEALTH_BONUS",
                "value": 79
            },
            {
                "desc": "GetModifierManaBonus(设置魔法值奖励)",
                "name": "MODIFIER_PROPERTY_MANA_BONUS",
                "value": 80
            },
            {
                "desc": "GetModifierExtraStrengthBonus(设置额外力量_无效)",
                "name": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
                "value": 81
            },
            {
                "desc": "GetModifierExtraHealthBonus(设置额外生命值)",
                "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
                "value": 82
            },
            {
                "desc": "GetModifierExtraManaBonus(设置额外魔法值_无效)",
                "name": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
                "value": 83
            },
            {
                "desc": "GetModifierExtraHealthPercentage(设置额外生命值百分比)",
                "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
                "value": 84
            },
            {
                "desc": "GetModifierExtraManaPercentage(设置额外魔法值百分比_无效)",
                "name": "MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
                "value": 85
            },
            {
                "desc": "GetModifierBonusStats_Strength(设置力量)",
                "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
                "value": 86
            },
            {
                "desc": "GetModifierBonusStats_Agility(设置敏捷)",
                "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
                "value": 87
            },
            {
                "desc": "GetModifierBonusStats_Intellect(设置智力)",
                "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
                "value": 88
            },
            {
                "desc": "GetModifierBonusStats_Strength_Percentage(设置力量百分比)",
                "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
                "value": 89
            },
            {
                "desc": "GetModifierBonusStats_Agility_Percentage(设置敏捷百分比)",
                "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
                "value": 90
            },
            {
                "desc": "GetModifierBonusStats_Intellect_Percentage(设置智力百分比)",
                "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
                "value": 91
            },
            {
                "desc": "GetModifierCastRangeBonus(设置施法距离奖励)",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS",
                "value": 92
            },
            {
                "desc": "GetModifierCastRangeBonusTarget(设置施法距离奖励目标？)",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
                "value": 93
            },
            {
                "desc": "GetModifierCastRangeBonusStacking(设置施法距离奖励_可叠加)",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
                "value": 94
            },
            {
                "desc": "GetModifierAttackRangeOverride(设置攻击范围)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
                "value": 95
            },
            {
                "desc": "GetModifierAttackRangeBonus(设置攻击范围奖励)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
                "value": 96
            },
            {
                "desc": "GetModifierAttackRangeBonusUnique(设置攻击范围奖励_不叠加)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
                "value": 97
            },
            {
                "desc": "GetModifierAttackRangeBonusPercentage(设置攻击范围加成百分比)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
                "value": 98
            },
            {
                "desc": "GetModifierMaxAttackRange(设置最大攻击距离奖励)",
                "name": "MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
                "value": 99
            },
            {
                "desc": "GetModifierProjectileSpeedBonus(设置投射物速率加成)",
                "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
                "value": 100
            },
            {
                "desc": "GetModifierProjectileSpeedBonusPercentage(设置投射物速率百分比加成)",
                "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
                "value": 101
            },
            {
                "desc": "GetModifierProjectileName(设置投射物名)",
                "name": "MODIFIER_PROPERTY_PROJECTILE_NAME",
                "value": 102
            },
            {
                "desc": "ReincarnateTime(设置再生时间)",
                "name": "MODIFIER_PROPERTY_REINCARNATION",
                "value": 103
            },
            {
                "desc": "GetModifierConstantRespawnTime(设置复活时间)",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME",
                "value": 104
            },
            {
                "desc": "GetModifierPercentageRespawnTime(设置复活时间百分比)",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
                "value": 105
            },
            {
                "desc": "GetModifierStackingRespawnTime(设置累积复活时间)",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
                "value": 106
            },
            {
                "desc": "GetModifierPercentageCooldown(设置冷却时间百分比)",
                "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
                "value": 107
            },
            {
                "desc": "GetModifierPercentageCooldownOngoing(设置正在施法的技能冷却百分比？)",
                "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
                "value": 108
            },
            {
                "desc": "GetModifierPercentageCasttime(设置施法时间百分比)",
                "name": "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
                "value": 109
            },
            {
                "desc": "GetModifierPercentageManacost(设置父技能的魔法消耗百分比增幅值)",
                "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
                "value": 110
            },
            {
                "desc": "GetModifierPercentageManacostStacking(设置父技能的魔法消耗百分比增幅值_叠加)",
                "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
                "value": 111
            },
            {
                "desc": "GetModifierConstantDeathGoldCost(设置死亡损失的金钱)",
                "name": "MODIFIER_PROPERTY_DEATHGOLDCOST",
                "value": 112
            },
            {
                "desc": "GetModifierPercentageExpRateBoost(设置经验百分比)",
                "name": "MODIFIER_PROPERTY_EXP_RATE_BOOST",
                "value": 113
            },
            {
                "desc": "GetModifierPreAttack_CriticalStrike(设置致命一击)",
                "name": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
                "value": 114
            },
            {
                "desc": "GetModifierPreAttack_Target_CriticalStrike(是否受攻击时总是被致命一击)",
                "name": "MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
                "value": 115
            },
            {
                "desc": "GetModifierMagical_ConstantBlock(设置魔法常数)",
                "name": "MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
                "value": 116
            },
            {
                "desc": "GetModifierPhysical_ConstantBlock(设置减免伤害)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
                "value": 117
            },
            {
                "desc": "GetModifierPhysical_ConstantBlockSpecial(物伤数值阻挡（特殊的）)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
                "value": 118
            },
            {
                "desc": "GetModifierPhysical_ConstantBlockUnavoidablePreArmor(设置来至自动攻击的伤害减少值)",
                "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
                "value": 119
            },
            {
                "desc": "GetModifierTotal_ConstantBlock(设置伤害减少值)",
                "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
                "value": 120
            },
            {
                "desc": "GetOverrideAnimation(是否强制播放模型动作 覆盖动作)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
                "value": 121
            },
            {
                "desc": "GetOverrideAnimationWeight(是否强制播放模型动作2)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
                "value": 122
            },
            {
                "desc": "GetOverrideAnimationRate(设置播放模型动作速度)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
                "value": 123
            },
            {
                "desc": "GetAbsorbSpell(属性吸收法术)",
                "name": "MODIFIER_PROPERTY_ABSORB_SPELL",
                "value": 124
            },
            {
                "desc": "GetReflectSpell(是否反弹技能？)",
                "name": "MODIFIER_PROPERTY_REFLECT_SPELL",
                "value": 125
            },
            {
                "desc": "GetDisableAutoAttack(是否禁止自动攻击)",
                "name": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
                "value": 126
            },
            {
                "desc": "GetBonusDayVision(设置白天视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_DAY_VISION",
                "value": 127
            },
            {
                "desc": "GetBonusNightVision(设置夜晚视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
                "value": 128
            },
            {
                "desc": "GetBonusNightVisionUnique(设置额外夜晚视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
                "value": 129
            },
            {
                "desc": "GetBonusVisionPercentage(设置百分比视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
                "value": 130
            },
            {
                "desc": "GetFixedDayVision(设置固定白天视野)",
                "name": "MODIFIER_PROPERTY_FIXED_DAY_VISION",
                "value": 131
            },
            {
                "desc": "GetFixedNightVision(设置固定夜晚视野)",
                "name": "MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
                "value": 132
            },
            {
                "desc": "GetMinHealth(设置生命最小值)",
                "name": "MODIFIER_PROPERTY_MIN_HEALTH",
                "value": 133
            },
            {
                "desc": "GetAbsoluteNoDamagePhysical(是否物理攻击无效)",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
                "value": 134
            },
            {
                "desc": "GetAbsoluteNoDamageMagical(是否魔法攻击无效)",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
                "value": 135
            },
            {
                "desc": "GetAbsoluteNoDamagePure(是否混乱攻击无效)",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
                "value": 136
            },
            {
                "desc": "GetIsIllusion(设置为幻象)",
                "name": "MODIFIER_PROPERTY_IS_ILLUSION",
                "value": 137
            },
            {
                "desc": "GetModifierIllusionLabel(是否为幻象_标签？)",
                "name": "MODIFIER_PROPERTY_ILLUSION_LABEL",
                "value": 138
            },
            {
                "desc": "GetModifierStrongIllusion(是否为强大的幻象)",
                "name": "MODIFIER_PROPERTY_STRONG_ILLUSION",
                "value": 139
            },
            {
                "desc": "GetModifierSuperIllusion(是否为超级幻象)",
                "name": "MODIFIER_PROPERTY_SUPER_ILLUSION",
                "value": 140
            },
            {
                "desc": "GetModifierSuperIllusionWithUltimate(是否为终极幻象_VS大招)",
                "name": "MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
                "value": 141
            },
            {
                "desc": "GetModifierTurnRate_Percentage(设置转身速度百分比)",
                "name": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
                "value": 142
            },
            {
                "desc": "GetModifierTurnRate_Override(设置转向速度_覆盖)",
                "name": "MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
                "value": 143
            },
            {
                "desc": "GetDisableHealing(是否禁止生命回复)",
                "name": "MODIFIER_PROPERTY_DISABLE_HEALING",
                "value": 144
            },
            {
                "desc": "GetAlwaysAllowAttack(是否总能攻击)",
                "name": "MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
                "value": 145
            },
            {
                "desc": "GetAllowEtherealAttack(是否允许空灵攻击？)",
                "name": "MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
                "value": 146
            },
            {
                "desc": "GetOverrideAttackMagical(设置魔法攻击)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
                "value": 147
            },
            {
                "desc": "GetModifierUnitStatsNeedsRefresh(设置单位统计需要刷新)",
                "name": "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
                "value": 148
            },
            {
                "desc": "Unused(设置野怪赏金比例)",
                "name": "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
                "value": 149
            },
            {
                "desc": "Unused(设置其它赏金比例)",
                "name": "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
                "value": 150
            },
            {
                "desc": "GetModifierUnitDisllowUpgrading(设置单位是否禁止升级)",
                "name": "MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
                "value": 151
            },
            {
                "desc": "GetModifierDodgeProjectile(是否闪避投射物)",
                "name": "MODIFIER_PROPERTY_DODGE_PROJECTILE",
                "value": 152
            },
            {
                "desc": "GetTriggerCosmeticAndEndAttack(获得变身触发器和结束攻击？)",
                "name": "MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
                "value": 153
            },
            {
                "desc": "OnSpellTargetReady(当技能选定目标时)",
                "name": "MODIFIER_EVENT_ON_SPELL_TARGET_READY",
                "value": 154
            },
            {
                "desc": "OnAttackRecord(有记录的攻击时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_RECORD",
                "value": 155
            },
            {
                "desc": "OnAttackStart(攻击开始时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_START",
                "value": 156
            },
            {
                "desc": "OnAttack(攻击时 攻击完成-忽略是否击中时)",
                "name": "MODIFIER_EVENT_ON_ATTACK",
                "value": 157
            },
            {
                "desc": "OnAttackLanded(攻击命中时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_LANDED",
                "value": 158
            },
            {
                "desc": "OnAttackFail(攻击失败时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_FAIL",
                "value": 159
            },
            {
                "desc": "OnAttackAllied(攻击队友时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_ALLIED",
                "value": 160
            },
            {
                "desc": "OnProjectileDodge(投射物闪避)",
                "name": "MODIFIER_EVENT_ON_PROJECTILE_DODGE",
                "value": 161
            },
            {
                "desc": "OnOrder(发布命令时)",
                "name": "MODIFIER_EVENT_ON_ORDER",
                "value": 162
            },
            {
                "desc": "OnUnitMoved(移动时)",
                "name": "MODIFIER_EVENT_ON_UNIT_MOVED",
                "value": 163
            },
            {
                "desc": "OnAbilityStart(施法开始时)",
                "name": "MODIFIER_EVENT_ON_ABILITY_START",
                "value": 164
            },
            {
                "desc": "OnAbilityExecuted(施法完成时 释放技能时 施法前摇结束时)",
                "name": "MODIFIER_EVENT_ON_ABILITY_EXECUTED",
                "value": 165
            },
            {
                "desc": "OnAbilityFullyCast(施法完全激活/触发时 等待确认)",
                "name": "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
                "value": 166
            },
            {
                "desc": "OnBreakInvisibility(隐身解除时)",
                "name": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
                "value": 167
            },
            {
                "desc": "OnAbilityEndChannel(停止施法时)",
                "name": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
                "value": 168
            },
            {
                "desc": "Unused(进程升级时的修改器事件)",
                "name": "MODIFIER_EVENT_ON_PROCESS_UPGRADE",
                "value": 169
            },
            {
                "desc": "Unused(刷新时的修改器事件)",
                "name": "MODIFIER_EVENT_ON_REFRESH",
                "value": 170
            },
            {
                "desc": "OnTakeDamage(受到伤害时)",
                "name": "MODIFIER_EVENT_ON_TAKEDAMAGE",
                "value": 171
            },
            {
                "desc": "OnDamagePrevented(完成最后一击时)",
                "name": "MODIFIER_EVENT_ON_DEATH_PREVENTED",
                "value": 172
            },
            {
                "desc": "OnStateChanged(状态改变时)",
                "name": "MODIFIER_EVENT_ON_STATE_CHANGED",
                "value": 173
            },
            {
                "desc": "Unused(球体效果修正事件)",
                "name": "MODIFIER_EVENT_ON_ORB_EFFECT",
                "value": 174
            },
            {
                "desc": "OnProcessCleave(跳劈过程？)",
                "name": "MODIFIER_EVENT_ON_PROCESS_CLEAVE",
                "value": 175
            },
            {
                "desc": "OnDamageCalculated(伤害结算时)",
                "name": "MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
                "value": 176
            },
            {
                "desc": "OnAttacked(被攻击时)",
                "name": "MODIFIER_EVENT_ON_ATTACKED",
                "value": 177
            },
            {
                "desc": "OnDeath(死亡时)",
                "name": "MODIFIER_EVENT_ON_DEATH",
                "value": 178
            },
            {
                "desc": "OnRespawn(重生时)",
                "name": "MODIFIER_EVENT_ON_RESPAWN",
                "value": 179
            },
            {
                "desc": "OnSpentMana(消耗MP时)",
                "name": "MODIFIER_EVENT_ON_SPENT_MANA",
                "value": 180
            },
            {
                "desc": "OnTeleporting(传送中周期触发)",
                "name": "MODIFIER_EVENT_ON_TELEPORTING",
                "value": 181
            },
            {
                "desc": "OnTeleported(传送完成时)",
                "name": "MODIFIER_EVENT_ON_TELEPORTED",
                "value": 182
            },
            {
                "desc": "OnSetLocation(瞬移时)",
                "name": "MODIFIER_EVENT_ON_SET_LOCATION",
                "value": 183
            },
            {
                "desc": "OnHealthGained(获得生命值时 满血不触发_回血时)",
                "name": "MODIFIER_EVENT_ON_HEALTH_GAINED",
                "value": 184
            },
            {
                "desc": "OnManaGained(获得MP时 满蓝不触发_回蓝时)",
                "name": "MODIFIER_EVENT_ON_MANA_GAINED",
                "value": 185
            },
            {
                "desc": "OnTakeDamageKillCredit(完成最后一击时)",
                "name": "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
                "value": 186
            },
            {
                "desc": "OnHeroKilled(击杀单位 被英雄杀死)",
                "name": "MODIFIER_EVENT_ON_HERO_KILLED",
                "value": 187
            },
            {
                "desc": "OnHealReceived(获得治疗时 满血触发_回血时)",
                "name": "MODIFIER_EVENT_ON_HEAL_RECEIVED",
                "value": 188
            },
            {
                "desc": "OnBuildingKilled(建筑被伤害到着火时)",
                "name": "MODIFIER_EVENT_ON_BUILDING_KILLED",
                "value": 189
            },
            {
                "desc": "OnModelChanged(模型变化时)",
                "name": "MODIFIER_EVENT_ON_MODEL_CHANGED",
                "value": 190
            },
            {
                "desc": "OnModifierAdded(获得buff时)",
                "name": "MODIFIER_EVENT_ON_MODIFIER_ADDED",
                "value": 191
            },
            {
                "desc": "OnTooltip(修改器属性工具提示)",
                "name": "MODIFIER_PROPERTY_TOOLTIP",
                "value": 192
            },
            {
                "desc": "GetModifierModelChange(设置模型)",
                "name": "MODIFIER_PROPERTY_MODEL_CHANGE",
                "value": 193
            },
            {
                "desc": "GetModifierModelScale(设置模型大小_无效 等待确认)",
                "name": "MODIFIER_PROPERTY_MODEL_SCALE",
                "value": 194
            },
            {
                "desc": "GetModifierScepter(是否携带蓝杖？)",
                "name": "MODIFIER_PROPERTY_IS_SCEPTER",
                "value": 195
            },
            {
                "desc": "GetModifierRadarCooldownReduction(设置雷达冷却减少时间)",
                "name": "MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
                "value": 196
            },
            {
                "desc": "GetActivityTranslationModifiers(设置动作修改？)",
                "name": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
                "value": 197
            },
            {
                "desc": "GetAttackSound(设置攻击音效)",
                "name": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
                "value": 198
            },
            {
                "desc": "GetUnitLifetimeFraction(设置单位存在剩余时间)",
                "name": "MODIFIER_PROPERTY_LIFETIME_FRACTION",
                "value": 199
            },
            {
                "desc": "GetModifierProvidesFOWVision(设置投射物提供视野)",
                "name": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
                "value": 200
            },
            {
                "desc": "GetModifierSpellsRequireHP(设置技能需要的生命)",
                "name": "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
                "value": 201
            },
            {
                "desc": "GetForceDrawOnMinimap(是否绘制小地图路径？)",
                "name": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
                "value": 202
            },
            {
                "desc": "GetModifierDisableTurning(是否禁止转身_无效 等待确认)",
                "name": "MODIFIER_PROPERTY_DISABLE_TURNING",
                "value": 203
            },
            {
                "desc": "GetModifierIgnoreCastAngle(是否忽略投射角度)",
                "name": "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
                "value": 204
            },
            {
                "desc": "GetModifierChangeAbilityValue(改变技能数值)",
                "name": "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
                "value": 205
            },
            {
                "desc": "GetModifierAbilityLayout(设置技能布局)",
                "name": "MODIFIER_PROPERTY_ABILITY_LAYOUT",
                "value": 206
            },
            {
                "desc": "OnDominated(被支配时)",
                "name": "MODIFIER_EVENT_ON_DOMINATED",
                "value": 207
            },
            {
                "desc": "GetModifierTempestDouble(是否多倍吹风？)",
                "name": "MODIFIER_PROPERTY_TEMPEST_DOUBLE",
                "value": 208
            },
            {
                "desc": "PreserveParticlesOnModelChanged(是否模型更改时保留特效)",
                "name": "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
                "value": 209
            },
            {
                "desc": "OnAttackFinished(攻击完成时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_FINISHED",
                "value": 210
            },
            {
                "desc": "GetModifierIgnoreCooldown(是否忽略冷却)",
                "name": "MODIFIER_PROPERTY_IGNORE_COOLDOWN",
                "value": 211
            },
            {
                "desc": "GetModifierCanAttackTrees(是否允许攻击树木)",
                "name": "MODIFIER_PROPERTY_CAN_ATTACK_TREES",
                "value": 212
            },
            {
                "desc": "GetVisualZDelta(设置可视化Z差量)",
                "name": "MODIFIER_PROPERTY_VISUAL_Z_DELTA",
                "value": 213
            },
            {
                "desc": "修正属性传入伤害幻觉",
                "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
                "value": 214
            },
            {
                "desc": "GetModifierNoVisionOfAttacker(是否看不到攻击者)",
                "name": "MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
                "value": 215
            },
            {
                "desc": "OnTooltip2(修改器属性工具提示2)",
                "name": "MODIFIER_PROPERTY_TOOLTIP2",
                "value": 216
            },
            {
                "desc": "OnAttackRecordDestroy(有记录的攻击消失时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
                "value": 217
            },
            {
                "desc": "OnProjectileObstructionHit(投射物击中时)",
                "name": "MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
                "value": 218
            },
            {
                "desc": "GetSuppressTeleport(是否禁止传送)",
                "name": "MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
                "value": 219
            },
            {
                "desc": "OnAttackCancelled(攻击取消时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_CANCELLED",
                "value": 220
            },
            {
                "desc": "GetSuppressCleave(是否不再跳批？)",
                "name": "MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
                "value": 221
            },
            {
                "desc": "BotAttackScoreBonus(设置机器人攻击得分加成)",
                "name": "MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
                "value": 222
            },
            {
                "desc": "修饰符函数LAST",
                "name": "MODIFIER_FUNCTION_LAST",
                "value": 223
            },
            {
                "desc": "修饰符函数无效",
                "name": "MODIFIER_FUNCTION_INVALID",
                "value": 255
            }
        ],
        "modifierremove": [
            {
                "desc": "DOTA BUFF全部删除",
                "name": "DOTA_BUFF_REMOVE_ALL",
                "value": 0
            },
            {
                "desc": "DOTA BUFF移除敌人",
                "name": "DOTA_BUFF_REMOVE_ENEMY",
                "value": 1
            },
            {
                "desc": "DOTA BUFF移除盟友",
                "name": "DOTA_BUFF_REMOVE_ALLY",
                "value": 2
            }
        ],
        "DOTA_MOTION_CONTROLLER_PRIORITY": [
            {
                "desc": "DOTA运动控制器优先级最低",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
                "value": 0
            },
            {
                "desc": "DOTA运动控制器优先级低",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
                "value": 1
            },
            {
                "desc": "DOTA运动控制器优先级介质",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
                "value": 2
            },
            {
                "desc": "DOTA运动控制器优先级高",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
                "value": 3
            },
            {
                "desc": "DOTA运动控制器优先级最高",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
                "value": 4
            }
        ],
        "modifierpriority": [
            {
                "desc": "修改器优先级低",
                "name": "MODIFIER_PRIORITY_LOW",
                "value": 0
            },
            {
                "desc": "修改器优先级正常",
                "name": "MODIFIER_PRIORITY_NORMAL",
                "value": 1
            },
            {
                "desc": "修改器优先级高",
                "name": "MODIFIER_PRIORITY_HIGH",
                "value": 2
            },
            {
                "desc": "修改器优先级超",
                "name": "MODIFIER_PRIORITY_ULTRA",
                "value": 3
            },
            {
                "desc": "超优先级修改器",
                "name": "MODIFIER_PRIORITY_SUPER_ULTRA",
                "value": 4
            }
        ],
        "DOTASpeechType_t": [
            {
                "desc": "DOTA语音用户无效",
                "name": "DOTA_SPEECH_USER_INVALID",
                "value": 0
            },
            {
                "desc": "DOTA语音用户单一",
                "name": "DOTA_SPEECH_USER_SINGLE",
                "value": 1
            },
            {
                "desc": "DOTA语音用户团队",
                "name": "DOTA_SPEECH_USER_TEAM",
                "value": 2
            },
            {
                "desc": "附近的DOTA语音用户团队",
                "name": "DOTA_SPEECH_USER_TEAM_NEARBY",
                "value": 3
            },
            {
                "desc": "附近的DOTA语音用户",
                "name": "DOTA_SPEECH_USER_NEARBY",
                "value": 4
            },
            {
                "desc": "DOTA语音用户全部",
                "name": "DOTA_SPEECH_USER_ALL",
                "value": 5
            },
            {
                "desc": "DOTA演讲优秀团队",
                "name": "DOTA_SPEECH_GOOD_TEAM",
                "value": 6
            },
            {
                "desc": "DOTA演讲糟糕的团队",
                "name": "DOTA_SPEECH_BAD_TEAM",
                "value": 7
            },
            {
                "desc": "DOTA演讲观众",
                "name": "DOTA_SPEECH_SPECTATOR",
                "value": 8
            },
            {
                "desc": "DOTA语音收件人类型最大值",
                "name": "DOTA_SPEECH_RECIPIENT_TYPE_MAX",
                "value": 9
            }
        ],
        "DOTA_UNIT_TARGET_TYPE": [
            {
                "desc": "目标类型要求： 无",
                "name": "DOTA_UNIT_TARGET_NONE",
                "value": 0
            },
            {
                "desc": "目标类型要求： 英雄",
                "name": "DOTA_UNIT_TARGET_HERO",
                "value": 1
            },
            {
                "desc": "目标类型要求： 野怪",
                "name": "DOTA_UNIT_TARGET_CREEP",
                "value": 2
            },
            {
                "desc": "目标类型要求： 建筑",
                "name": "DOTA_UNIT_TARGET_BUILDING",
                "value": 4
            },
            {
                "desc": "目标类型要求： 信使",
                "name": "DOTA_UNIT_TARGET_COURIER",
                "value": 16
            },
            {
                "desc": "目标类型要求： 基础",
                "name": "DOTA_UNIT_TARGET_BASIC",
                "value": 18
            },
            {
                "desc": "目标类型要求： 其他",
                "name": "DOTA_UNIT_TARGET_OTHER",
                "value": 32
            },
            {
                "desc": "目标类型要求： 全部",
                "name": "DOTA_UNIT_TARGET_ALL",
                "value": 55
            },
            {
                "desc": "目标类型要求： 树",
                "name": "DOTA_UNIT_TARGET_TREE",
                "value": 64
            },
            {
                "desc": "目标类型要求： 自定义",
                "name": "DOTA_UNIT_TARGET_CUSTOM",
                "value": 128
            }
        ],
        "DOTAAbilitySpeakTrigger_t": [
            {
                "desc": "",
                "name": "DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_SPEAK_CAST",
                "value": 1
            }
        ],
        "modifierstate": [
            {
                "desc": "缠绕",
                "name": "MODIFIER_STATE_ROOTED",
                "value": 0
            },
            {
                "desc": "缴械",
                "name": "MODIFIER_STATE_DISARMED",
                "value": 1
            },
            {
                "desc": "攻击免疫",
                "name": "MODIFIER_STATE_ATTACK_IMMUNE",
                "value": 2
            },
            {
                "desc": "沉默",
                "name": "MODIFIER_STATE_SILENCED",
                "value": 3
            },
            {
                "desc": "禁用物品",
                "name": "MODIFIER_STATE_MUTED",
                "value": 4
            },
            {
                "desc": "眩晕",
                "name": "MODIFIER_STATE_STUNNED",
                "value": 5
            },
            {
                "desc": "妖术",
                "name": "MODIFIER_STATE_HEXED",
                "value": 6
            },
            {
                "desc": "隐身",
                "name": "MODIFIER_STATE_INVISIBLE",
                "value": 7
            },
            {
                "desc": "无敌",
                "name": "MODIFIER_STATE_INVULNERABLE",
                "value": 8
            },
            {
                "desc": "魔免",
                "name": "MODIFIER_STATE_MAGIC_IMMUNE",
                "value": 9
            },
            {
                "desc": "提供视野",
                "name": "MODIFIER_STATE_PROVIDES_VISION",
                "value": 10
            },
            {
                "desc": "催眠",
                "name": "MODIFIER_STATE_NIGHTMARED",
                "value": 11
            },
            {
                "desc": "禁用伤害减免",
                "name": "MODIFIER_STATE_BLOCK_DISABLED",
                "value": 12
            },
            {
                "desc": "无法躲避",
                "name": "MODIFIER_STATE_EVADE_DISABLED",
                "value": 13
            },
            {
                "desc": "无法点选",
                "name": "MODIFIER_STATE_UNSELECTABLE",
                "value": 14
            },
            {
                "desc": "无法以敌人为目标",
                "name": "MODIFIER_STATE_CANNOT_TARGET_ENEMIES",
                "value": 15
            },
            {
                "desc": "无法闪避",
                "name": "MODIFIER_STATE_CANNOT_MISS",
                "value": 16
            },
            {
                "desc": "可被友军攻击",
                "name": "MODIFIER_STATE_SPECIALLY_DENIABLE",
                "value": 17
            },
            {
                "desc": "冰冻",
                "name": "MODIFIER_STATE_FROZEN",
                "value": 18
            },
            {
                "desc": "无法执行命令",
                "name": "MODIFIER_STATE_COMMAND_RESTRICTED",
                "value": 19
            },
            {
                "desc": "无小地图",
                "name": "MODIFIER_STATE_NOT_ON_MINIMAP",
                "value": 20
            },
            {
                "desc": "低攻击优先级",
                "name": "MODIFIER_STATE_LOW_ATTACK_PRIORITY",
                "value": 21
            },
            {
                "desc": "无生命条",
                "name": "MODIFIER_STATE_NO_HEALTH_BAR",
                "value": 22
            },
            {
                "desc": "飞行",
                "name": "MODIFIER_STATE_FLYING",
                "value": 23
            },
            {
                "desc": "无碰撞",
                "name": "MODIFIER_STATE_NO_UNIT_COLLISION",
                "value": 24
            },
            {
                "desc": "无法被编队",
                "name": "MODIFIER_STATE_NO_TEAM_MOVE_TO",
                "value": 25
            },
            {
                "desc": "无法选择编队",
                "name": "MODIFIER_STATE_NO_TEAM_SELECT",
                "value": 26
            },
            {
                "desc": "禁用被动",
                "name": "MODIFIER_STATE_PASSIVES_DISABLED",
                "value": 27
            },
            {
                "desc": "支配",
                "name": "MODIFIER_STATE_DOMINATED",
                "value": 28
            },
            {
                "desc": "致盲",
                "name": "MODIFIER_STATE_BLIND",
                "value": 29
            },
            {
                "desc": "OUT出世界 用以加特征 让一些技能可以区分目标",
                "name": "MODIFIER_STATE_OUT_OF_GAME",
                "value": 30
            },
            {
                "desc": "假装为敌人友方",
                "name": "MODIFIER_STATE_FAKE_ALLY",
                "value": 31
            },
            {
                "desc": "拥有飞行碰撞",
                "name": "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
                "value": 32
            },
            {
                "desc": "免疫真视",
                "name": "MODIFIER_STATE_TRUESIGHT_IMMUNE",
                "value": 33
            },
            {
                "desc": "让单位变成无目标 无法被范围选取函数作用",
                "name": "MODIFIER_STATE_UNTARGETABLE",
                "value": 34
            },
            {
                "desc": "无视移动和攻击命令",
                "name": "MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS",
                "value": 35
            },
            {
                "desc": "可以穿树",
                "name": "MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES",
                "value": 36
            },
            {
                "desc": "对敌方无小地图",
                "name": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
                "value": 37
            },
            {
                "desc": "修改器状态不可流动",
                "name": "MODIFIER_STATE_UNSLOWABLE",
                "value": 38
            },
            {
                "desc": "魔法锁链",
                "name": "MODIFIER_STATE_TETHERED",
                "value": 39
            },
            {
                "desc": "无视停止命令",
                "name": "MODIFIER_STATE_IGNORING_STOP_ORDERS",
                "value": 40
            },
            {
                "desc": "恐惧",
                "name": "MODIFIER_STATE_FEARED",
                "value": 41
            },
            {
                "desc": "嘲讽",
                "name": "MODIFIER_STATE_TAUNTED",
                "value": 42
            },
            {
                "desc": "最后修改状态",
                "name": "MODIFIER_STATE_LAST",
                "value": 43
            }
        ],
        "DOTA_RUNES": [
            {
                "desc": "无效符文",
                "name": "DOTA_RUNE_INVALID",
                "value": -1
            },
            {
                "desc": "双重伤害符文",
                "name": "DOTA_RUNE_DOUBLEDAMAGE",
                "value": 0
            },
            {
                "desc": "急速符文",
                "name": "DOTA_RUNE_HASTE",
                "value": 1
            },
            {
                "desc": "幻像符文",
                "name": "DOTA_RUNE_ILLUSION",
                "value": 2
            },
            {
                "desc": "隐身符文",
                "name": "DOTA_RUNE_INVISIBILITY",
                "value": 3
            },
            {
                "desc": "再生符文 ",
                "name": "DOTA_RUNE_REGENERATION",
                "value": 4
            },
            {
                "desc": "赏金符文",
                "name": "DOTA_RUNE_BOUNTY",
                "value": 5
            },
            {
                "desc": "奥术符文",
                "name": "DOTA_RUNE_ARCANE",
                "value": 6
            },
            {
                "desc": "经验符文",
                "name": "DOTA_RUNE_XP",
                "value": 7
            },
            {
                "desc": "符文计数",
                "name": "DOTA_RUNE_COUNT",
                "value": 8
            }
        ],
        "DOTA_SHOP_TYPE": [
            {
                "desc": "商店类型: 温泉",
                "name": "DOTA_SHOP_HOME",
                "value": 0
            },
            {
                "desc": "商店类型: 野店",
                "name": "DOTA_SHOP_SIDE",
                "value": 1
            },
            {
                "desc": "商店类型: 神秘商店",
                "name": "DOTA_SHOP_SECRET",
                "value": 2
            },
            {
                "desc": "商店类型: ",
                "name": "DOTA_SHOP_GROUND",
                "value": 3
            },
            {
                "desc": "商店类型: 野店2",
                "name": "DOTA_SHOP_SIDE2",
                "value": 4
            },
            {
                "desc": "商店类型: 神秘商店2",
                "name": "DOTA_SHOP_SECRET2",
                "value": 5
            },
            {
                "desc": "商店类型: 自定义商店",
                "name": "DOTA_SHOP_CUSTOM",
                "value": 6
            },
            {
                "desc": "商店类型: 中立商店？",
                "name": "DOTA_SHOP_NEUTRALS",
                "value": 7
            },
            {
                "desc": "商店类型: 无",
                "name": "DOTA_SHOP_NONE",
                "value": 8
            }
        ],
        "UnitFilterResult": [
            {
                "desc": "UF成功",
                "name": "UF_SUCCESS",
                "value": 0
            },
            {
                "desc": "UF故障友好型",
                "name": "UF_FAIL_FRIENDLY",
                "value": 1
            },
            {
                "desc": "UF失败敌人",
                "name": "UF_FAIL_ENEMY",
                "value": 2
            },
            {
                "desc": "UF失败英雄",
                "name": "UF_FAIL_HERO",
                "value": 3
            },
            {
                "desc": "UF失败被视为英雄",
                "name": "UF_FAIL_CONSIDERED_HERO",
                "value": 4
            },
            {
                "desc": "超滤失效野怪",
                "name": "UF_FAIL_CREEP",
                "value": 5
            },
            {
                "desc": "UF故障建筑",
                "name": "UF_FAIL_BUILDING",
                "value": 6
            },
            {
                "desc": "UF故障信使",
                "name": "UF_FAIL_COURIER",
                "value": 7
            },
            {
                "desc": "UF故障-其他",
                "name": "UF_FAIL_OTHER",
                "value": 8
            },
            {
                "desc": "UF失败古老",
                "name": "UF_FAIL_ANCIENT",
                "value": 9
            },
            {
                "desc": "UF失败幻觉",
                "name": "UF_FAIL_ILLUSION",
                "value": 10
            },
            {
                "desc": "UF失败召唤",
                "name": "UF_FAIL_SUMMONED",
                "value": 11
            },
            {
                "desc": "UF故障占主导地位",
                "name": "UF_FAIL_DOMINATED",
                "value": 12
            },
            {
                "desc": "超滤失败近战",
                "name": "UF_FAIL_MELEE",
                "value": 13
            },
            {
                "desc": "UF故障范围",
                "name": "UF_FAIL_RANGED",
                "value": 14
            },
            {
                "desc": "UF失效失效",
                "name": "UF_FAIL_DEAD",
                "value": 15
            },
            {
                "desc": "UF失败魔法免疫盟友",
                "name": "UF_FAIL_MAGIC_IMMUNE_ALLY",
                "value": 16
            },
            {
                "desc": "UF失败魔法免疫敌人",
                "name": "UF_FAIL_MAGIC_IMMUNE_ENEMY",
                "value": 17
            },
            {
                "desc": "UF故障无懈可击",
                "name": "UF_FAIL_INVULNERABLE",
                "value": 18
            },
            {
                "desc": "在FOW中UF失败",
                "name": "UF_FAIL_IN_FOW",
                "value": 19
            },
            {
                "desc": "UF故障不可见",
                "name": "UF_FAIL_INVISIBLE",
                "value": 20
            },
            {
                "desc": "UF失败，不受玩家控制",
                "name": "UF_FAIL_NOT_PLAYER_CONTROLLED",
                "value": 21
            },
            {
                "desc": "UF失败攻击免疫",
                "name": "UF_FAIL_ATTACK_IMMUNE",
                "value": 22
            },
            {
                "desc": "UF失败自定义",
                "name": "UF_FAIL_CUSTOM",
                "value": 23
            },
            {
                "desc": "UF FAIL无效位置",
                "name": "UF_FAIL_INVALID_LOCATION",
                "value": 24
            },
            {
                "desc": "UF失败禁用帮助",
                "name": "UF_FAIL_DISABLE_HELP",
                "value": 25
            },
            {
                "desc": "UF失败了",
                "name": "UF_FAIL_OUT_OF_WORLD",
                "value": 26
            },
            {
                "desc": "UF失败噩梦",
                "name": "UF_FAIL_NIGHTMARED",
                "value": 27
            },
            {
                "desc": "UF故障受阻",
                "name": "UF_FAIL_OBSTRUCTED",
                "value": 28
            }
        ],
        "LuaModifierType": [
            {
                "desc": "貌似和修饰器 注册相关 ：无",
                "name": "LUA_MODIFIER_MOTION_NONE",
                "value": 0
            },
            {
                "desc": "貌似和修饰器 注册相关 ：水平运动",
                "name": "LUA_MODIFIER_MOTION_HORIZONTAL",
                "value": 1
            },
            {
                "desc": "貌似和修饰器 注册相关 ：垂直运动",
                "name": "LUA_MODIFIER_MOTION_VERTICAL",
                "value": 2
            },
            {
                "desc": "貌似和修饰器 注册相关 ：垂直与水平运行兼有",
                "name": "LUA_MODIFIER_MOTION_BOTH",
                "value": 3
            },
            {
                "desc": "貌似和修饰器 注册相关 ：无效",
                "name": "LUA_MODIFIER_INVALID",
                "value": 4
            }
        ],
        "DOTA_UNIT_TARGET_FLAGS": [
            {
                "desc": "FLAG 无",
                "name": "DOTA_UNIT_TARGET_FLAG_NONE",
                "value": 0
            },
            {
                "desc": "FLAG 远程",
                "name": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
                "value": 2
            },
            {
                "desc": "FLAG 近战",
                "name": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
                "value": 4
            },
            {
                "desc": "FLAG 死亡(听说已失效)",
                "name": "DOTA_UNIT_TARGET_FLAG_DEAD",
                "value": 8
            },
            {
                "desc": "FLAG 魔免",
                "name": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
                "value": 16
            },
            {
                "desc": "FLAG 非魔免",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
                "value": 32
            },
            {
                "desc": "FLAG 无敌",
                "name": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
                "value": 64
            },
            {
                "desc": "FLAG 可见",
                "name": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
                "value": 128
            },
            {
                "desc": "FLAG 不可见",
                "name": "DOTA_UNIT_TARGET_FLAG_NO_INVIS",
                "value": 256
            },
            {
                "desc": "FLAG 非远古",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
                "value": 512
            },
            {
                "desc": "FLAG 玩家控制的",
                "name": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
                "value": 1024
            },
            {
                "desc": "FLAG 非支配控制",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
                "value": 2048
            },
            {
                "desc": "FLAG 非召唤物",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
                "value": 4096
            },
            {
                "desc": "FLAG 非幻象",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
                "value": 8192
            },
            {
                "desc": "FLAG 非攻击免疫",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
                "value": 16384
            },
            {
                "desc": "FLAG 有蓝条的",
                "name": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
                "value": 32768
            },
            {
                "desc": "FLAG 解释1.检测玩家禁用帮助选项 解释2.检测玩家是否禁止 队友对自己使用技能",
                "name": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
                "value": 65536
            },
            {
                "desc": "FLAG 非地面英雄",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
                "value": 131072
            },
            {
                "desc": "FLAG 被OUT出世界的？ 待纠正",
                "name": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
                "value": 262144
            },
            {
                "desc": "FLAG 非催眠的",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
                "value": 524288
            },
            {
                "desc": "FLAG 敌人优先",
                "name": "DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES",
                "value": 1048576
            },
            {
                "desc": "FLAG 非障碍物",
                "name": "DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS",
                "value": 2097152
            }
        ],
        "DOTA_HeroPickState": [
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_AP_SELECT",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_SD_SELECT",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_RD_SELECT_UNUSED",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_INTRO",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN1",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN2",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN3",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN4",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN5",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN6",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN7",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN8",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN9",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN10",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN11",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN12",
                "value": 18
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT1",
                "value": 19
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT2",
                "value": 20
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT3",
                "value": 21
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT4",
                "value": 22
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT5",
                "value": 23
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT6",
                "value": 24
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT7",
                "value": 25
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT8",
                "value": 26
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT9",
                "value": 27
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT10",
                "value": 28
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_PICK",
                "value": 29
            },
            {
                "desc": "选择一个状态",
                "name": "DOTA_HEROPICK_STATE_AR_SELECT",
                "value": 30
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_MO_SELECT",
                "value": 31
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_FH_SELECT",
                "value": 32
            },
            {
                "desc": "   ",
                "name": "DOTA_HEROPICK_STATE_CD_INTRO",
                "value": 33
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
                "value": 34
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN1",
                "value": 35
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN2",
                "value": 36
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN3",
                "value": 37
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN4",
                "value": 38
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN5",
                "value": 39
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN6",
                "value": 40
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT1",
                "value": 41
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT2",
                "value": 42
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT3",
                "value": 43
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT4",
                "value": 44
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT5",
                "value": 45
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT6",
                "value": 46
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT7",
                "value": 47
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT8",
                "value": 48
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT9",
                "value": 49
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT10",
                "value": 50
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_CD_PICK",
                "value": 51
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_BD_SELECT",
                "value": 52
            },
            {
                "desc": "英雄选择状态能力选秀",
                "name": "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
                "value": 53
            },
            {
                "desc": "    ",
                "name": "DOTA_HERO_PICK_STATE_ARDM_SELECT",
                "value": 54
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
                "value": 55
            },
            {
                "desc": "英雄选择状态自定义游戏选择",
                "name": "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
                "value": 56
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_SELECT_PENALTY",
                "value": 57
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES",
                "value": 58
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_COUNT",
                "value": 59
            }
        ],
        "AttributeDerivedStats": [
            {
                "desc": "每点力量攻击",
                "name": "DOTA_ATTRIBUTE_STRENGTH_DAMAGE",
                "value": 0
            },
            {
                "desc": "每点力量生命",
                "name": "DOTA_ATTRIBUTE_STRENGTH_HP",
                "value": 1
            },
            {
                "desc": "每点力量回血",
                "name": "DOTA_ATTRIBUTE_STRENGTH_HP_REGEN",
                "value": 2
            },
            {
                "desc": "每点敏捷攻击",
                "name": "DOTA_ATTRIBUTE_AGILITY_DAMAGE",
                "value": 3
            },
            {
                "desc": "每点敏捷护甲",
                "name": "DOTA_ATTRIBUTE_AGILITY_ARMOR",
                "value": 4
            },
            {
                "desc": "每点敏捷攻速",
                "name": "DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED",
                "value": 5
            },
            {
                "desc": "每点智力攻击",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE",
                "value": 6
            },
            {
                "desc": "每点智力魔法",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA",
                "value": 7
            },
            {
                "desc": "每点智力回魔",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN",
                "value": 8
            }
        ],
        "AbilityLearnResult_t": [
            {
                "desc": "能力可以升级",
                "name": "ABILITY_CAN_BE_UPGRADED",
                "value": 0
            },
            {
                "desc": "能力无法升级不可升级",
                "name": "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
                "value": 1
            },
            {
                "desc": "能力不能升级到最大值",
                "name": "ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
                "value": 2
            },
            {
                "desc": "技能不能升级需要等级",
                "name": "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
                "value": 3
            },
            {
                "desc": "无法学习的能力",
                "name": "ABILITY_NOT_LEARNABLE",
                "value": 4
            }
        ],
        "DOTAModifierAttribute_t": [
            {
                "desc": "无",
                "name": "MODIFIER_ATTRIBUTE_NONE",
                "value": 0
            },
            {
                "desc": "死亡不删",
                "name": "MODIFIER_ATTRIBUTE_PERMANENT",
                "value": 1
            },
            {
                "desc": "并存",
                "name": "MODIFIER_ATTRIBUTE_MULTIPLE",
                "value": 2
            },
            {
                "desc": "无敌不删",
                "name": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
                "value": 4
            },
            {
                "desc": "光环优先",
                "name": "MODIFIER_ATTRIBUTE_AURA_PRIORITY",
                "value": 8
            }
        ],
        "DOTA_UNIT_TARGET_TEAM": [
            {
                "desc": "目标队伍要求： 无",
                "name": "DOTA_UNIT_TARGET_TEAM_NONE",
                "value": 0
            },
            {
                "desc": "目标队伍要求： 友军",
                "name": "DOTA_UNIT_TARGET_TEAM_FRIENDLY",
                "value": 1
            },
            {
                "desc": "目标队伍要求： 敌人",
                "name": "DOTA_UNIT_TARGET_TEAM_ENEMY",
                "value": 2
            },
            {
                "desc": "目标队伍要求： 两方都可以",
                "name": "DOTA_UNIT_TARGET_TEAM_BOTH",
                "value": 3
            },
            {
                "desc": "目标队伍要求： 自定义队伍（不是天灾，不是近卫，不是中立，不是自然，不是无队伍）",
                "name": "DOTA_UNIT_TARGET_TEAM_CUSTOM",
                "value": 4
            }
        ],
        "ABILITY_TYPES": [
            {
                "desc": "技能类型： 基础",
                "name": "ABILITY_TYPE_BASIC",
                "value": 0
            },
            {
                "desc": "技能类型： 大招",
                "name": "ABILITY_TYPE_ULTIMATE",
                "value": 1
            },
            {
                "desc": "技能类型： 属性",
                "name": "ABILITY_TYPE_ATTRIBUTES",
                "value": 2
            },
            {
                "desc": "技能类型： 隐藏",
                "name": "ABILITY_TYPE_HIDDEN",
                "value": 3
            }
        ],
        "ParticleAttachment_t": [
            {
                "desc": "附加点： 无效",
                "name": "PATTACH_INVALID",
                "value": -1
            },
            {
                "desc": "附加点： 世界中心2",
                "name": "PATTACH_ABSORIGIN",
                "value": 0
            },
            {
                "desc": "附加点： 跟随世界中心",
                "name": "PATTACH_ABSORIGIN_FOLLOW",
                "value": 1
            },
            {
                "desc": "附加点： 开始于自定义目标  这个需要自定义特效向量时用",
                "name": "PATTACH_CUSTOMORIGIN",
                "value": 2
            },
            {
                "desc": "附加点： CUSTOMORIGIN跟随",
                "name": "PATTACH_CUSTOMORIGIN_FOLLOW",
                "value": 3
            },
            {
                "desc": "附加点： 脚底？",
                "name": "PATTACH_POINT",
                "value": 4
            },
            {
                "desc": "附加点： 跟随脚底",
                "name": "PATTACH_POINT_FOLLOW",
                "value": 5
            },
            {
                "desc": "附加点： 跟随眼睛",
                "name": "PATTACH_EYES_FOLLOW",
                "value": 6
            },
            {
                "desc": "附加点： 跟随头顶",
                "name": "PATTACH_OVERHEAD_FOLLOW",
                "value": 7
            },
            {
                "desc": "附加点： 世界中心",
                "name": "PATTACH_WORLDORIGIN",
                "value": 8
            },
            {
                "desc": "附加点： 跟随根骨",
                "name": "PATTACH_ROOTBONE_FOLLOW",
                "value": 9
            },
            {
                "desc": "附加点： 跟随渲染目标",
                "name": "PATTACH_RENDERORIGIN_FOLLOW",
                "value": 10
            },
            {
                "desc": "附加点： 主视图点",
                "name": "PATTACH_MAIN_VIEW",
                "value": 11
            },
            {
                "desc": "附加点：",
                "name": "PATTACH_WATERWAKE",
                "value": 12
            },
            {
                "desc": "附加点： 跟随中心",
                "name": "PATTACH_CENTER_FOLLOW",
                "value": 13
            },
            {
                "desc": "附加点：",
                "name": "PATTACH_CUSTOM_GAME_STATE_1",
                "value": 14
            },
            {
                "desc": "附加点： 最大路径类型",
                "name": "MAX_PATTACH_TYPES",
                "value": 15
            }
        ]
    },
    "C_DOTA_Item_Lua": [
        {
            "desc": "Determine whether an issued command with no target is valid.",
            "func": "()",
            "return": "int",
            "name": "CastFilterResult"
        },
        {
            "desc": "(Vector vLocation) Determine whether an issued command on a location is valid.",
            "func": "( Vector vLocation )",
            "return": "int",
            "name": "CastFilterResultLocation"
        },
        {
            "desc": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
            "func": "( handle hTarget )",
            "return": "int",
            "name": "CastFilterResultTarget"
        },
        {
            "desc": "Controls the size of the AOE casting cursor.",
            "func": "()",
            "return": "float",
            "name": "GetAOERadius"
        },
        {
            "desc": "Allows code overriding of the item texture shown in the HUD.",
            "func": "()",
            "return": "string",
            "name": "GetAbilityTextureName"
        },
        {
            "desc": "Return cast behavior type of this ability.",
            "func": "()",
            "return": "int",
            "name": "GetBehavior"
        },
        {
            "desc": "Return cast range of this ability.",
            "func": "( Vector vLocation, handle hTarget )",
            "return": "int",
            "name": "GetCastRange"
        },
        {
            "desc": "Return the channel time of this ability.",
            "func": "()",
            "return": "float",
            "name": "GetChannelTime"
        },
        {
            "desc": "Return mana cost at the given level per second while channeling (-1 is current).",
            "func": "( int iLevel )",
            "return": "int",
            "name": "GetChannelledManaCostPerSecond"
        },
        {
            "desc": "Return cooldown of this ability.",
            "func": "( int iLevel )",
            "return": "float",
            "name": "GetCooldown"
        },
        {
            "desc": "Return the error string of a failed command with no target.",
            "func": "()",
            "return": "string",
            "name": "GetCustomCastError"
        },
        {
            "desc": "(Vector vLocation) Return the error string of a failed command on a location.",
            "func": "( Vector vLocation )",
            "return": "string",
            "name": "GetCustomCastErrorLocation"
        },
        {
            "desc": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
            "func": "( handle hTarget )",
            "return": "string",
            "name": "GetCustomCastErrorTarget"
        },
        {
            "desc": "Return gold cost at the given level (-1 is current).",
            "func": "( int iLevel )",
            "return": "int",
            "name": "GetGoldCost"
        },
        {
            "desc": "Return mana cost at the given level (-1 is current).",
            "func": "( int iLevel )",
            "return": "int",
            "name": "GetManaCost"
        },
        {
            "desc": "Returns whether this item is muted or not.",
            "func": "()",
            "return": "bool",
            "name": "IsMuted"
        }
    ],
    "CDOTA_Buff": [
        {
            "desc": "增加粒子。",
            "func": "( int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect )",
            "return": "void",
            "name": "AddParticle"
        },
        {
            "desc": "将Mordifier的叠加层数-1",
            "func": "()",
            "return": "void",
            "name": "DecrementStackCount"
        },
        {
            "desc": "运行所有相关的移除函数来移除这个Mordifier。",
            "func": "()",
            "return": "void",
            "name": "Destroy"
        },
        {
            "desc": "运行所有相关的刷新函数，使Mordifier恢复到初始",
            "func": "()",
            "return": "void",
            "name": "ForceRefresh"
        },
        {
            "desc": "获取产生这个Mordifier的技能。",
            "func": "()",
            "return": "handle",
            "name": "GetAbility"
        },
        {
            "desc": "Returns aura stickiness (default 0.5)",
            "func": "()",
            "return": "float",
            "name": "GetAuraDuration"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "GetAuraOwner"
        },
        {
            "desc": "获取产生这个Mordifier的单位。",
            "func": "()",
            "return": "handle",
            "name": "GetCaster"
        },
        {
            "desc": "获取这个Mordifier所属的类。",
            "func": "()",
            "return": "string",
            "name": "GetClass"
        },
        {
            "desc": "获取这个Mordifier的创建时间。",
            "func": "()",
            "return": "float",
            "name": "GetCreationTime"
        },
        {
            "desc": "获取这个Mordifier的终止时间。",
            "func": "()",
            "return": "float",
            "name": "GetDieTime"
        },
        {
            "desc": "获取这个Mordifier的持续时间。",
            "func": "()",
            "return": "float",
            "name": "GetDuration"
        },
        {
            "desc": "获取这个Mordifier的消失时间。",
            "func": "()",
            "return": "float",
            "name": "GetElapsedTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetLastAppliedTime"
        },
        {
            "desc": "获取这个Mordifier的名称。",
            "func": "()",
            "return": "string",
            "name": "GetName"
        },
        {
            "desc": "获取这个Mordifier所继承的单位。",
            "func": "()",
            "return": "handle",
            "name": "GetParent"
        },
        {
            "desc": "获取这个Mordifier的剩余时间。",
            "func": "()",
            "return": "float",
            "name": "GetRemainingTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetSerialNumber"
        },
        {
            "desc": "获取这个Mordifier的叠加层数。",
            "func": "()",
            "return": "int",
            "name": "GetStackCount"
        },
        {
            "desc": "",
            "func": "( int iFunction )",
            "return": "bool",
            "name": "HasFunction"
        },
        {
            "desc": "使Mordifier的叠加层数+1。",
            "func": "()",
            "return": "void",
            "name": "IncrementStackCount"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDebuff"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHexDebuff"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsStunDebuff"
        },
        {
            "desc": "设置持续时间。",
            "func": "( float flDuration, bool bInformClient )",
            "return": "void",
            "name": "SetDuration"
        },
        {
            "desc": "设置叠加层数。",
            "func": "( int iCount )",
            "return": "void",
            "name": "SetStackCount"
        },
        {
            "desc": "开始Mordifier的计时功能(OnIntervalThink)，根据给定的间隔(float)。值-1将会停止这个功能。",
            "func": "( float flInterval )",
            "return": "void",
            "name": "StartIntervalThink"
        }
    ],
    "CNativeOutputs": [
        {
            "desc": "增加一个输出",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "AddOutput"
        },
        {
            "desc": "初始化输出",
            "func": "( int_1 )",
            "return": "void",
            "name": "Init"
        }
    ],
    "CEntities": [
        {
            "desc": "在实体数组或表中开始一个迭代程序",
            "func": "()",
            "return": "handle",
            "name": "First"
        },
        {
            "desc": "从指定列表中的实体开始迭代",
            "func": "( handle_1 )",
            "return": "handle",
            "name": "Next"
        }
    ],
    "CEntityInstance": [
        {
            "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "ConnectOutput"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "Destroy"
        },
        {
            "desc": "从这个实体的I/O事件移除已连接的脚本方法",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "DisconnectOutput"
        },
        {
            "desc": "从传入实体的I/O事件移除已连接的脚本方法",
            "func": "( string_1, string_2, handle_3 )",
            "return": "void",
            "name": "DisconnectRedirectedOutput"
        },
        {
            "desc": "触发实体的输出",
            "func": "( string_1, handle_2, handle_3, table_4, float_5 )",
            "return": "void",
            "name": "FireOutput"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetClassname"
        },
        {
            "desc": "如果没有定义的话获得实体名字的帮助",
            "func": "()",
            "return": "string",
            "name": "GetDebugName"
        },
        {
            "desc": "获得这个实体的EHANDLE",
            "func": "()",
            "return": "ehandle",
            "name": "GetEntityHandle"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetEntityIndex"
        },
        {
            "desc": "获得整型属性",
            "func": "( string_1 )",
            "return": "int",
            "name": "GetIntAttr"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetName"
        },
        {
            "desc": "恢复实体相关的每个实例私有的脚本数据,必要时会创建",
            "func": "()",
            "return": "handle",
            "name": "GetOrCreatePrivateScriptScope"
        },
        {
            "desc": "恢复实体相关的公用脚本数据,必要时会创建",
            "func": "()",
            "return": "handle",
            "name": "GetOrCreatePublicScriptScope"
        },
        {
            "desc": "恢复实体相关的每个实例私有的脚本数据",
            "func": "()",
            "return": "handle",
            "name": "GetPrivateScriptScope"
        },
        {
            "desc": "恢复实体相关的公用脚本数据",
            "func": "()",
            "return": "handle",
            "name": "GetPublicScriptScope"
        },
        {
            "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
            "func": "( string_1, string_2, handle_3 )",
            "return": "void",
            "name": "RedirectOutput"
        },
        {
            "desc": "删除这个实体",
            "func": "()",
            "return": "void",
            "name": "RemoveSelf"
        },
        {
            "desc": "设置整型属性",
            "func": "( string_1, int_2 )",
            "return": "void",
            "name": "SetIntAttr"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "entindex"
        }
    ],
    "C_DOTA_BaseNPC_Hero": [
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetAgility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetIntellect"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetStrength"
        }
    ],
    "CScriptParticleManager": [
        {
            "desc": "创建一个新的粒子特效",
            "func": "( string_1, int_2, handle_3 )",
            "return": "int",
            "name": "CreateParticle"
        },
        {
            "desc": "创建一个只对指定玩家播放的粒子特效",
            "func": "( string_1, int_2, handle_3, handle_4 )",
            "return": "int",
            "name": "CreateParticleForPlayer"
        },
        {
            "desc": "创建一个仅为某方队伍播放的粒子特效。",
            "func": "( string_1, int_2, handle_3, int_4 )",
            "return": "int",
            "name": "CreateParticleForTeam"
        },
        {
            "desc": "清除粒子。",
            "func": "( int_1, bool_2 )",
            "return": "void",
            "name": "DestroyParticle"
        },
        {
            "desc": "",
            "func": "( string_1, handle_2 )",
            "return": "string",
            "name": "GetParticleReplacement"
        },
        {
            "desc": "施放指定粒子特效索引号",
            "func": "( int_1 )",
            "return": "void",
            "name": "ReleaseParticleIndex"
        },
        {
            "desc": "",
            "func": "( int_1 )",
            "return": "void",
            "name": "SetParticleAlwaysSimulate"
        },
        {
            "desc": "设置控制粒子特效的控制点数据",
            "func": "( int_1, int_2, Vector_3 )",
            "return": "void",
            "name": "SetParticleControl"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, handle_3, int_4, string_5, Vector_6, bool_7 )",
            "return": "void",
            "name": "SetParticleControlEnt"
        },
        {
            "desc": "(int iIndex, int iPoint, Vector vecPosition)",
            "func": "( int_1, int_2, Vector_3 )",
            "return": "void",
            "name": "SetParticleControlFallback"
        },
        {
            "desc": "设置粒子的前进运动",
            "func": "( int_1, int_2, Vector_3 )",
            "return": "void",
            "name": "SetParticleControlForward"
        },
        {
            "desc": "设置粒子的三向运动。",
            "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
            "return": "void",
            "name": "SetParticleControlOrientation"
        },
        {
            "desc": "(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect",
            "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
            "return": "void",
            "name": "SetParticleControlOrientationFLU"
        },
        {
            "desc": "int nfxindex, int nPoint, int nPoint2, float flRadius",
            "func": "( int_1, int_2, int_3, float_4 )",
            "return": "void",
            "name": "SetParticleFoWProperties"
        },
        {
            "desc": "int nfxindex, bool bCheckFoW",
            "func": "( int_1, bool_2 )",
            "return": "bool",
            "name": "SetParticleShouldCheckFoW"
        }
    ],
    "CDOTA_Modifier_Lua_Vertical_Motion": [
        {
            "desc": "当竖直运动被打断时进行回调",
            "func": "()",
            "return": "void",
            "name": "OnVerticalMotionInterrupted"
        },
        {
            "desc": "根据给定的间隔对NPC施加竖直运动。",
            "func": "( handle me, float dt )",
            "return": "void",
            "name": "UpdateVerticalMotion"
        }
    ],
    "C_DOTA_Item": [
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetCurrentCharges"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetInitialCharges"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetItemSlot"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetSecondaryCharges"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetShareability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsAlertableItem"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsCastOnPickup"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDisassemblable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDroppable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsInBackpack"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsItem"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsKillable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsMuted"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsPermanent"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsPurchasable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsRecipe"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsRecipeGenerated"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsSellable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsStackable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "RequiresCharges"
        }
    ],
    "C_BaseFlex": [],
    "C_BaseAnimating": [],
    "CInfoWorldLayer": [
        {
            "desc": "Hides this layer",
            "func": "()",
            "return": "void",
            "name": "HideWorldLayer"
        },
        {
            "desc": "Shows this layer",
            "func": "()",
            "return": "void",
            "name": "ShowWorldLayer"
        }
    ],
    "CEntityScriptFramework": [],
    "CPhysicsComponent": [
        {
            "name": "ExpensiveInstantRayCast",
            "desc": "进行一个立即（即阻挡）的光线投射，稍后会有handle/queue版本，并不计划实际使用这个！"
        },
        {
            "name": "SetTextReplaceString",
            "desc": "设置该子任务的文本取代字符串"
        },
        {
            "name": "SetTextReplaceValue",
            "desc": "设置子任务数值"
        },
        {
            "name": "GetSubquestByName",
            "desc": "用任务名称找到该任务的子任务"
        },
        {
            "name": "RemoveSubquest",
            "desc": "从该任务移除一个子任务"
        },
        {
            "name": "SetTextReplaceString",
            "desc": "设置该任务的文本取代字符串"
        },
        {
            "name": "SetTextReplaceValue",
            "desc": "设置任务数值"
        },
        {
            "name": "ClearModifyGoldFilter",
            "desc": "清除脚本过滤器--控制英雄金钱机制的"
        },
        {
            "name": "ClearRuneSpawnFilter",
            "desc": "清除脚本过滤器--控制神符刷新的"
        },
        {
            "name": "ClearTrackingProjectileFilter",
            "desc": "清除脚本过滤器--控制追踪投射物的"
        },
        {
            "name": "ClientLoadGridNav",
            "desc": "通知客户端需要载入网格信息，可用于允许客户端确定允许建筑的区域等"
        },
        {
            "name": "GetAlwaysShowPlayerNames",
            "desc": ""
        },
        {
            "name": "GetAlwaysShowPlayerInventory",
            "desc": "返回是否不论任何单位被选中，始终在HUD上显示英雄的物品库存"
        },
        {
            "name": "GetAnnouncerDisabled",
            "desc": "返回游戏内播音员是否被禁用"
        },
        {
            "name": "GetCameraDistanceOverride",
            "desc": "返回是否设置摄像机距离Dota内的默认值为1134"
        },
        {
            "name": "GetCustomBuybackCooldownEnabled",
            "desc": "返回是否允许自定义的买活CD"
        },
        {
            "name": "GetCustomBuybackCostEnabled",
            "desc": "返回是否允许自定义的买活金钱"
        },
        {
            "name": "GetCustomHeroMaxLevel",
            "desc": "返回是否允许改变英雄的最高等级（默认25）"
        },
        {
            "name": "GetFixedRespawnTime",
            "desc": "返回是否返回固定的复活时间"
        },
        {
            "name": "GetFogOfWarDisabled",
            "desc": "返回是否关闭/开启战争迷雾"
        },
        {
            "name": "GetGoldSoundDisabled",
            "desc": "返回是否开启/关闭获得金钱时的音效"
        },
        {
            "name": "GetMaximumAttackSpeed",
            "desc": "获取单位的最大攻击速度"
        },
        {
            "name": "GetMinimumAttackSpeed",
            "desc": "获取单位的最小攻击速度"
        },
        {
            "name": "GetRecommendedItemsDisabled",
            "desc": "返回是否开启/关闭推荐出装在商店中的显示"
        },
        {
            "name": "GetStashPurchasingDisabled",
            "desc": "返回是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品"
        },
        {
            "name": "GetStickyItemDisabled",
            "desc": "返回是否隐藏快速购买处的物品"
        },
        {
            "name": "GetTopBarTeamValuesOverride",
            "desc": "返回是否覆盖游戏界面顶部的队伍比分"
        },
        {
            "name": "GetTopBarTeamValuesVisible",
            "desc": "返回是否关闭/开启游戏界面顶部的队伍比分"
        },
        {
            "name": "GetTowerBackdoorProtectionEnabled",
            "desc": "返回是否启用/禁用偷塔保护"
        },
        {
            "name": "GetUseCustomHeroLevels",
            "desc": "返回自定义经验机制是否被使用"
        },
        {
            "name": "IsBuybackEnabled",
            "desc": "返回是否启用/禁用买活"
        },
        {
            "name": "SetAbilityTuningValueFilter",
            "desc": "设置一个过滤器，用来控制技能所用到的调整值(修改数据table并返回True来使用新值，,返回False来使用旧值)"
        },
        {
            "name": "SetAlwaysShowPlayerNames",
            "desc": ""
        },
        {
            "name": "SetAlwaysShowPlayerInventory",
            "desc": "不论任何单位被选中，始终在HUD上显示英雄的物品库存"
        },
        {
            "name": "SetAnnouncerDisabled",
            "desc": "禁用播音员"
        },
        {
            "name": "SetBotsAlwaysPushWithHuman",
            "desc": "设置Bot玩家是否总是跟从人类玩家进行推进"
        },
        {
            "name": "SetBotsInLateGame",
            "desc": "Setifbotsshouldenabletheirlategamebehavior."
        },
        {
            "name": "SetBotsMaxPushTier",
            "desc": "设置Bot玩家将推进到哪一级别的防御塔（-1代表不推进）"
        },
        {
            "name": "SetBotThinkingEnabled",
            "desc": "允许/禁止机器人思考，需要与DotaPvP高度相似的三路线地图、商店等"
        },
        {
            "name": "SetBountyRunePickupFilter",
            "desc": "设置一个过滤器，用来控制触发赏金符时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetBuybackEnabled",
            "desc": "完全允许/禁止买活"
        },
        {
            "name": "SetCameraDistanceOverride",
            "desc": "设置默认的镜头距离Dota默认为1134"
        },
        {
            "name": "SetCustomBuybackCooldownEnabled",
            "desc": "开启该选项来允许自定义买活冷却时间"
        },
        {
            "name": "SetCustomBuybackCostEnabled",
            "desc": "开启该选项来允许自定义买活花费"
        },
        {
            "name": "SetCustomGameForceHero",
            "desc": "强制单人游戏英雄的选择"
        },
        {
            "name": "SetCustomHeroMaxLevel",
            "desc": "定义最大英雄等级（默认为25）"
        },
        {
            "name": "SetCustomXPRequiredToReachNextLevel",
            "desc": "定义英雄经验值表(table)"
        },
        {
            "name": "SetDamageFilter",
            "desc": "设置一个过滤器，用来控制单位受到伤害时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetExecuteOrderFilter",
            "desc": "设置一个过滤器，用来控制单位捡起物品时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetFixedRespawnTime",
            "desc": "Setsthedotarespawntime.-1fordefaultbehavior"
        },
        {
            "name": "SetFogOfWarDisabled",
            "desc": "开关战争迷雾"
        },
        {
            "name": "SetFountainConstantManaRegen",
            "desc": "设定泉水给予的固定魔法的恢复速率(默认为-1)"
        },
        {
            "name": "SetFountainPercentageHealthRegen",
            "desc": "设定泉水给予的的百分比生命恢复速率(默认为-1)"
        },
        {
            "name": "SetFountainPercentageManaRegen",
            "desc": "设定泉水给予的百分比魔法恢复速率(默认为-1)"
        },
        {
            "name": "SetGoldSoundDisabled",
            "desc": "是否禁止获取金钱时的声音提示"
        },
        {
            "name": "SetHUDVisible",
            "desc": "设置HUD元素是否可见"
        },
        {
            "name": "SetItemAddedToInventoryFilter",
            "desc": "设置一个过滤器，用来控制物品被放入物品栏时的行为。"
        },
        {
            "name": "SetLoseGoldOnDeath",
            "desc": "设置禁用死亡时损失金钱"
        },
        {
            "name": "SetMaximumAttackSpeed",
            "desc": "设置单位的最大攻击速度"
        },
        {
            "name": "SetMinimumAttackSpeed",
            "desc": "设置单位的最小攻击速度"
        },
        {
            "name": "SetModifierGainedFilter",
            "desc": "设置一个过滤器，用来控制Modifier的获得,返回Flase来删除Modifier"
        },
        {
            "name": "SetModifyExperienceFilter",
            "desc": "设置一个过滤器，用来控制英雄经验值被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetModifyGoldFilter",
            "desc": "设置一个过滤器，用来控制英雄的金钱被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetOverrideSelectionEntity",
            "desc": "覆盖默认选择实体，替代所有玩家的英雄"
        },
        {
            "name": "SetRecommendedItemsDisabled",
            "desc": "是否禁止显示商店中的推荐购买物品"
        },
        {
            "name": "SetRemoveIllusionsOnDeath",
            "desc": "使幻象死亡时立即消失，而不是延迟数秒"
        },
        {
            "name": "SetRuneEnabled",
            "desc": "设定某种神符是否启用"
        },
        {
            "name": "SetRuneSpawnFilter",
            "desc": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetStashPurchasingDisabled",
            "desc": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品"
        },
        {
            "name": "SetStickyItemDisabled",
            "desc": "隐藏快速购买处的物品"
        },
        {
            "name": "SetTopBarTeamValue",
            "desc": "设置顶端的队伍数值"
        },
        {
            "name": "SetTopBarTeamValuesOverride",
            "desc": "是否覆盖顶端的队伍数值"
        },
        {
            "name": "SetTopBarTeamValuesVisible",
            "desc": "开关顶端的队伍数值"
        },
        {
            "name": "SetTowerBackdoorProtectionEnabled",
            "desc": "开关偷塔保护"
        },
        {
            "name": "SetTrackingProjectileFilter",
            "desc": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetUnseenFogOfWarEnabled",
            "desc": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖"
        },
        {
            "name": "SetUseCustomHeroLevels",
            "desc": "开关自定义英雄英雄经验表，该表必须提前被定义"
        },
        {
            "name": "SetBaseAgility",
            "desc": "设置基础敏捷"
        },
        {
            "name": "SetBaseIntellect",
            "desc": "设置基础智力"
        },
        {
            "name": "SetBaseStrength",
            "desc": "设置基础力量"
        },
        {
            "name": "SetBotDifficulty",
            "desc": "设置人机对战的难度。"
        },
        {
            "name": "SetBuybackCooldownTime",
            "desc": "设置买活冷却时间"
        },
        {
            "name": "SetBuyBackDisabledByReapersScythe",
            "desc": "设置是否被死神镰刀禁止买活"
        },
        {
            "name": "SetBuybackGoldLimitTime",
            "desc": "设置买活后金钱惩罚时间"
        },
        {
            "name": "SetCustomDeathXP",
            "desc": "GameRulesbooleanmustbesetforthistowork!}}"
        },
        {
            "name": "SetGold",
            "desc": "设置英雄拥有者的金钱"
        },
        {
            "name": "SetPlayerID",
            "desc": ""
        },
        {
            "name": "SetPrimaryAttribute",
            "desc": "设置英雄的主属性值。"
        },
        {
            "name": "SetRespawnPosition",
            "desc": ""
        },
        {
            "name": "SetRespawnsDisabled",
            "desc": "禁止英雄复活。"
        },
        {
            "name": "SetTimeUntilRespawn",
            "desc": ""
        },
        {
            "name": "ShouldDoFlyHeightVisual",
            "desc": ""
        },
        {
            "name": "SpendGold",
            "desc": "参数:int金钱,int原因"
        },
        {
            "name": "UnitCanRespawn",
            "desc": ""
        },
        {
            "name": "UpgradeAbility",
            "desc": "升级指定技能，需要英雄拥有该技能和技能点"
        },
        {
            "name": "WillReincarnate",
            "desc": ""
        },
        {
            "name": "GetOpposingTeamNumber",
            "desc": ""
        },
        {
            "name": "GetPaddedCollisionRadius",
            "desc": "获取单位碰撞体积半径。"
        },
        {
            "name": "GetPercentageBasedManaRegen",
            "desc": "获取基础魔力恢复值百分比。"
        },
        {
            "name": "GetPhysicalArmorBaseValue",
            "desc": "返回基础护甲值。"
        },
        {
            "name": "GetPhysicalArmorValue",
            "desc": "返回当前的护甲值。"
        },
        {
            "name": "GetPlayerOwner",
            "desc": "获取拥有此单位的玩家实体。"
        },
        {
            "name": "GetPlayerOwnerID",
            "desc": "获取拥有此单位的玩家ID。"
        },
        {
            "name": "GetProjectileSpeed",
            "desc": ""
        },
        {
            "name": "GetRangeToUnit",
            "desc": ""
        },
        {
            "name": "GetSecondsPerAttack",
            "desc": ""
        },
        {
            "name": "GetStatsBasedManaRegen",
            "desc": "获取因智慧而增加的魔法恢复值。"
        },
        {
            "name": "GetTeamNumber",
            "desc": "获取该单位所属的队伍ID。"
        },
        {
            "name": "GetTotalPurchasedUpgradeGoldCost",
            "desc": "获取用在升级的金钱。"
        },
        {
            "name": "GetUnitLabel",
            "desc": ""
        },
        {
            "name": "GetUnitName",
            "desc": "获取单位名称。"
        },
        {
            "name": "GiveMana",
            "desc": "给予此单位指定的魔法值。(Giffmemana!)"
        },
        {
            "name": "HasAbility",
            "desc": "以技能名称搜寻该单位是否拥有此技能。"
        },
        {
            "name": "HasAttackCapability",
            "desc": ""
        },
        {
            "name": "HasFlyingVision",
            "desc": ""
        },
        {
            "name": "HasFlyMovementCapability",
            "desc": ""
        },
        {
            "name": "HasGroundMovementCapability",
            "desc": ""
        },
        {
            "name": "HasInventory",
            "desc": ""
        },
        {
            "name": "HasItemInInventory",
            "desc": "以物品名称搜寻该单位是否拥有此物品。"
        },
        {
            "name": "HasModifier",
            "desc": "以修改器名称搜寻该单位是否拥有此修改器。"
        },
        {
            "name": "HasMovementCapability",
            "desc": ""
        },
        {
            "name": "HasScepter",
            "desc": ""
        },
        {
            "name": "Heal",
            "desc": "治疗该单位。"
        },
        {
            "name": "Hold",
            "desc": "命令单位在原地待命。"
        },
        {
            "name": "Interrupt",
            "desc": ""
        },
        {
            "name": "InterruptChannel",
            "desc": ""
        },
        {
            "name": "InterruptMotionControllers",
            "desc": "Parameterbooleandeterminesfindingclearspace."
        },
        {
            "name": "IsAlive",
            "desc": "此单位是否还活着?"
        },
        {
            "name": "IsAncient",
            "desc": "该生物是否为远古野怪?"
        },
        {
            "name": "IsAttackImmune",
            "desc": ""
        },
        {
            "name": "IsAttacking",
            "desc": ""
        },
        {
            "name": "IsAttackingEntity",
            "desc": ""
        },
        {
            "name": "IsBlind",
            "desc": ""
        },
        {
            "name": "IsBlockDisabled",
            "desc": ""
        },
        {
            "name": "IsCommandRestricted",
            "desc": ""
        },
        {
            "name": "IsControllableByAnyPlayer",
            "desc": "该单位是否为非Bot玩家所控制?"
        },
        {
            "name": "IsCreature",
            "desc": "此单位是否为怪物类型单位?"
        },
        {
            "name": "IsDeniable",
            "desc": ""
        },
        {
            "name": "IsDisarmed",
            "desc": ""
        },
        {
            "name": "IsDominated",
            "desc": ""
        },
        {
            "name": "IsEvadeDisabled",
            "desc": ""
        },
        {
            "name": "IsFrozen",
            "desc": ""
        },
        {
            "name": "IsHardDisarmed",
            "desc": ""
        },
        {
            "name": "IsHero",
            "desc": "此单位是否为英雄或英雄幻象?"
        },
        {
            "name": "IsHexed",
            "desc": ""
        },
        {
            "name": "IsIdle",
            "desc": "该生物是否处于闲置状态?"
        },
        {
            "name": "IsIllusion",
            "desc": "该单位是否为幻象单位?"
        },
        {
            "name": "IsInvisible",
            "desc": ""
        },
        {
            "name": "IsInvulnerable",
            "desc": ""
        },
        {
            "name": "IsLowAttackPriority",
            "desc": ""
        },
        {
            "name": "IsMagicImmune",
            "desc": "该单位是否魔法免疫?"
        },
        {
            "name": "IsMechanical",
            "desc": "该单位是否为机械单位?"
        },
        {
            "name": "IsMovementImpaired",
            "desc": ""
        },
        {
            "name": "IsMuted",
            "desc": ""
        },
        {
            "name": "IsNeutralUnitType",
            "desc": "该单位是否为野怪?"
        },
        {
            "name": "IsNightmared",
            "desc": ""
        },
        {
            "name": "IsOpposingTeam",
            "desc": ""
        },
        {
            "name": "IsOutOfGame",
            "desc": ""
        },
        {
            "name": "IsOwnedByAnyPlayer",
            "desc": "该单位是否为非Bot之玩家所有?"
        },
        {
            "name": "IsPhantom",
            "desc": "该单位是否为幻象单位?"
        },
        {
            "name": "IsPhantomBlocker",
            "desc": ""
        },
        {
            "name": "IsPhased",
            "desc": "是否在相位状态?"
        },
        {
            "name": "IsPositionInRange",
            "desc": "是否在某点的范围内"
        },
        {
            "name": "IsRangedAttacker",
            "desc": "该单位攻击类型是否为远程攻击?"
        },
        {
            "name": "IsRealHero",
            "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。"
        },
        {
            "name": "IsRooted",
            "desc": ""
        },
        {
            "name": "IsSilenced",
            "desc": "该单位是否被沉默?"
        },
        {
            "name": "IsSoftDisarmed",
            "desc": ""
        },
        {
            "name": "IsSpeciallyDeniable",
            "desc": ""
        },
        {
            "name": "IsStunned",
            "desc": "该单位是否被晕眩了?"
        },
        {
            "name": "IsSummoned",
            "desc": "此单位是否为召唤物?"
        },
        {
            "name": "IsTower",
            "desc": "此单位是否为塔?"
        },
        {
            "name": "IsUnableToMiss",
            "desc": ""
        },
        {
            "name": "IsUnselectable",
            "desc": ""
        },
        {
            "name": "Kill",
            "desc": "杀死一个单位，参数为使用的技能与攻击者。"
        },
        {
            "name": "MakeIllusion",
            "desc": ""
        },
        {
            "name": "MakePhantomBlocker",
            "desc": ""
        },
        {
            "name": "MakeVisibleDueToAttack",
            "desc": ""
        },
        {
            "name": "MakeVisibleToTeam",
            "desc": ""
        },
        {
            "name": "ManageModelChanges",
            "desc": ""
        },
        {
            "name": "ModifyHealth",
            "desc": "设置血量为所指定的值"
        },
        {
            "name": "MoveToNPC",
            "desc": "移动至指定的单位。"
        },
        {
            "name": "MoveToNPCToGiveItem",
            "desc": "将身上的物品丢给指定的单位。"
        },
        {
            "name": "MoveToPosition",
            "desc": "移动到指定的位置。"
        },
        {
            "name": "MoveToPositionAggressive",
            "desc": "移动到指定的位置。"
        },
        {
            "name": "MoveToTargetToAttack",
            "desc": "移动至指定的单位，并且发动攻击。"
        },
        {
            "name": "NoHealthBar",
            "desc": ""
        },
        {
            "name": "NoTeamMoveTo",
            "desc": ""
        },
        {
            "name": "NoTeamSelect",
            "desc": ""
        },
        {
            "name": "NotifyWearablesOfModelChange",
            "desc": "通知模型的可穿戴性发生了改变。"
        },
        {
            "name": "NotOnMinimap",
            "desc": ""
        },
        {
            "name": "NotOnMinimapForEnemies",
            "desc": ""
        },
        {
            "name": "NoUnitCollision",
            "desc": ""
        },
        {
            "name": "PassivesDisabled",
            "desc": ""
        },
        {
            "name": "PerformAttack",
            "desc": "对一单位执行攻击。"
        },
        {
            "name": "PickupDroppedItem",
            "desc": "捡起掉落的物品。"
        },
        {
            "name": "PickupRune",
            "desc": "捡起神符。"
        },
        {
            "name": "ProvidesVision",
            "desc": ""
        },
        {
            "name": "Purge",
            "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。"
        },
        {
            "name": "ReduceMana",
            "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。"
        },
        {
            "name": "RemoveAbility",
            "desc": "以技能名称移除该单位相应的技能。"
        },
        {
            "name": "RemoveGesture",
            "desc": "移除某个动作。"
        },
        {
            "name": "RemoveHorizontalMotionController",
            "desc": "移除水平方向上的运动控制器。"
        },
        {
            "name": "RemoveItem",
            "desc": "将该单位库存中的过期物品移除。"
        },
        {
            "name": "RemoveModifierByName",
            "desc": "以名称移除修改器。"
        },
        {
            "name": "RemoveModifierByNameAndCaster",
            "desc": "以施法者与修改器名称移除修改器。"
        },
        {
            "name": "RemoveNoDraw",
            "desc": "Removethenodrawflag."
        },
        {
            "name": "RemoveVerticalMotionController",
            "desc": "移除垂直方向上的运动控制器。"
        },
        {
            "name": "RespawnUnit",
            "desc": "复活该单位。"
        },
        {
            "name": "TakeItem",
            "desc": "隐藏物品"
        },
        {
            "name": "SellItem",
            "desc": "卖出该单位的物品。"
        },
        {
            "name": "SetAbilityByIndex",
            "desc": "改变技能Index"
        },
        {
            "name": "SetAcquisitionRange",
            "desc": "Setsacquisitionrange"
        },
        {
            "name": "SetAdditionalBattleMusicWeight",
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。"
        },
        {
            "name": "SetAggroTarget",
            "desc": "将这个单位的仇恨目标设为某个单位。"
        },
        {
            "name": "SetAttackCapability",
            "desc": ""
        },
        {
            "name": "SetAttacking",
            "desc": ""
        },
        {
            "name": "SetBaseAttackTime",
            "desc": ""
        },
        {
            "name": "SetBaseDamageMax",
            "desc": "设置基础最大攻击力。"
        },
        {
            "name": "SetBaseDamageMin",
            "desc": "设置基础最小攻击力。"
        },
        {
            "name": "SetBaseHealthRegen",
            "desc": ""
        },
        {
            "name": "SetBaseMagicalResistanceValue",
            "desc": "设置基础魔法抗性值。"
        },
        {
            "name": "SetBaseManaRegen",
            "desc": "设置基础魔力恢复值。"
        },
        {
            "name": "SetBaseMaxHealth",
            "desc": "设置基础最大血量。"
        },
        {
            "name": "SetBaseMoveSpeed",
            "desc": "设置基础跑速。"
        },
        {
            "name": "SetCanSellItems",
            "desc": "设置这个单位是否能出售物品。"
        },
        {
            "name": "SetControllableByPlayer",
            "desc": "以玩家ID设置该单位的控制权。"
        },
        {
            "name": "SetCursorCastTarget",
            "desc": ""
        },
        {
            "name": "SetCursorPosition",
            "desc": ""
        },
        {
            "name": "SetCursorTargetingNothing",
            "desc": ""
        },
        {
            "name": "SetDayTimeVisionRange",
            "desc": "设置基础的视间视野距离。"
        },
        {
            "name": "SetDeathXP",
            "desc": "设置该单位的击杀经验值奖赏。"
        },
        {
            "name": "SetDeathXP",
            "desc": "SettheXPbountyonthisunit"
        },
        {
            "name": "SetForceAttackTarget",
            "desc": ""
        },
        {
            "name": "SetHasInventory",
            "desc": ""
        },
        {
            "name": "SetHullRadius",
            "desc": "设置该单位的碰撞半径。"
        },
        {
            "name": "SetIdleAcquire",
            "desc": ""
        },
        {
            "name": "SetInitialGoalEntity",
            "desc": "设置该单位的初始路径点。"
        },
        {
            "name": "SetMana",
            "desc": "设置该单位的魔力值。"
        },
        {
            "name": "SetMaximumGoldBounty",
            "desc": "设置该单位的最高赏金。"
        },
        {
            "name": "SetMinimumGoldBounty",
            "desc": "设置该单位的最低赏金。"
        },
        {
            "name": "SetModifierStackCount",
            "desc": "Setsthestackcountofagivenmodifier."
        },
        {
            "name": "SetMoveCapability",
            "desc": ""
        },
        {
            "name": "SetMustReachEachGoalEntity",
            "desc": "设置该单位是否要走访每个路径点。"
        },
        {
            "name": "SetNeverMoveToClearSpace",
            "desc": "如果设置为True，则不会将该单位移动到净空的地方。"
        },
        {
            "name": "SetNightTimeVisionRange",
            "desc": "设置基础夜间视野距离。"
        },
        {
            "name": "SetOrigin",
            "desc": "设置单位位置。"
        },
        {
            "name": "SetOriginalModel",
            "desc": "设置单位原模型。"
        },
        {
            "name": "SetPhysicalArmorBaseValue",
            "desc": "设置基础护甲值。"
        },
        {
            "name": "SetRangedProjectileName",
            "desc": ""
        },
        {
            "name": "SetRenderAlpha",
            "desc": ""
        },
        {
            "name": "SetStolenScepter",
            "desc": ""
        },
        {
            "name": "SetUnitName",
            "desc": ""
        },
        {
            "name": "ShouldIdleAcquire",
            "desc": ""
        },
        {
            "name": "SpendMana",
            "desc": "消耗魔力，可以用在技能消耗或使用物品。"
        },
        {
            "name": "StartGesture",
            "desc": "向单位添加给定的动作。"
        },
        {
            "name": "StartGestureWithPlaybackRate",
            "desc": "向单位添加给定的动作，带有自定义的动作速度。"
        },
        {
            "name": "Stop",
            "desc": "使该单位暂停当前动作。"
        },
        {
            "name": "SwapAbilities",
            "desc": "交换两个技能的字段，并设置其是否生效。"
        },
        {
            "name": "SwapItems",
            "desc": "交换两个物品的位置。"
        },
        {
            "name": "TimeUntilNextAttack",
            "desc": ""
        },
        {
            "name": "TriggerModifierDodge",
            "desc": ""
        },
        {
            "name": "TriggerSpellAbsorb",
            "desc": "判断传递的技能是否会触发该单位的技能吸收"
        },
        {
            "name": "TriggerSpellReflect",
            "desc": "触发类似于清莲宝珠一样的效果。"
        },
        {
            "name": "UnitCanRespawn",
            "desc": ""
        }
    ],
    "CToneMapControllerComponent": [
        {
            "name": "GetBloomScale",
            "desc": "获取该光泽贴图控制器（tonemapcontroller）的泛光缩放（bloomscale)"
        },
        {
            "name": "GetMaxExposure",
            "desc": "获取该光泽贴图控制器（tonemapcontroller）的最大曝光（maxexposure）"
        },
        {
            "name": "GetMinExposure",
            "desc": "获取该光泽贴图控制器（tonemapcontroller）的最小曝光（minexposure）"
        },
        {
            "name": "SetBloomScale",
            "desc": "设置该光泽贴图控制器（tonemapcontroller）的泛光缩放（bloomscale)"
        },
        {
            "name": "SetMaxExposure",
            "desc": "设置该光泽贴图控制器（tonemapcontroller）的最大曝光（maxexposure）"
        },
        {
            "name": "SetMinExposure",
            "desc": "设置该光泽贴图控制器（tonemapcontroller）的最小曝光（minexposure）"
        },
        {
            "name": "GetCustomGameDifficulty",
            "desc": "返回自定义游戏难度。"
        },
        {
            "name": "GetCustomGameDifficulty",
            "desc": "返回自定义游戏模式难度"
        },
        {
            "name": "GetDifficulty",
            "desc": "返回游戏难度"
        },
        {
            "name": "GetDOTATime",
            "desc": "返回Dota游戏内的时间。（是否包含赛前时间或负时间）。"
        },
        {
            "name": "GetDroppedItem",
            "desc": "获得第X个掉落物品"
        },
        {
            "name": "GetGameModeEntity",
            "desc": "设置游戏模式实体"
        },
        {
            "name": "GetGameSessionConfigValue",
            "desc": "从会话配置中获取字符串(地图选项)。"
        },
        {
            "name": "GetGameTime",
            "desc": "返回游戏开始后经过的秒数，暂停时间不计算在内"
        },
        {
            "name": "GetMatchSignoutComplete",
            "desc": "是否已经接受包含回报信息的弹窗"
        },
        {
            "name": "GetNianFightStartTime",
            "desc": "获得年兽大战开始时间"
        },
        {
            "name": "GetNianTotalDamageTaken",
            "desc": "芳晓活动，获得年兽受到的总伤害"
        },
        {
            "name": "GetPlayerCustomGameAccountRecord",
            "desc": "Getstheplayer'scustomgameaccountrecord,asitlookedatthestartofthissession"
        },
        {
            "name": "GetTimeOfDay",
            "desc": "获取一天中的时间（游戏时间）"
        },
        {
            "name": "IsDaytime",
            "desc": "是否是白天"
        },
        {
            "name": "IsGamePaused",
            "desc": "返回游戏是否被暂停了。"
        },
        {
            "name": "IsCheatMode",
            "desc": "检测房间是否被设置为允许作弊或sv_cheats1."
        },
        {
            "name": "LockCustomGameSetupTeamAssignment",
            "desc": "锁定(true)或解锁(false)队伍分配.。如果队伍分配被锁定，玩家将不再能修改队伍。"
        },
        {
            "name": "MakeTeamLose",
            "desc": "使指定队伍失败"
        },
        {
            "name": "NumDroppedItems",
            "desc": "返回当前掉落在地面的物品数量"
        },
        {
            "name": "PlayerHasCustomGameHostPrivileges",
            "desc": "返回玩家是否具有主机特权(洗牌等)。"
        },
        {
            "name": "Playtesting_UpdateAddOnKeyValues",
            "desc": "从磁盘数据中更新自定义英雄、单位、技能的键值"
        },
        {
            "name": "ResetDefeated",
            "desc": "遗迹摧毁后重新开始"
        },
        {
            "name": "ResetToHeroSelection",
            "desc": "重新开始时选择英雄"
        },
        {
            "name": "SendCustomMessage",
            "desc": "在左侧文本框显示一行文本，通常用来提示死亡、反补队友、买活等信息。使用严格HTML格式(>;br<;,>;u<;,>;font<;)"
        },
        {
            "name": "SendCustomMessageToTeam",
            "desc": "代表一个玩家向某个队伍发送信息。"
        },
        {
            "name": "SetCreepMinimapIconScale",
            "desc": "在小地图上缩放中立生物图标"
        },
        {
            "name": "SetCustomGameAccountRecordSaveFunction",
            "desc": "向句柄设置一个回调来保存玩家的账户信息。(回调传递了玩家的ID，并应该返回一个简单的table)。"
        },
        {
            "name": "SetCustomGameDifficulty",
            "desc": "设置自定义游戏模式难度等级"
        },
        {
            "name": "SetCustomGameEndDelay",
            "desc": "设置游戏完全结束前的等待时间。"
        },
        {
            "name": "SetCustomGameSetupAutoLaunchDelay",
            "desc": "设置自动开始前的等待时间。"
        },
        {
            "name": "SetCustomGameSetupRemainingTime",
            "desc": "设置游戏的设置时间，0=立即开始-1=等待直到设置完毕。"
        },
        {
            "name": "SetCustomGameSetupTimeout",
            "desc": "设置设置(赛前)阶段的超时。0=立即开始,-1=永远(直到FinishCustomGameSetup被调用)"
        },
        {
            "name": "SetCustomGameTeamMaxPlayers",
            "desc": "在设置阶段，设置某方队伍是否还能被选择加入"
        },
        {
            "name": "SetCustomVictoryMessage",
            "desc": "设置胜利信息。"
        },
        {
            "name": "SetCustomVictoryMessageDuration",
            "desc": "设置自订胜利信息将会持续多长时间。"
        },
        {
            "name": "SetFirstBloodActive",
            "desc": "设置第一滴血是否已经产生"
        },
        {
            "name": "SetGameWinner",
            "desc": "使指定队伍胜利"
        },
        {
            "name": "SetGoldPerTick",
            "desc": "设置每个时间间隔获得的金币"
        },
        {
            "name": "SetGoldTickTime",
            "desc": "设置获得金币的时间周期"
        },
        {
            "name": "SetHeroMinimapIconScale",
            "desc": "设置小地图英雄图标尺寸"
        },
        {
            "name": "SetHeroRespawnEnabled",
            "desc": "设置是否使用默认英雄复活规则"
        },
        {
            "name": "SetHeroSelectionTime",
            "desc": "设置选择英雄的时间"
        },
        {
            "name": "SetHideKillMessageHeaders",
            "desc": "设置是否隐藏击杀提示。"
        },
        {
            "name": "SetNianFightStartTime",
            "desc": "设置年兽大战开始时间"
        },
        {
            "name": "SetOverlayHealthBarUnit",
            "desc": "在前端蒙版生命条上显示单位生命值"
        },
        {
            "name": "SetPostGameTime",
            "desc": "设置在结束游戏后服务器与玩家断线前的时间"
        },
        {
            "name": "SetPreGameTime",
            "desc": "设置选择英雄与开始游戏之间的时间"
        },
        {
            "name": "SetRuneMinimapIconScale",
            "desc": "缩放小地图神符图标"
        },
        {
            "name": "SetRuneSpawnTime",
            "desc": "设置神符刷新时间"
        },
        {
            "name": "SetSafeToLeave",
            "desc": "标记游戏可安全离开"
        },
        {
            "name": "SetSameHeroSelectionEnabled",
            "desc": "允许选择重复英雄"
        },
        {
            "name": "SetStartingGold",
            "desc": "设置初始金钱。"
        },
        {
            "name": "SetTimeOfDay",
            "desc": "设置一天中的时间（游戏时间）"
        },
        {
            "name": "SetTreeRegrowTime",
            "desc": "设置树重新生长的时间（秒）"
        },
        {
            "name": "SetUseBaseGoldBountyOnHeroes",
            "desc": "英雄将使用基础NPC规则来决定赏金，而不是DOTA指定规则"
        },
        {
            "name": "SetUseCustomHeroXPValues",
            "desc": "允许英雄提供指定数目的经验值（必须先设置）"
        },
        {
            "name": "SetUseUniversalShopMode",
            "desc": "为真时，所有物品当处于任意商店范围内时都能购买到，包括秘密商店物品"
        },
        {
            "name": "State_Get",
            "desc": "获取当前游戏规则状态"
        },
        {
            "name": "SetRecommendedItemsDisabled",
            "desc": "是否禁止显示商店中的推荐购买物品"
        },
        {
            "name": "SetRemoveIllusionsOnDeath",
            "desc": "使幻象死亡时立即消失，而不是延迟数秒"
        },
        {
            "name": "SetRuneEnabled",
            "desc": "设定某种神符是否启用"
        },
        {
            "name": "SetRuneSpawnFilter",
            "desc": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetStashPurchasingDisabled",
            "desc": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品"
        },
        {
            "name": "SetStickyItemDisabled",
            "desc": "隐藏快速购买处的物品"
        },
        {
            "name": "SetTopBarTeamValue",
            "desc": "设置顶端的队伍数值"
        },
        {
            "name": "SetTopBarTeamValuesOverride",
            "desc": "是否覆盖顶端的队伍数值"
        },
        {
            "name": "SetTopBarTeamValuesVisible",
            "desc": "开关顶端的队伍数值"
        },
        {
            "name": "SetTowerBackdoorProtectionEnabled",
            "desc": "开关偷塔保护"
        },
        {
            "name": "SetTrackingProjectileFilter",
            "desc": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)"
        },
        {
            "name": "SetUnseenFogOfWarEnabled",
            "desc": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖"
        },
        {
            "name": "SetUseCustomHeroLevels",
            "desc": "开关自定义英雄英雄经验表，该表必须提前被定义"
        },
        {
            "name": "SetBaseAgility",
            "desc": "设置基础敏捷"
        },
        {
            "name": "SetBaseIntellect",
            "desc": "设置基础智力"
        },
        {
            "name": "SetBaseStrength",
            "desc": "设置基础力量"
        },
        {
            "name": "SetBotDifficulty",
            "desc": "设置人机对战的难度。"
        },
        {
            "name": "SetBuybackCooldownTime",
            "desc": "设置买活冷却时间"
        },
        {
            "name": "SetBuyBackDisabledByReapersScythe",
            "desc": "设置是否被死神镰刀禁止买活"
        },
        {
            "name": "SetBuybackGoldLimitTime",
            "desc": "设置买活后金钱惩罚时间"
        },
        {
            "name": "SetCustomDeathXP",
            "desc": "GameRulesbooleanmustbesetforthistowork!}}"
        },
        {
            "name": "SetGold",
            "desc": "设置英雄拥有者的金钱"
        },
        {
            "name": "SetPlayerID",
            "desc": ""
        },
        {
            "name": "SetPrimaryAttribute",
            "desc": "设置英雄的主属性值。"
        },
        {
            "name": "SetRespawnPosition",
            "desc": ""
        },
        {
            "name": "SetRespawnsDisabled",
            "desc": "禁止英雄复活。"
        },
        {
            "name": "SetTimeUntilRespawn",
            "desc": ""
        },
        {
            "name": "ShouldDoFlyHeightVisual",
            "desc": ""
        },
        {
            "name": "SpendGold",
            "desc": "参数:int金钱,int原因"
        },
        {
            "name": "UnitCanRespawn",
            "desc": ""
        },
        {
            "name": "UpgradeAbility",
            "desc": "升级指定技能，需要英雄拥有该技能和技能点"
        },
        {
            "name": "WillReincarnate",
            "desc": ""
        },
        {
            "name": "GetOpposingTeamNumber",
            "desc": ""
        },
        {
            "name": "GetPaddedCollisionRadius",
            "desc": "获取单位碰撞体积半径。"
        },
        {
            "name": "GetPercentageBasedManaRegen",
            "desc": "获取基础魔力恢复值百分比。"
        },
        {
            "name": "GetPhysicalArmorBaseValue",
            "desc": "返回基础护甲值。"
        },
        {
            "name": "GetPhysicalArmorValue",
            "desc": "返回当前的护甲值。"
        },
        {
            "name": "GetPlayerOwner",
            "desc": "获取拥有此单位的玩家实体。"
        },
        {
            "name": "GetPlayerOwnerID",
            "desc": "获取拥有此单位的玩家ID。"
        },
        {
            "name": "GetProjectileSpeed",
            "desc": ""
        },
        {
            "name": "GetRangeToUnit",
            "desc": ""
        },
        {
            "name": "GetSecondsPerAttack",
            "desc": ""
        },
        {
            "name": "GetStatsBasedManaRegen",
            "desc": "获取因智慧而增加的魔法恢复值。"
        },
        {
            "name": "GetTeamNumber",
            "desc": "获取该单位所属的队伍ID。"
        },
        {
            "name": "GetTotalPurchasedUpgradeGoldCost",
            "desc": "获取用在升级的金钱。"
        },
        {
            "name": "GetUnitLabel",
            "desc": ""
        },
        {
            "name": "GetUnitName",
            "desc": "获取单位名称。"
        },
        {
            "name": "GiveMana",
            "desc": "给予此单位指定的魔法值。(Giffmemana!)"
        },
        {
            "name": "HasAbility",
            "desc": "以技能名称搜寻该单位是否拥有此技能。"
        },
        {
            "name": "HasAttackCapability",
            "desc": ""
        },
        {
            "name": "HasFlyingVision",
            "desc": ""
        },
        {
            "name": "HasFlyMovementCapability",
            "desc": ""
        },
        {
            "name": "HasGroundMovementCapability",
            "desc": ""
        },
        {
            "name": "HasInventory",
            "desc": ""
        },
        {
            "name": "HasItemInInventory",
            "desc": "以物品名称搜寻该单位是否拥有此物品。"
        },
        {
            "name": "HasModifier",
            "desc": "以修改器名称搜寻该单位是否拥有此修改器。"
        },
        {
            "name": "HasMovementCapability",
            "desc": ""
        },
        {
            "name": "HasScepter",
            "desc": ""
        },
        {
            "name": "Heal",
            "desc": "治疗该单位。"
        },
        {
            "name": "Hold",
            "desc": "命令单位在原地待命。"
        },
        {
            "name": "Interrupt",
            "desc": ""
        },
        {
            "name": "InterruptChannel",
            "desc": ""
        },
        {
            "name": "InterruptMotionControllers",
            "desc": "Parameterbooleandeterminesfindingclearspace."
        },
        {
            "name": "IsAlive",
            "desc": "此单位是否还活着?"
        },
        {
            "name": "IsAncient",
            "desc": "该生物是否为远古野怪?"
        },
        {
            "name": "IsAttackImmune",
            "desc": ""
        },
        {
            "name": "IsAttacking",
            "desc": ""
        },
        {
            "name": "IsAttackingEntity",
            "desc": ""
        },
        {
            "name": "IsBlind",
            "desc": ""
        },
        {
            "name": "IsBlockDisabled",
            "desc": ""
        },
        {
            "name": "IsCommandRestricted",
            "desc": ""
        },
        {
            "name": "IsControllableByAnyPlayer",
            "desc": "该单位是否为非Bot玩家所控制?"
        },
        {
            "name": "IsCreature",
            "desc": "此单位是否为怪物类型单位?"
        },
        {
            "name": "IsDeniable",
            "desc": ""
        },
        {
            "name": "IsDisarmed",
            "desc": ""
        },
        {
            "name": "IsDominated",
            "desc": ""
        },
        {
            "name": "IsEvadeDisabled",
            "desc": ""
        },
        {
            "name": "IsFrozen",
            "desc": ""
        },
        {
            "name": "IsHardDisarmed",
            "desc": ""
        },
        {
            "name": "IsHero",
            "desc": "此单位是否为英雄或英雄幻象?"
        },
        {
            "name": "IsHexed",
            "desc": ""
        },
        {
            "name": "IsIdle",
            "desc": "该生物是否处于闲置状态?"
        },
        {
            "name": "IsIllusion",
            "desc": "该单位是否为幻象单位?"
        },
        {
            "name": "IsInvisible",
            "desc": ""
        },
        {
            "name": "IsInvulnerable",
            "desc": ""
        },
        {
            "name": "IsLowAttackPriority",
            "desc": ""
        },
        {
            "name": "IsMagicImmune",
            "desc": "该单位是否魔法免疫?"
        },
        {
            "name": "IsMechanical",
            "desc": "该单位是否为机械单位?"
        },
        {
            "name": "IsMovementImpaired",
            "desc": ""
        },
        {
            "name": "IsMuted",
            "desc": ""
        },
        {
            "name": "IsNeutralUnitType",
            "desc": "该单位是否为野怪?"
        },
        {
            "name": "IsNightmared",
            "desc": ""
        },
        {
            "name": "IsOpposingTeam",
            "desc": ""
        },
        {
            "name": "IsOutOfGame",
            "desc": ""
        },
        {
            "name": "IsOwnedByAnyPlayer",
            "desc": "该单位是否为非Bot之玩家所有?"
        },
        {
            "name": "IsPhantom",
            "desc": "该单位是否为幻象单位?"
        },
        {
            "name": "IsPhantomBlocker",
            "desc": ""
        },
        {
            "name": "IsPhased",
            "desc": "是否在相位状态?"
        },
        {
            "name": "IsPositionInRange",
            "desc": "是否在某点的范围内"
        },
        {
            "name": "IsRangedAttacker",
            "desc": "该单位攻击类型是否为远程攻击?"
        },
        {
            "name": "IsRealHero",
            "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。"
        },
        {
            "name": "IsRooted",
            "desc": ""
        },
        {
            "name": "IsSilenced",
            "desc": "该单位是否被沉默?"
        },
        {
            "name": "IsSoftDisarmed",
            "desc": ""
        },
        {
            "name": "IsSpeciallyDeniable",
            "desc": ""
        },
        {
            "name": "IsStunned",
            "desc": "该单位是否被晕眩了?"
        },
        {
            "name": "IsSummoned",
            "desc": "此单位是否为召唤物?"
        },
        {
            "name": "IsTower",
            "desc": "此单位是否为塔?"
        },
        {
            "name": "IsUnableToMiss",
            "desc": ""
        },
        {
            "name": "IsUnselectable",
            "desc": ""
        },
        {
            "name": "Kill",
            "desc": "杀死一个单位，参数为使用的技能与攻击者。"
        },
        {
            "name": "MakeIllusion",
            "desc": ""
        },
        {
            "name": "MakePhantomBlocker",
            "desc": ""
        },
        {
            "name": "MakeVisibleDueToAttack",
            "desc": ""
        },
        {
            "name": "MakeVisibleToTeam",
            "desc": ""
        },
        {
            "name": "ManageModelChanges",
            "desc": ""
        },
        {
            "name": "ModifyHealth",
            "desc": "设置血量为所指定的值"
        },
        {
            "name": "MoveToNPC",
            "desc": "移动至指定的单位。"
        },
        {
            "name": "MoveToNPCToGiveItem",
            "desc": "将身上的物品丢给指定的单位。"
        },
        {
            "name": "MoveToPosition",
            "desc": "移动到指定的位置。"
        },
        {
            "name": "MoveToPositionAggressive",
            "desc": "移动到指定的位置。"
        },
        {
            "name": "MoveToTargetToAttack",
            "desc": "移动至指定的单位，并且发动攻击。"
        },
        {
            "name": "NoHealthBar",
            "desc": ""
        },
        {
            "name": "NoTeamMoveTo",
            "desc": ""
        },
        {
            "name": "NoTeamSelect",
            "desc": ""
        },
        {
            "name": "NotifyWearablesOfModelChange",
            "desc": "通知模型的可穿戴性发生了改变。"
        },
        {
            "name": "NotOnMinimap",
            "desc": ""
        },
        {
            "name": "NotOnMinimapForEnemies",
            "desc": ""
        },
        {
            "name": "NoUnitCollision",
            "desc": ""
        },
        {
            "name": "PassivesDisabled",
            "desc": ""
        },
        {
            "name": "PerformAttack",
            "desc": "对一单位执行攻击。"
        },
        {
            "name": "PickupDroppedItem",
            "desc": "捡起掉落的物品。"
        },
        {
            "name": "PickupRune",
            "desc": "捡起神符。"
        },
        {
            "name": "ProvidesVision",
            "desc": ""
        },
        {
            "name": "Purge",
            "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。"
        },
        {
            "name": "ReduceMana",
            "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。"
        },
        {
            "name": "RemoveAbility",
            "desc": "以技能名称移除该单位相应的技能。"
        },
        {
            "name": "RemoveGesture",
            "desc": "移除某个动作。"
        },
        {
            "name": "RemoveHorizontalMotionController",
            "desc": "移除水平方向上的运动控制器。"
        },
        {
            "name": "RemoveItem",
            "desc": "将该单位库存中的过期物品移除。"
        },
        {
            "name": "RemoveModifierByName",
            "desc": "以名称移除修改器。"
        },
        {
            "name": "RemoveModifierByNameAndCaster",
            "desc": "以施法者与修改器名称移除修改器。"
        },
        {
            "name": "RemoveNoDraw",
            "desc": "Removethenodrawflag."
        },
        {
            "name": "RemoveVerticalMotionController",
            "desc": "移除垂直方向上的运动控制器。"
        },
        {
            "name": "RespawnUnit",
            "desc": "复活该单位。"
        },
        {
            "name": "TakeItem",
            "desc": "隐藏物品"
        },
        {
            "name": "SellItem",
            "desc": "卖出该单位的物品。"
        },
        {
            "name": "SetAbilityByIndex",
            "desc": "改变技能Index"
        },
        {
            "name": "SetAcquisitionRange",
            "desc": "Setsacquisitionrange"
        },
        {
            "name": "SetAdditionalBattleMusicWeight",
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。"
        },
        {
            "name": "SetAggroTarget",
            "desc": "将这个单位的仇恨目标设为某个单位。"
        },
        {
            "name": "SetAttackCapability",
            "desc": ""
        },
        {
            "name": "SetAttacking",
            "desc": ""
        },
        {
            "name": "SetBaseAttackTime",
            "desc": ""
        },
        {
            "name": "SetBaseDamageMax",
            "desc": "设置基础最大攻击力。"
        },
        {
            "name": "SetBaseDamageMin",
            "desc": "设置基础最小攻击力。"
        },
        {
            "name": "SetBaseHealthRegen",
            "desc": ""
        },
        {
            "name": "SetBaseMagicalResistanceValue",
            "desc": "设置基础魔法抗性值。"
        },
        {
            "name": "SetBaseManaRegen",
            "desc": "设置基础魔力恢复值。"
        },
        {
            "name": "SetBaseMaxHealth",
            "desc": "设置基础最大血量。"
        },
        {
            "name": "SetBaseMoveSpeed",
            "desc": "设置基础跑速。"
        },
        {
            "name": "SetCanSellItems",
            "desc": "设置这个单位是否能出售物品。"
        },
        {
            "name": "SetControllableByPlayer",
            "desc": "以玩家ID设置该单位的控制权。"
        },
        {
            "name": "SetCursorCastTarget",
            "desc": ""
        },
        {
            "name": "SetCursorPosition",
            "desc": ""
        },
        {
            "name": "SetCursorTargetingNothing",
            "desc": ""
        },
        {
            "name": "SetDayTimeVisionRange",
            "desc": "设置基础的视间视野距离。"
        },
        {
            "name": "SetDeathXP",
            "desc": "设置该单位的击杀经验值奖赏。"
        },
        {
            "name": "SetDeathXP",
            "desc": "SettheXPbountyonthisunit"
        },
        {
            "name": "SetForceAttackTarget",
            "desc": ""
        },
        {
            "name": "SetHasInventory",
            "desc": ""
        },
        {
            "name": "SetHullRadius",
            "desc": "设置该单位的碰撞半径。"
        },
        {
            "name": "SetIdleAcquire",
            "desc": ""
        },
        {
            "name": "SetInitialGoalEntity",
            "desc": "设置该单位的初始路径点。"
        },
        {
            "name": "SetMana",
            "desc": "设置该单位的魔力值。"
        },
        {
            "name": "SetMaximumGoldBounty",
            "desc": "设置该单位的最高赏金。"
        },
        {
            "name": "SetMinimumGoldBounty",
            "desc": "设置该单位的最低赏金。"
        },
        {
            "name": "SetModifierStackCount",
            "desc": "Setsthestackcountofagivenmodifier."
        },
        {
            "name": "SetMoveCapability",
            "desc": ""
        },
        {
            "name": "SetMustReachEachGoalEntity",
            "desc": "设置该单位是否要走访每个路径点。"
        },
        {
            "name": "SetNeverMoveToClearSpace",
            "desc": "如果设置为True，则不会将该单位移动到净空的地方。"
        },
        {
            "name": "SetNightTimeVisionRange",
            "desc": "设置基础夜间视野距离。"
        },
        {
            "name": "SetOrigin",
            "desc": "设置单位位置。"
        },
        {
            "name": "SetOriginalModel",
            "desc": "设置单位原模型。"
        },
        {
            "name": "SetPhysicalArmorBaseValue",
            "desc": "设置基础护甲值。"
        },
        {
            "name": "SetRangedProjectileName",
            "desc": ""
        },
        {
            "name": "SetRenderAlpha",
            "desc": ""
        },
        {
            "name": "SetStolenScepter",
            "desc": ""
        },
        {
            "name": "SetUnitName",
            "desc": ""
        },
        {
            "name": "ShouldIdleAcquire",
            "desc": ""
        },
        {
            "name": "SpendMana",
            "desc": "消耗魔力，可以用在技能消耗或使用物品。"
        },
        {
            "name": "StartGesture",
            "desc": "向单位添加给定的动作。"
        },
        {
            "name": "StartGestureWithPlaybackRate",
            "desc": "向单位添加给定的动作，带有自定义的动作速度。"
        },
        {
            "name": "Stop",
            "desc": "使该单位暂停当前动作。"
        },
        {
            "name": "SwapAbilities",
            "desc": "交换两个技能的字段，并设置其是否生效。"
        },
        {
            "name": "SwapItems",
            "desc": "交换两个物品的位置。"
        },
        {
            "name": "TimeUntilNextAttack",
            "desc": ""
        },
        {
            "name": "TriggerModifierDodge",
            "desc": ""
        },
        {
            "name": "TriggerSpellAbsorb",
            "desc": "判断传递的技能是否会触发该单位的技能吸收"
        },
        {
            "name": "TriggerSpellReflect",
            "desc": "触发类似于清莲宝珠一样的效果。"
        },
        {
            "name": "UnitCanRespawn",
            "desc": ""
        }
    ],
    "CRPG_Unit": [
        {
            "name": "ActionState",
            "desc": "返回该单位的ActionState物体"
        },
        {
            "name": "ClearMovementTarget",
            "desc": "清除移动目标实体或点"
        },
        {
            "name": "FindSensedEnemies",
            "desc": "返回该单位视野锥或感应球体内所有敌方单位列表"
        },
        {
            "name": "GetMaxSpeed",
            "desc": "返回最大移动速度"
        },
        {
            "name": "GetMaxStamina",
            "desc": "返回最大耐力值"
        },
        {
            "name": "GetMovementTargetEntity",
            "desc": "返回移动目标实体，如果已经设置移动目标实体"
        },
        {
            "name": "GetSensingSphereRange",
            "desc": "返回单位的360度感应球体范围"
        },
        {
            "name": "GetSightConeAngle",
            "desc": "返回单位视野锥的夹角"
        },
        {
            "name": "GetSightConeRange",
            "desc": "返回单位视野锥的范围"
        },
        {
            "name": "GetStamina",
            "desc": "返回当前耐力值"
        },
        {
            "name": "GetTurnRate",
            "desc": "返回单位转身速度，单位为度每秒"
        },
        {
            "name": "GetUnitName",
            "desc": "返回单位名字"
        },
        {
            "name": "GrantItem",
            "desc": "授予单位物品"
        },
        {
            "name": "IsBlocking",
            "desc": "单位是否正在格挡（不确定）"
        },
        {
            "name": "IsFacing",
            "desc": "参数为（Vector目标点，float允许角度差）如果单位朝向目标角度低于角度差则返还true"
        },
        {
            "name": "SetBlocking",
            "desc": "设置单位格挡状态（不确定）"
        },
        {
            "name": "SetMaxSpeed",
            "desc": "设置单位最大速度"
        },
        {
            "name": "SetMovementTargetEntity",
            "desc": "参数为（目标实体，跟随范围）单位向目标实体移动直到抵达指定范围内"
        },
        {
            "name": "SetMovementTargetPosition",
            "desc": "参数为（目标点，跟随范围）单位向目标点移动直到抵达指定范围内"
        },
        {
            "name": "SetSensingSphereRange",
            "desc": "设置单位的360度感应球体范围"
        },
        {
            "name": "SetSightConeAngle",
            "desc": "设置单位的视野锥夹角"
        },
        {
            "name": "SetSightConeRange",
            "desc": "设置单位的视野锥范围"
        },
        {
            "name": "SetTurnRate",
            "desc": "设置单位转向速率（度每秒）"
        },
        {
            "name": "GetDeathGoldCost",
            "desc": "返回死亡损失金钱"
        },
        {
            "name": "GetDeaths",
            "desc": "返回死亡次数"
        },
        {
            "name": "GetDenies",
            "desc": "返回反补次数"
        },
        {
            "name": "GetGold",
            "desc": "返回该英雄拥有者所有的金钱数量"
        },
        {
            "name": "GetGoldBounty",
            "desc": ""
        },
        {
            "name": "GetHealthRegen",
            "desc": "返回每秒生命回复，英雄生命回复受到属性影响"
        },
        {
            "name": "GetIncreasedAttackSpeed",
            "desc": "返回攻击速度增加值（IAS），英雄攻击速度受到敏捷影响"
        },
        {
            "name": "GetIntellect",
            "desc": "返回智力值"
        },
        {
            "name": "GetIntellectGain",
            "desc": "返回智力成长"
        },
        {
            "name": "GetKills",
            "desc": "返回击杀数，数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "GetLastHits",
            "desc": "返回正补数，数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "GetManaRegen",
            "desc": "返回每秒魔法回复，英雄魔法回复受到属性影响"
        },
        {
            "name": "GetMostRecentDamageTime",
            "desc": "返回最近一次伤害时间"
        },
        {
            "name": "GetMultipleKillCount",
            "desc": "返回多杀计数"
        },
        {
            "name": "GetNumAttackers",
            "desc": ""
        },
        {
            "name": "GetNumItemsInInventory",
            "desc": "返回玩家拥有的物品数量。"
        },
        {
            "name": "GetNumItemsInStash",
            "desc": "返回玩家储藏处内"
        },
        {
            "name": "GetPhysicalArmorValue",
            "desc": "返回护甲值，英雄护甲受到属性影响"
        },
        {
            "name": "GetPlayerID",
            "desc": "返回英雄拥有者的ID"
        },
        {
            "name": "GetPrimaryAttribute",
            "desc": "返回英雄主要属性，0=力量,1=敏捷,2=智力."
        },
        {
            "name": "GetPrimaryStatValue",
            "desc": "返回主属性值"
        },
        {
            "name": "GetRespawnsDisabled",
            "desc": "返回该英雄是否被禁止复活。"
        },
        {
            "name": "GetRespawnTime",
            "desc": "返回复活时间"
        },
        {
            "name": "GetStatsBasedManaRegen",
            "desc": "返回属性提供的魔法回复"
        },
        {
            "name": "GetStreak",
            "desc": "返回连杀数"
        },
        {
            "name": "GetStrength",
            "desc": "返回力量值"
        },
        {
            "name": "GetStrengthGain",
            "desc": "返回力量成长"
        },
        {
            "name": "GetTimeUntilRespawn",
            "desc": "返回复活所需的时间"
        },
        {
            "name": "GetTogglableWearable",
            "desc": "返回物品栏中可佩带（可切换）的物品。"
        },
        {
            "name": "HasAnyAvailableInventorySpace",
            "desc": "返回是否有可用物品栏空间"
        },
        {
            "name": "HasFlyingVision",
            "desc": "返回是否拥有空中视野"
        },
        {
            "name": "HasOwnerAbandoned",
            "desc": ""
        },
        {
            "name": "HasRoomForItem",
            "desc": "参数:constcharpItemName,boolbIncludeStashCombines,boolbAllowSelling"
        },
        {
            "name": "HeroLevelUp",
            "desc": "升级英雄,参数决定是否播放升级效果."
        },
        {
            "name": "IncrementAssists",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementDeaths",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementDenies",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementKills",
            "desc": "增加击杀数，击杀者为当前英雄，传入ID为受害者ID。数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementLastHitMultikill",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementLastHits",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementLastHitStreak",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementNearbyCreepDeaths",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IncrementStreak",
            "desc": "数值存储在玩家资源(PlayerResource)中"
        },
        {
            "name": "IsBuybackDisabledByReapersScythe",
            "desc": "是否被死神镰刀禁止买活"
        },
        {
            "name": "IsReincarnating",
            "desc": "是否处于重生中"
        },
        {
            "name": "KilledHero",
            "desc": "参数:英雄,加害者"
        },
        {
            "name": "ModifyAgility",
            "desc": "增加指定值到英雄基础敏捷，随后调用CalculateStatBonus"
        },
        {
            "name": "ModifyGold",
            "desc": "给予英雄金钱。参数:int金钱数,bool是否为可靠金钱,int原因"
        },
        {
            "name": "ModifyIntellect",
            "desc": "增加指定值到英雄基础智力，随后调用CalculateStatBonus"
        },
        {
            "name": "ModifyStrength",
            "desc": "增加指定值到英雄基础力量，随后调用CalculateStatBonus"
        },
        {
            "name": "PerformTaunt",
            "desc": ""
        },
        {
            "name": "RecordLastHit",
            "desc": ""
        },
        {
            "name": "RespawnHero",
            "desc": ""
        },
        {
            "name": "SetAbilityPoints",
            "desc": "设置当前可用技能点"
        },
        {
            "name": "SetBaseAgility",
            "desc": "设置基础敏捷"
        },
        {
            "name": "SetBaseIntellect",
            "desc": "设置基础智力"
        },
        {
            "name": "SetBaseStrength",
            "desc": "设置基础力量"
        },
        {
            "name": "SetBotDifficulty",
            "desc": "设置人机对战的难度。"
        },
        {
            "name": "SetBuybackCooldownTime",
            "desc": "设置买活冷却时间"
        },
        {
            "name": "SetBuyBackDisabledByReapersScythe",
            "desc": "设置是否被死神镰刀禁止买活"
        },
        {
            "name": "SetBuybackGoldLimitTime",
            "desc": "设置买活后金钱惩罚时间"
        },
        {
            "name": "SetCustomDeathXP",
            "desc": "GameRulesbooleanmustbesetforthistowork!}}"
        },
        {
            "name": "SetGold",
            "desc": "设置英雄拥有者的金钱"
        },
        {
            "name": "SetPlayerID",
            "desc": ""
        },
        {
            "name": "SetPrimaryAttribute",
            "desc": "设置英雄的主属性值。"
        },
        {
            "name": "SetRespawnPosition",
            "desc": ""
        },
        {
            "name": "SetRespawnsDisabled",
            "desc": "禁止英雄复活。"
        },
        {
            "name": "SetTimeUntilRespawn",
            "desc": ""
        },
        {
            "name": "ShouldDoFlyHeightVisual",
            "desc": ""
        },
        {
            "name": "SpendGold",
            "desc": "参数:int金钱,int原因"
        },
        {
            "name": "UnitCanRespawn",
            "desc": ""
        },
        {
            "name": "UpgradeAbility",
            "desc": "升级指定技能，需要英雄拥有该技能和技能点"
        },
        {
            "name": "WillReincarnate",
            "desc": ""
        },
        {
            "name": "GetOpposingTeamNumber",
            "desc": ""
        },
        {
            "name": "GetPaddedCollisionRadius",
            "desc": "获取单位碰撞体积半径。"
        },
        {
            "name": "GetPercentageBasedManaRegen",
            "desc": "获取基础魔力恢复值百分比。"
        },
        {
            "name": "GetPhysicalArmorBaseValue",
            "desc": "返回基础护甲值。"
        },
        {
            "name": "GetPhysicalArmorValue",
            "desc": "返回当前的护甲值。"
        },
        {
            "name": "GetPlayerOwner",
            "desc": "获取拥有此单位的玩家实体。"
        },
        {
            "name": "GetPlayerOwnerID",
            "desc": "获取拥有此单位的玩家ID。"
        },
        {
            "name": "GetProjectileSpeed",
            "desc": ""
        },
        {
            "name": "GetRangeToUnit",
            "desc": ""
        },
        {
            "name": "GetSecondsPerAttack",
            "desc": ""
        },
        {
            "name": "GetStatsBasedManaRegen",
            "desc": "获取因智慧而增加的魔法恢复值。"
        },
        {
            "name": "GetTeamNumber",
            "desc": "获取该单位所属的队伍ID。"
        },
        {
            "name": "GetTotalPurchasedUpgradeGoldCost",
            "desc": "获取用在升级的金钱。"
        },
        {
            "name": "GetUnitLabel",
            "desc": ""
        },
        {
            "name": "GetUnitName",
            "desc": "获取单位名称。"
        },
        {
            "name": "GiveMana",
            "desc": "给予此单位指定的魔法值。(Giffmemana!)"
        },
        {
            "name": "HasAbility",
            "desc": "以技能名称搜寻该单位是否拥有此技能。"
        },
        {
            "name": "HasAttackCapability",
            "desc": ""
        },
        {
            "name": "HasFlyingVision",
            "desc": ""
        },
        {
            "name": "HasFlyMovementCapability",
            "desc": ""
        },
        {
            "name": "HasGroundMovementCapability",
            "desc": ""
        },
        {
            "name": "HasInventory",
            "desc": ""
        },
        {
            "name": "HasItemInInventory",
            "desc": "以物品名称搜寻该单位是否拥有此物品。"
        },
        {
            "name": "HasModifier",
            "desc": "以修改器名称搜寻该单位是否拥有此修改器。"
        },
        {
            "name": "HasMovementCapability",
            "desc": ""
        },
        {
            "name": "HasScepter",
            "desc": ""
        },
        {
            "name": "Heal",
            "desc": "治疗该单位。"
        },
        {
            "name": "Hold",
            "desc": "命令单位在原地待命。"
        },
        {
            "name": "Interrupt",
            "desc": ""
        },
        {
            "name": "InterruptChannel",
            "desc": ""
        },
        {
            "name": "InterruptMotionControllers",
            "desc": "Parameterbooleandeterminesfindingclearspace."
        },
        {
            "name": "IsAlive",
            "desc": "此单位是否还活着?"
        },
        {
            "name": "IsAncient",
            "desc": "该生物是否为远古野怪?"
        },
        {
            "name": "IsAttackImmune",
            "desc": ""
        },
        {
            "name": "IsAttacking",
            "desc": ""
        },
        {
            "name": "IsAttackingEntity",
            "desc": ""
        },
        {
            "name": "IsBlind",
            "desc": ""
        },
        {
            "name": "IsBlockDisabled",
            "desc": ""
        },
        {
            "name": "IsCommandRestricted",
            "desc": ""
        },
        {
            "name": "IsControllableByAnyPlayer",
            "desc": "该单位是否为非Bot玩家所控制?"
        },
        {
            "name": "IsCreature",
            "desc": "此单位是否为怪物类型单位?"
        },
        {
            "name": "IsDeniable",
            "desc": ""
        },
        {
            "name": "IsDisarmed",
            "desc": ""
        },
        {
            "name": "IsDominated",
            "desc": ""
        },
        {
            "name": "IsEvadeDisabled",
            "desc": ""
        },
        {
            "name": "IsFrozen",
            "desc": ""
        },
        {
            "name": "IsHardDisarmed",
            "desc": ""
        },
        {
            "name": "IsHero",
            "desc": "此单位是否为英雄或英雄幻象?"
        },
        {
            "name": "IsHexed",
            "desc": ""
        },
        {
            "name": "IsIdle",
            "desc": "该生物是否处于闲置状态?"
        },
        {
            "name": "IsIllusion",
            "desc": "该单位是否为幻象单位?"
        },
        {
            "name": "IsInvisible",
            "desc": ""
        },
        {
            "name": "IsInvulnerable",
            "desc": ""
        },
        {
            "name": "IsLowAttackPriority",
            "desc": ""
        },
        {
            "name": "IsMagicImmune",
            "desc": "该单位是否魔法免疫?"
        },
        {
            "name": "IsMechanical",
            "desc": "该单位是否为机械单位?"
        },
        {
            "name": "IsMovementImpaired",
            "desc": ""
        },
        {
            "name": "IsMuted",
            "desc": ""
        },
        {
            "name": "IsNeutralUnitType",
            "desc": "该单位是否为野怪?"
        },
        {
            "name": "IsNightmared",
            "desc": ""
        },
        {
            "name": "IsOpposingTeam",
            "desc": ""
        },
        {
            "name": "IsOutOfGame",
            "desc": ""
        },
        {
            "name": "IsOwnedByAnyPlayer",
            "desc": "该单位是否为非Bot之玩家所有?"
        },
        {
            "name": "IsPhantom",
            "desc": "该单位是否为幻象单位?"
        },
        {
            "name": "IsPhantomBlocker",
            "desc": ""
        },
        {
            "name": "IsPhased",
            "desc": "是否在相位状态?"
        },
        {
            "name": "IsPositionInRange",
            "desc": "是否在某点的范围内"
        },
        {
            "name": "IsRangedAttacker",
            "desc": "该单位攻击类型是否为远程攻击?"
        },
        {
            "name": "IsRealHero",
            "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。"
        },
        {
            "name": "IsRooted",
            "desc": ""
        },
        {
            "name": "IsSilenced",
            "desc": "该单位是否被沉默?"
        },
        {
            "name": "IsSoftDisarmed",
            "desc": ""
        },
        {
            "name": "IsSpeciallyDeniable",
            "desc": ""
        },
        {
            "name": "IsStunned",
            "desc": "该单位是否被晕眩了?"
        },
        {
            "name": "IsSummoned",
            "desc": "此单位是否为召唤物?"
        },
        {
            "name": "IsTower",
            "desc": "此单位是否为塔?"
        },
        {
            "name": "IsUnableToMiss",
            "desc": ""
        },
        {
            "name": "IsUnselectable",
            "desc": ""
        },
        {
            "name": "Kill",
            "desc": "杀死一个单位，参数为使用的技能与攻击者。"
        },
        {
            "name": "MakeIllusion",
            "desc": ""
        },
        {
            "name": "MakePhantomBlocker",
            "desc": ""
        },
        {
            "name": "MakeVisibleDueToAttack",
            "desc": ""
        },
        {
            "name": "MakeVisibleToTeam",
            "desc": ""
        },
        {
            "name": "ManageModelChanges",
            "desc": ""
        },
        {
            "name": "ModifyHealth",
            "desc": "设置血量为所指定的值"
        },
        {
            "name": "MoveToNPC",
            "desc": "移动至指定的单位。"
        },
        {
            "name": "MoveToNPCToGiveItem",
            "desc": "将身上的物品丢给指定的单位。"
        },
        {
            "name": "MoveToPosition",
            "desc": "移动到指定的位置。"
        },
        {
            "name": "MoveToPositionAggressive",
            "desc": "移动到指定的位置。"
        },
        {
            "name": "MoveToTargetToAttack",
            "desc": "移动至指定的单位，并且发动攻击。"
        },
        {
            "name": "NoHealthBar",
            "desc": ""
        },
        {
            "name": "NoTeamMoveTo",
            "desc": ""
        },
        {
            "name": "NoTeamSelect",
            "desc": ""
        },
        {
            "name": "NotifyWearablesOfModelChange",
            "desc": "通知模型的可穿戴性发生了改变。"
        },
        {
            "name": "NotOnMinimap",
            "desc": ""
        },
        {
            "name": "NotOnMinimapForEnemies",
            "desc": ""
        },
        {
            "name": "NoUnitCollision",
            "desc": ""
        },
        {
            "name": "PassivesDisabled",
            "desc": ""
        },
        {
            "name": "PerformAttack",
            "desc": "对一单位执行攻击。"
        },
        {
            "name": "PickupDroppedItem",
            "desc": "捡起掉落的物品。"
        },
        {
            "name": "PickupRune",
            "desc": "捡起神符。"
        },
        {
            "name": "ProvidesVision",
            "desc": ""
        },
        {
            "name": "Purge",
            "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。"
        },
        {
            "name": "ReduceMana",
            "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。"
        },
        {
            "name": "RemoveAbility",
            "desc": "以技能名称移除该单位相应的技能。"
        },
        {
            "name": "RemoveGesture",
            "desc": "移除某个动作。"
        },
        {
            "name": "RemoveHorizontalMotionController",
            "desc": "移除水平方向上的运动控制器。"
        },
        {
            "name": "RemoveItem",
            "desc": "将该单位库存中的过期物品移除。"
        },
        {
            "name": "RemoveModifierByName",
            "desc": "以名称移除修改器。"
        },
        {
            "name": "RemoveModifierByNameAndCaster",
            "desc": "以施法者与修改器名称移除修改器。"
        },
        {
            "name": "RemoveNoDraw",
            "desc": "Removethenodrawflag."
        },
        {
            "name": "RemoveVerticalMotionController",
            "desc": "移除垂直方向上的运动控制器。"
        },
        {
            "name": "RespawnUnit",
            "desc": "复活该单位。"
        },
        {
            "name": "TakeItem",
            "desc": "隐藏物品"
        },
        {
            "name": "SellItem",
            "desc": "卖出该单位的物品。"
        },
        {
            "name": "SetAbilityByIndex",
            "desc": "改变技能Index"
        },
        {
            "name": "SetAcquisitionRange",
            "desc": "Setsacquisitionrange"
        },
        {
            "name": "SetAdditionalBattleMusicWeight",
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。"
        },
        {
            "name": "SetAggroTarget",
            "desc": "将这个单位的仇恨目标设为某个单位。"
        },
        {
            "name": "SetAttackCapability",
            "desc": ""
        },
        {
            "name": "SetAttacking",
            "desc": ""
        },
        {
            "name": "SetBaseAttackTime",
            "desc": ""
        },
        {
            "name": "SetBaseDamageMax",
            "desc": "设置基础最大攻击力。"
        },
        {
            "name": "SetBaseDamageMin",
            "desc": "设置基础最小攻击力。"
        },
        {
            "name": "SetBaseHealthRegen",
            "desc": ""
        },
        {
            "name": "SetBaseMagicalResistanceValue",
            "desc": "设置基础魔法抗性值。"
        },
        {
            "name": "SetBaseManaRegen",
            "desc": "设置基础魔力恢复值。"
        },
        {
            "name": "SetBaseMaxHealth",
            "desc": "设置基础最大血量。"
        },
        {
            "name": "SetBaseMoveSpeed",
            "desc": "设置基础跑速。"
        },
        {
            "name": "SetCanSellItems",
            "desc": "设置这个单位是否能出售物品。"
        },
        {
            "name": "SetControllableByPlayer",
            "desc": "以玩家ID设置该单位的控制权。"
        },
        {
            "name": "SetCursorCastTarget",
            "desc": ""
        },
        {
            "name": "SetCursorPosition",
            "desc": ""
        },
        {
            "name": "SetCursorTargetingNothing",
            "desc": ""
        },
        {
            "name": "SetDayTimeVisionRange",
            "desc": "设置基础的视间视野距离。"
        },
        {
            "name": "SetDeathXP",
            "desc": "设置该单位的击杀经验值奖赏。"
        },
        {
            "name": "SetDeathXP",
            "desc": "SettheXPbountyonthisunit"
        },
        {
            "name": "SetForceAttackTarget",
            "desc": ""
        },
        {
            "name": "SetHasInventory",
            "desc": ""
        },
        {
            "name": "SetHullRadius",
            "desc": "设置该单位的碰撞半径。"
        },
        {
            "name": "SetIdleAcquire",
            "desc": ""
        },
        {
            "name": "SetInitialGoalEntity",
            "desc": "设置该单位的初始路径点。"
        },
        {
            "name": "SetMana",
            "desc": "设置该单位的魔力值。"
        },
        {
            "name": "SetMaximumGoldBounty",
            "desc": "设置该单位的最高赏金。"
        },
        {
            "name": "SetMinimumGoldBounty",
            "desc": "设置该单位的最低赏金。"
        },
        {
            "name": "SetModifierStackCount",
            "desc": "Setsthestackcountofagivenmodifier."
        },
        {
            "name": "SetMoveCapability",
            "desc": ""
        },
        {
            "name": "SetMustReachEachGoalEntity",
            "desc": "设置该单位是否要走访每个路径点。"
        },
        {
            "name": "SetNeverMoveToClearSpace",
            "desc": "如果设置为True，则不会将该单位移动到净空的地方。"
        },
        {
            "name": "SetNightTimeVisionRange",
            "desc": "设置基础夜间视野距离。"
        },
        {
            "name": "SetOrigin",
            "desc": "设置单位位置。"
        },
        {
            "name": "SetOriginalModel",
            "desc": "设置单位原模型。"
        },
        {
            "name": "SetPhysicalArmorBaseValue",
            "desc": "设置基础护甲值。"
        },
        {
            "name": "SetRangedProjectileName",
            "desc": ""
        },
        {
            "name": "SetRenderAlpha",
            "desc": ""
        },
        {
            "name": "SetStolenScepter",
            "desc": ""
        },
        {
            "name": "SetUnitName",
            "desc": ""
        },
        {
            "name": "ShouldIdleAcquire",
            "desc": ""
        },
        {
            "name": "SpendMana",
            "desc": "消耗魔力，可以用在技能消耗或使用物品。"
        },
        {
            "name": "StartGesture",
            "desc": "向单位添加给定的动作。"
        },
        {
            "name": "StartGestureWithPlaybackRate",
            "desc": "向单位添加给定的动作，带有自定义的动作速度。"
        },
        {
            "name": "Stop",
            "desc": "使该单位暂停当前动作。"
        },
        {
            "name": "SwapAbilities",
            "desc": "交换两个技能的字段，并设置其是否生效。"
        },
        {
            "name": "SwapItems",
            "desc": "交换两个物品的位置。"
        },
        {
            "name": "TimeUntilNextAttack",
            "desc": ""
        },
        {
            "name": "TriggerModifierDodge",
            "desc": ""
        },
        {
            "name": "TriggerSpellAbsorb",
            "desc": "判断传递的技能是否会触发该单位的技能吸收"
        },
        {
            "name": "TriggerSpellReflect",
            "desc": "触发类似于清莲宝珠一样的效果。"
        },
        {
            "name": "UnitCanRespawn",
            "desc": ""
        }
    ]
}