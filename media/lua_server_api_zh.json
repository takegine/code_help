{
    "Globals": [
        {
            "desc": "为指定队伍增加临时视野(nTeamID,vLocation,flRadius,flDuration,bObstructedVision)",
            "func": "( int_1, Vector_2, float_3, float_4, bool_5 )",
            "return": "void",
            "name": "AddFOWViewer"
        },
        {
            "desc": "返回两个偏航角度之差",
            "func": "( float_1, float_2 )",
            "return": "float",
            "name": "AngleDiff"
        },
        {
            "desc": "Generate a vector given a QAngles",
            "func": "( QAngle_1 )",
            "return": "Vector",
            "name": "AnglesToVector"
        },
        {
            "desc": "在服务器日志文件上增加一个string",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "AppendToLogFile"
        },
        {
            "desc": "对单位造成伤害，Table输入：victim,attacker,damage,damage_type,damage_flags,ability",
            "func": "( handle_1 )",
            "return": "float",
            "name": "ApplyDamage"
        },
        {
            "desc": "构造一个四元数，表现出围绕给定的vector轴线的旋转角",
            "func": "( Vector_1, float_2 )",
            "return": "Quaternion",
            "name": "AxisAngleToQuaternion"
        },
        {
            "desc": "计算实体的OBB上最接近的两个点。",
            "func": "( handle_1, Vector_2 )",
            "return": "Vector",
            "name": "CalcClosestPointOnEntityOBB"
        },
        {
            "desc": "计算两个实体的OBB间距离。如果返回值为负，代表输入值有错误。返回值为0则代表OBB互相重叠。",
            "func": "( handle_1, handle_2 )",
            "return": "float",
            "name": "CalcDistanceBetweenEntityOBB"
        },
        {
            "desc": "",
            "func": "( Vector_1, Vector_2, Vector_3 )",
            "return": "float",
            "name": "CalcDistanceToLineSegment2D"
        },
        {
            "desc": "为特定的实体创建所有输入/输出事件",
            "func": "( ehandle_1 )",
            "return": "void",
            "name": "CancelEntityIOEvents"
        },
        {
            "desc": "CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit.",
            "func": "( int_1, handle_2 )",
            "return": "void",
            "name": "CenterCameraOnUnit"
        },
        {
            "desc": "清除自定义血条颜色。",
            "func": "( int_1 )",
            "return": "void",
            "name": "ClearTeamCustomHealthbarColor"
        },
        {
            "desc": "(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object.",
            "func": "( handle_1, handle_2, Vector_3, Vector_4, float_5, int_6 )",
            "return": "handle",
            "name": "CreateDamageInfo"
        },
        {
            "desc": "传递table-输入：实体，效果",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "CreateEffect"
        },
        {
            "desc": "生成一个HTTP请求。",
            "func": "( string_1, string_2 )",
            "return": "handle",
            "name": "CreateHTTPRequest"
        },
        {
            "desc": "Create an HTTP request.",
            "func": "( string_1, string_2 )",
            "return": "handle",
            "name": "CreateHTTPRequestScriptVM"
        },
        {
            "desc": "用DOTA英雄的dota_npc_units.txt中的名字创建它并把它设为给定玩家的控制英雄",
            "func": "( string_1, handle_2 )",
            "return": "handle",
            "name": "CreateHeroForPlayer"
        },
        {
            "desc": "Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) Supported keys: outgoing_damageincoming_damagebounty_basebounty_growthoutgoing_damage_structureoutgoing_damage_roshan",
            "func": "( handle_1, handle_2, handle_3, int_4, int_5, bool_6, bool_7 )",
            "return": "table",
            "name": "CreateIllusions"
        },
        {
            "desc": "用类名称item_name创建一个owner可以使用的物品",
            "func": "( string_1, handle_2, handle_3 )",
            "return": "handle",
            "name": "CreateItem"
        },
        {
            "desc": "在给定地点生成一个实际物品。目标地点可以是空中(但这不会清空这个位置)",
            "func": "( Vector_1, handle_2 )",
            "return": "handle",
            "name": "CreateItemOnPositionForLaunch"
        },
        {
            "desc": "在给定位置创建一个可见的物品",
            "func": "( Vector_1, handle_2 )",
            "return": "handle",
            "name": "CreateItemOnPositionSync"
        },
        {
            "desc": "生成一个不和任何NPC相关联的Modifier。(hCaster,hAbility,modifierName,paramTable,vOrigin,nTeamNumber,bPhantomBlocker)",
            "func": "( handle_1, handle_2, string_3, handle_4, Vector_5, int_6, bool_7 )",
            "return": "handle",
            "name": "CreateModifierThinker"
        },
        {
            "desc": "Create a rune of the specified type (vLocation, iRuneType).",
            "func": "( Vector_1, int_2 )",
            "return": "handle",
            "name": "CreateRune"
        },
        {
            "desc": "Create a scene entity to play the specified scene.",
            "func": "( string_1 )",
            "return": "handle",
            "name": "CreateSceneEntity"
        },
        {
            "desc": "生成一颗临时存在的树。(vLocation,flDuration).",
            "func": "( Vector_1, float_2 )",
            "return": "handle",
            "name": "CreateTempTree"
        },
        {
            "desc": "Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName).",
            "func": "( Vector_1, float_2, string_3 )",
            "return": "handle",
            "name": "CreateTempTreeWithModel"
        },
        {
            "desc": "CreateTrigger(vecMin,vecMax) :创建并返回一个AABB触发器",
            "func": "( Vector_1, Vector_2, Vector_3 )",
            "return": "handle",
            "name": "CreateTrigger"
        },
        {
            "desc": "CreateTriggerRadiusApproximate(vecOrigin,flRadius) :创建并返回一个比给定radius大的AABB触发器",
            "func": "( Vector_1, float_2 )",
            "return": "handle",
            "name": "CreateTriggerRadiusApproximate"
        },
        {
            "desc": "( iSeed ) - Creates a separate random number stream.",
            "func": "( int_1 )",
            "return": "handle",
            "name": "CreateUniformRandomStream"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt中的名字创建它(szUnitName,vLocation,bFindClearSpace,hNPCOwner,hUnitOwner,iTeamNumber)",
            "func": "( string_1, Vector_2, bool_3, handle_4, handle_5, int_6 )",
            "return": "handle",
            "name": "CreateUnitByName"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt中的名字创建它(szUnitName,vLocation,bFindClearSpace,hNPCOwner,hUnitOwner,iTeamNumber,hCallback)",
            "func": "( string_1, Vector_2, bool_3, handle_4, handle_5, int_6, handle_7 )",
            "return": "int",
            "name": "CreateUnitByNameAsync"
        },
        {
            "desc": "Createsanewdata-drivenentitywiththegiventable",
            "func": "( handle_1, Vector_2 )",
            "return": "handle",
            "name": "CreateUnitFromTable"
        },
        {
            "desc": "(vector,vector) cross product between two vectors",
            "func": "( Vector_1, Vector_2 )",
            "return": "Vector",
            "name": "CrossVectors"
        },
        {
            "desc": "Spawn a .vmap at the target location.",
            "func": "( string_1, Vector_2, bool_3, handle_4, handle_5, handle_6 )",
            "return": "int",
            "name": "DOTA_SpawnMapAtPosition"
        },
        {
            "desc": "在debugger（调试模式）中停止运行",
            "func": "()",
            "return": "void",
            "name": "DebugBreak"
        },
        {
            "desc": "Creates a test unit controllable by the specified player.",
            "func": "( handle_1, string_2, int_3, bool_4, handle_5 )",
            "return": "int",
            "name": "DebugCreateUnit"
        },
        {
            "desc": "显示一个debugoverlay窗口(origin,mins,maxs,r,g,b,a,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, float_8 )",
            "return": "void",
            "name": "DebugDrawBox"
        },
        {
            "desc": "显示一个debugforward窗口(cent,min,max,forward,vRgb,a,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, Vector_4, Vector_5, float_6, float_7 )",
            "return": "void",
            "name": "DebugDrawBoxDirection"
        },
        {
            "desc": "显示一个debug圆(center,vRgb,a,rad,ztest,duration)",
            "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
            "return": "void",
            "name": "DebugDrawCircle"
        },
        {
            "desc": "尝试清理所有debugoverlay信息",
            "func": "()",
            "return": "void",
            "name": "DebugDrawClear"
        },
        {
            "desc": "显示一个debugoverlay线段origin,target,r,g,b,ztest,duration)",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, bool_6, float_7 )",
            "return": "void",
            "name": "DebugDrawLine"
        },
        {
            "desc": "使用vec颜色显示一个debug线段(start,end,vRgb,a,ztest,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, bool_4, float_5 )",
            "return": "void",
            "name": "DebugDrawLine_vCol"
        },
        {
            "desc": "显示给定行间距（lineoffset）的文字(x,y,lineOffset,text,r,g,b,a,duration)",
            "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9 )",
            "return": "void",
            "name": "DebugDrawScreenTextLine"
        },
        {
            "desc": "显示一个debug球(center,vRgb,a,rad,ztest,duration)",
            "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
            "return": "void",
            "name": "DebugDrawSphere"
        },
        {
            "desc": "显示3d文字(origin,text,bViewCheck,duration)",
            "func": "( Vector_1, string_2, bool_3, float_4 )",
            "return": "void",
            "name": "DebugDrawText"
        },
        {
            "desc": "显示漂亮的debug文字(x,y,lineOffset,text,r,g,b,a,duration,font,size,bBold)",
            "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9, string_10, int_11, bool_12 )",
            "return": "void",
            "name": "DebugScreenTextPretty"
        },
        {
            "desc": "Free a damageinfo object that was created with CreateDamageInfo().",
            "func": "( handle_1 )",
            "return": "void",
            "name": "DestroyDamageInfo"
        },
        {
            "desc": "(hAttacker,hTarget,hAbility,fDamage,fRadius,effectName)",
            "func": "( handle_1, handle_2, handle_3, float_4, float_5, float_6, float_7, string_8 )",
            "return": "int",
            "name": "DoCleaveAttack"
        },
        {
            "desc": "构造一个实体的输入/输出事件(szTarget,szAction,szValue,flDelay,hActivator,hCaller)",
            "func": "( string_1, string_2, string_3, float_4, handle_5, handle_6 )",
            "return": "void",
            "name": "DoEntFire"
        },
        {
            "desc": "EntFireByHandle:构造一个实体的输入/输出事件",
            "func": "( handle_1, string_2, string_3, float_4, handle_5, handle_6 )",
            "return": "void",
            "name": "DoEntFireByInstanceHandle"
        },
        {
            "desc": "运行一个内部脚本",
            "func": "( string_1, handle_2 )",
            "return": "bool",
            "name": "DoIncludeScript"
        },
        {
            "desc": "ScriptAssert:断言传入数据是数值，输出信息并显示断言对话框（参考编程中的Assert功能，主要用于调试，译者注）",
            "func": "( bool_1, string_2 )",
            "return": "void",
            "name": "DoScriptAssert"
        },
        {
            "desc": "UniqueString:使用任意的根字符串构造一个保证在VM脚本运行周期内唯一的字符串。当给表增加数据但不确定已用关键字时有用",
            "func": "( string_1 )",
            "return": "string",
            "name": "DoUniqueString"
        },
        {
            "desc": "",
            "func": "( Vector_1, Vector_2 )",
            "return": "float",
            "name": "DotProduct"
        },
        {
            "desc": "Drop a neutral item for the team of the hero at the given tier.",
            "func": "( string_1, Vector_2, handle_3, int_4, bool_5 )",
            "return": "handle",
            "name": "DropNeutralItemAtPositionForHero"
        },
        {
            "desc": "对所有玩家播放播音员的声音。",
            "func": "( string_1 )",
            "return": "void",
            "name": "EmitAnnouncerSound"
        },
        {
            "desc": "对一位玩家播放播音员的音效。",
            "func": "( string_1, int_2 )",
            "return": "void",
            "name": "EmitAnnouncerSoundForPlayer"
        },
        {
            "desc": "对一方队伍成员播放播音员的音效。",
            "func": "( string_1, int_2 )",
            "return": "void",
            "name": "EmitAnnouncerSoundForTeam"
        },
        {
            "desc": "对在某个特定地点队伍成员播放播音员的音效",
            "func": "( string_1, int_2, Vector_3 )",
            "return": "void",
            "name": "EmitAnnouncerSoundForTeamOnLocation"
        },
        {
            "desc": "为所有玩家播放给定名称的音效",
            "func": "( string_1 )",
            "return": "void",
            "name": "EmitGlobalSound"
        },
        {
            "desc": "在一个实体上播放给定名称的音效",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "EmitSoundOn"
        },
        {
            "desc": "为指定玩家播放给定名称的音效",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "EmitSoundOnClient"
        },
        {
            "desc": "Emit a sound on an entity for only a specific player",
            "func": "( string_1, handle_2, int_3 )",
            "return": "void",
            "name": "EmitSoundOnEntityForPlayer"
        },
        {
            "desc": "从处在某个地点的某个单位处播放音效，仅对这个单位的友军有效。(vLocation,soundName,hCaster)",
            "func": "( Vector_1, string_2, handle_3 )",
            "return": "void",
            "name": "EmitSoundOnLocationForAllies"
        },
        {
            "desc": "Emit a sound on a location for only a specific player",
            "func": "( string_1, Vector_2, int_3 )",
            "return": "void",
            "name": "EmitSoundOnLocationForPlayer"
        },
        {
            "desc": "从处在某个地点的某个单位处播放音效。(vLocation,soundName,hCaster).",
            "func": "( Vector_1, string_2, handle_3 )",
            "return": "void",
            "name": "EmitSoundOnLocationWithCaster"
        },
        {
            "desc": "把一个实体的整数索引转化为表达该实体脚本实例的HScript",
            "func": "( int_1 )",
            "return": "handle",
            "name": "EntIndexToHScript"
        },
        {
            "desc": "从一个Script表发布命令",
            "func": "( handle_1 )",
            "return": "void",
            "name": "ExecuteOrderFromTable"
        },
        {
            "desc": "滑的曲线，接近0时减少较慢",
            "func": "( float_1, float_2, float_3 )",
            "return": "float",
            "name": "ExponentialDecay"
        },
        {
            "desc": "Finds a clear random position around a given target unit, using the target unit's padded collision radius.",
            "func": "( handle_1, handle_2, int_3 )",
            "return": "bool",
            "name": "FindClearRandomPositionAroundUnit"
        },
        {
            "desc": "在未被占用的地方创建单位",
            "func": "( handle_1, Vector_2, bool_3 )",
            "return": "bool",
            "name": "FindClearSpaceForUnit"
        },
        {
            "desc": "Find a spawn point for the given team.",
            "func": "( int_1 )",
            "return": "handle",
            "name": "FindSpawnEntityForTeam"
        },
        {
            "desc": "在给定的一条线上用给定flags搜索单位(iTeamNumber,vStartPos,vEndPos,hCacheUnit,flWidth,iTeamFilter,iTypeFilter,iFlagFilter)",
            "func": "( int_1, Vector_2, Vector_3, handle_4, float_5, int_6, int_7, int_8 )",
            "return": "table",
            "name": "FindUnitsInLine"
        },
        {
            "desc": "在给定范围内用给定flags搜索单位(iTeamNumber,vPosition,hCacheUnit,flRadius,iTeamFilter,iTypeFilter,iFlagFilter,iOrder,bCanGrowCache)",
            "func": "( int_1, Vector_2, handle_3, float_4, int_5, int_6, int_7, int_8, bool_9 )",
            "return": "table",
            "name": "FindUnitsInRadius"
        },
        {
            "desc": "触发实体的动作输入w/no数据",
            "func": "( ehandle_1, string_2 )",
            "return": "void",
            "name": "FireEntityIOInputNameOnly"
        },
        {
            "desc": "用给定字符串（由你分配内存）触发实体的动作输入",
            "func": "( ehandle_1, string_2, string_3 )",
            "return": "void",
            "name": "FireEntityIOInputString"
        },
        {
            "desc": "用给定的Vector(hEntity,szActionName,vector)触发实体的动作输入",
            "func": "( ehandle_1, string_2, Vector_3 )",
            "return": "void",
            "name": "FireEntityIOInputVec"
        },
        {
            "desc": "触发一个预定义事件，可以在custom_events.txt或dota的资源/.res中找到",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "FireGameEvent"
        },
        {
            "desc": "触发一个游戏事件但不广播给客户端",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "FireGameEventLocal"
        },
        {
            "desc": "获取上一帧在服务器上花费的时间",
            "func": "()",
            "return": "float",
            "name": "FrameTime"
        },
        {
            "desc": "Gets the ability texture name for an ability",
            "func": "( string_1 )",
            "return": "string",
            "name": "GetAbilityTextureNameForAbility"
        },
        {
            "desc": "Returns the currently active spawn group handle",
            "func": "()",
            "return": "int",
            "name": "GetActiveSpawnGroupHandle"
        },
        {
            "desc": "( version )",
            "func": "( string_1 )",
            "return": "string",
            "name": "GetDedicatedServerKey"
        },
        {
            "desc": "( version )",
            "func": "( string_1 )",
            "return": "string",
            "name": "GetDedicatedServerKeyV2"
        },
        {
            "desc": "对于指定为DOTA_UNIT_ORDER_CAST_TARGET_TREE下的entindex_target类型的树，这个方法用来获取其实体索引。",
            "func": "( unsigned_1 )",
            "return": "<unknown>",
            "name": "GetEntityIndexForTreeId"
        },
        {
            "desc": "返回引擎当然的帧数",
            "func": "()",
            "return": "int",
            "name": "GetFrameCount"
        },
        {
            "desc": "",
            "func": "( Vector_1, handle_2 )",
            "return": "float",
            "name": "GetGroundHeight"
        },
        {
            "desc": "返回移动到地面的供给位置。第二个参数是一个NPC，用于测量碰撞体积",
            "func": "( Vector_1, handle_2 )",
            "return": "Vector",
            "name": "GetGroundPosition"
        },
        {
            "desc": "通过名称获取一个物品的价格。",
            "func": "( string_1 )",
            "return": "int",
            "name": "GetItemCost"
        },
        {
            "desc": "",
            "func": "( int_1, int_2 )",
            "return": "int",
            "name": "GetItemDefOwnedCount"
        },
        {
            "desc": "",
            "func": "( int_1, int_2 )",
            "return": "int",
            "name": "GetItemDefQuantity"
        },
        {
            "desc": "在广播服务器获取本地玩家",
            "func": "()",
            "return": "handle",
            "name": "GetListenServerHost"
        },
        {
            "desc": "( )",
            "func": "()",
            "return": "table",
            "name": "GetLobbyEventGameDetails"
        },
        {
            "desc": "获取地图的名字",
            "func": "()",
            "return": "string",
            "name": "GetMapName"
        },
        {
            "desc": "获取输出事件的最大延迟",
            "func": "( ehandle_1, string_2 )",
            "return": "float",
            "name": "GetMaxOutputDelay"
        },
        {
            "desc": "获取VPHYS或普通物体的角速度",
            "func": "( handle_1 )",
            "return": "Vector",
            "name": "GetPhysAngularVelocity"
        },
        {
            "desc": "获取VPHYS或普通物体的速度",
            "func": "( handle_1 )",
            "return": "Vector",
            "name": "GetPhysVelocity"
        },
        {
            "desc": "获取真实世界的日期",
            "func": "()",
            "return": "string",
            "name": "GetSystemDate"
        },
        {
            "desc": "获取真实世界的时间",
            "func": "()",
            "return": "string",
            "name": "GetSystemTime"
        },
        {
            "desc": "Get system time in milliseconds",
            "func": "()",
            "return": "double",
            "name": "GetSystemTimeMS"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, int_3, Vector_4, int_5, int_6, int_7 )",
            "return": "Vector",
            "name": "GetTargetAOELocation"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, int_3, Vector_4, int_5, int_6, int_7 )",
            "return": "Vector",
            "name": "GetTargetLinearLocation"
        },
        {
            "desc": "(intteamID)",
            "func": "( int_1 )",
            "return": "int",
            "name": "GetTeamHeroKills"
        },
        {
            "desc": "Returnstheteamname",
            "func": "( int_1 )",
            "return": "string",
            "name": "GetTeamName"
        },
        {
            "desc": "获取已给定实体索引的树的ID",
            "func": "( int_1 )",
            "return": "int",
            "name": "GetTreeIdForEntityIndex"
        },
        {
            "desc": "获取地图X坐标最大值",
            "func": "()",
            "return": "float",
            "name": "GetWorldMaxX"
        },
        {
            "desc": "获取地图Y坐标最大值",
            "func": "()",
            "return": "float",
            "name": "GetWorldMaxY"
        },
        {
            "desc": "获取地图X坐标最小值",
            "func": "()",
            "return": "float",
            "name": "GetWorldMinX"
        },
        {
            "desc": "获取地图Y坐标最小值",
            "func": "()",
            "return": "float",
            "name": "GetWorldMinY"
        },
        {
            "desc": "Get amount of XP required to reach the next level.",
            "func": "( int_1 )",
            "return": "int",
            "name": "GetXPNeededToReachNextLevel"
        },
        {
            "desc": "如果给定文件不存在，用给定内容创建它；如果存在则不做任何动作",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "InitLogFile"
        },
        {
            "desc": "Returnstrueifthisisluarunningfromtheclient.dll.",
            "func": "()",
            "return": "bool",
            "name": "IsClient"
        },
        {
            "desc": "如果服务器开放返回true",
            "func": "()",
            "return": "bool",
            "name": "IsDedicatedServer"
        },
        {
            "desc": "当此Lua脚本在Dota2创意工坊工具模式下运行时返回true。",
            "func": "()",
            "return": "bool",
            "name": "IsInToolsMode"
        },
        {
            "desc": "Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation).",
            "func": "( int_1, Vector_2 )",
            "return": "bool",
            "name": "IsLocationVisible"
        },
        {
            "desc": "如果实体有效并被标记为删除返回true",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "IsMarkedForDeletion"
        },
        {
            "desc": "当Lua代码是从Server.dll中被运行的时候，返回True。",
            "func": "()",
            "return": "bool",
            "name": "IsServer"
        },
        {
            "desc": "Returns true if the unit is in a valid position in the gridnav.",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "IsUnitInValidPosition"
        },
        {
            "desc": "检查给定hScript是否为有效实体",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "IsValidEntity"
        },
        {
            "desc": "(vector,vector,float) lerp between two vectors by a float factor returning new vector",
            "func": "( Vector_1, Vector_2, float_3 )",
            "return": "Vector",
            "name": "LerpVectors"
        },
        {
            "desc": "设置寻路系统的搜索范围（应该是对于深度）",
            "func": "( float_1 )",
            "return": "void",
            "name": "LimitPathingSearchDepth"
        },
        {
            "desc": "将一个Lua定义的Modifier和与其相关的类联系起来。如果这个Modifier的定义在Vscript根目录下，那么第二个argument(file_path)可能会被忽略。",
            "func": "( string_1, string_2, int_3 )",
            "return": "void",
            "name": "LinkLuaModifier"
        },
        {
            "desc": "从脚本给游戏事件注册一个listner，Tip:另外，为listenstandardengineevents,你也可以创建自己的事件，把它们放置在/scripts/custom_events.txt.",
            "func": "( string_1, handle_2, handle_3 )",
            "return": "int",
            "name": "ListenToGameEvent"
        },
        {
            "desc": "用给定的关键字文件创建table",
            "func": "( string_1 )",
            "return": "table",
            "name": "LoadKeyValues"
        },
        {
            "desc": "用给定的关键字string创建table",
            "func": "( string_1 )",
            "return": "table",
            "name": "LoadKeyValuesFromString"
        },
        {
            "desc": "Get the current local time",
            "func": "()",
            "return": "table",
            "name": "LocalTime"
        },
        {
            "desc": "检查给定的hScript是否是有效实体（？）",
            "func": "( string_1 )",
            "return": "int",
            "name": "MakeStringToken"
        },
        {
            "desc": "Triggers the creation of entities in a manually-completed spawn group",
            "func": "( int_1 )",
            "return": "void",
            "name": "ManuallyTriggerSpawnGroupCompletion"
        },
        {
            "desc": "设置一个小地图事件。(nTeamID,hEntity,nXCoord,nYCoord,nEventType,nEventDuration).",
            "func": "( int_1, handle_2, int_3, int_4, int_5, int_6 )",
            "return": "void",
            "name": "MinimapEvent"
        },
        {
            "desc": "输出信息",
            "func": "( string_1 )",
            "return": "void",
            "name": "Msg"
        },
        {
            "desc": "暂停/开始游戏",
            "func": "( bool_1 )",
            "return": "void",
            "name": "PauseGame"
        },
        {
            "desc": "通过索引获取玩家的脚本实例",
            "func": "( int_1 )",
            "return": "handle",
            "name": "PlayerInstanceFromIndex"
        },
        {
            "desc": "用关键字从table中预缓存一个实体",
            "func": "( string_1, handle_2, handle_3 )",
            "return": "void",
            "name": "PrecacheEntityFromTable"
        },
        {
            "desc": "预缓存一个实体关键字列表",
            "func": "( handle_1, handle_2 )",
            "return": "void",
            "name": "PrecacheEntityListFromTable"
        },
        {
            "desc": "用DOTA物品的dota_npc_items.txt名称异步预缓存它,结束时提供回调",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "PrecacheItemByNameAsync"
        },
        {
            "desc": "用DOTA物品的dota_npc_items.txt名称预缓存它",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "PrecacheItemByNameSync"
        },
        {
            "desc": "手动预缓存一个单一模型",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "PrecacheModel"
        },
        {
            "desc": "手动预缓存一个单一资源",
            "func": "( string_1, string_2, handle_3 )",
            "return": "void",
            "name": "PrecacheResource"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt名称异步预缓存它,结束时提供回调",
            "func": "( string_1, handle_2, int_3 )",
            "return": "void",
            "name": "PrecacheUnitByNameAsync"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt名称预缓存它",
            "func": "( string_1, handle_2, int_3 )",
            "return": "void",
            "name": "PrecacheUnitByNameSync"
        },
        {
            "desc": "Precaches a DOTA unit from a table of entity key values.",
            "func": "( handle_1, handle_2 )",
            "return": "void",
            "name": "PrecacheUnitFromTableAsync"
        },
        {
            "desc": "Precaches a DOTA unit from a table of entity key values.",
            "func": "( handle_1, handle_2 )",
            "return": "void",
            "name": "PrecacheUnitFromTableSync"
        },
        {
            "desc": "Printaconsolemessagewithalinkedconsolecommand",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "PrintLinkedConsoleMessage"
        },
        {
            "desc": "获取范围内随机float",
            "func": "( float_1, float_2 )",
            "return": "float",
            "name": "RandomFloat"
        },
        {
            "desc": "获取范围内随机int",
            "func": "( int_1, int_2 )",
            "return": "int",
            "name": "RandomInt"
        },
        {
            "desc": "获取随机二维矢量",
            "func": "( float_1 )",
            "return": "Vector",
            "name": "RandomVector"
        },
        {
            "desc": "Register a custom animation script to run when a model loads",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "RegisterCustomAnimationScriptForModel"
        },
        {
            "desc": "为一个脚本基础的生成单位过滤器创建一个C代理",
            "func": "( string_1 )",
            "return": "void",
            "name": "RegisterSpawnGroupFilterProxy"
        },
        {
            "desc": "重载MotD文件",
            "func": "()",
            "return": "void",
            "name": "ReloadMOTD"
        },
        {
            "desc": "为一个脚本基础的生成单位过滤器删除一个C代理",
            "func": "( string_1 )",
            "return": "void",
            "name": "RemoveSpawnGroupFilterProxy"
        },
        {
            "desc": "CheckandfixunitsthathavebeenassignedapositioninsidecollisionradiusofotherNPCs.检查并固定一个被分配到其他NPC的碰撞半径内的某位置的单位。",
            "func": "( Vector_1, float_2 )",
            "return": "void",
            "name": "ResolveNPCPositions"
        },
        {
            "desc": "随机生成1-100内的数，小于等于给定数则返回true",
            "func": "( int_1 )",
            "return": "bool",
            "name": "RollPercentage"
        },
        {
            "desc": "( chance, pseudo random id, unit.",
            "func": "( unsigned_1, int_2, handle_3 )",
            "return": "bool",
            "name": "RollPseudoRandomPercentage"
        },
        {
            "desc": "旋转一个QAngle，用另一个QAngle",
            "func": "( QAngle_1, QAngle_2 )",
            "return": "QAngle",
            "name": "RotateOrientation"
        },
        {
            "desc": "Rotate a Vector around a point.",
            "func": "( Vector_1, QAngle_2, Vector_3 )",
            "return": "Vector",
            "name": "RotatePosition"
        },
        {
            "desc": "围绕给定vector轴线旋转一个四元数",
            "func": "( Quaternion_1, Vector_2, float_3 )",
            "return": "Quaternion",
            "name": "RotateQuaternionByAxisAngle"
        },
        {
            "desc": "两个QAngle间的delta值",
            "func": "( QAngle_1, QAngle_2 )",
            "return": "QAngle",
            "name": "RotationDelta"
        },
        {
            "desc": "converts delta QAngle to an angular velocity Vector",
            "func": "( QAngle_1, QAngle_2 )",
            "return": "Vector",
            "name": "RotationDeltaAsAngularVelocity"
        },
        {
            "desc": "让实体说string,是否仅限队友可见",
            "func": "( handle_1, string_2, bool_3 )",
            "return": "void",
            "name": "Say"
        },
        {
            "desc": "用下列参数开始镜头摇晃：vecCenter,flAmplitude,flFrequency,flDuration,flRadius,eCommand(SHAKE_START=0,SHAKE_STOP=1),bAirShake",
            "func": "( Vector_1, float_2, float_3, float_4, float_5, int_6, bool_7 )",
            "return": "void",
            "name": "ScreenShake"
        },
        {
            "desc": "(DOTAPlayersendToPlayer,intiMessageType,EntitytargetEntity,intiValue,DOTAPlayersourcePlayer)-sendToPlayer和sourcePlayer允许为nil。-iMessageType是OVERHEAD_ALERT_分类中的一个。",
            "func": "( handle_1, int_2, handle_3, int_4, handle_5 )",
            "return": "void",
            "name": "SendOverheadEventMessage"
        },
        {
            "desc": "给控制台发送string作为客户端命令",
            "func": "( string_1 )",
            "return": "void",
            "name": "SendToConsole"
        },
        {
            "desc": "给控制台发送string作为服务器命令",
            "func": "( string_1 )",
            "return": "void",
            "name": "SendToServerConsole"
        },
        {
            "desc": "为所有玩家设置opvar值",
            "func": "( string_1, string_2, string_3, float_4 )",
            "return": "void",
            "name": "SetOpvarFloatAll"
        },
        {
            "desc": "为单一玩家设置opvar值(szStackName,szOperatorName,szOpvarName,flOpvarValue,hEnt)",
            "func": "( string_1, string_2, string_3, float_4, handle_5 )",
            "return": "void",
            "name": "SetOpvarFloatPlayer"
        },
        {
            "desc": "Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
            "func": "( handle_1, Vector_2 )",
            "return": "void",
            "name": "SetPhysAngularVelocity"
        },
        {
            "desc": "设置当前任务名",
            "func": "( string_1 )",
            "return": "void",
            "name": "SetQuestName"
        },
        {
            "desc": "设置当前任务阶段",
            "func": "( int_1 )",
            "return": "void",
            "name": "SetQuestPhase"
        },
        {
            "desc": "为ehandle设置rendering（渲染）开/关",
            "func": "( ehandle_1, bool_2 )",
            "return": "void",
            "name": "SetRenderingEnabled"
        },
        {
            "desc": "(teamNumber,r,g,b)",
            "func": "( int_1, int_2, int_3, int_4 )",
            "return": "void",
            "name": "SetTeamCustomHealthbarColor"
        },
        {
            "desc": "Displaysaheadermessagefromplayer",
            "func": "( string_1, int_2, int_3, float_4 )",
            "return": "void",
            "name": "ShowCustomHeaderMessage"
        },
        {
            "desc": "对所有玩家显示通用的弹出窗口",
            "func": "( string_1, string_2, string_3, string_4, int_5 )",
            "return": "void",
            "name": "ShowGenericPopup"
        },
        {
            "desc": "对给定玩家显示通用的弹出窗口",
            "func": "( handle_1, string_2, string_3, string_4, string_5, int_6 )",
            "return": "void",
            "name": "ShowGenericPopupToPlayer"
        },
        {
            "desc": "在所有客户端显示hud信息",
            "func": "( string_1 )",
            "return": "void",
            "name": "ShowMessage"
        },
        {
            "desc": "(Vector vOrigin, float flRadius )",
            "func": "( Vector_1, float_2 )",
            "return": "handle",
            "name": "SpawnDOTAShopTriggerRadiusApproximate"
        },
        {
            "desc": "Asynchronously spawns a single entity from a table",
            "func": "( string_1, handle_2, handle_3, handle_4 )",
            "return": "void",
            "name": "SpawnEntityFromTableAsynchronous"
        },
        {
            "desc": "从table同步生成一个实体",
            "func": "( string_1, handle_2 )",
            "return": "handle",
            "name": "SpawnEntityFromTableSynchronous"
        },
        {
            "desc": "从一系列生成表中分级生成一个实体组",
            "func": "( handle_1, bool_2, handle_3 )",
            "return": "bool",
            "name": "SpawnEntityGroupFromTable"
        },
        {
            "desc": "从一个生成表列表异步生成一个实体组，生成完成后会触发一次回调",
            "func": "( handle_1, handle_2 )",
            "return": "int",
            "name": "SpawnEntityListFromTableAsynchronous"
        },
        {
            "desc": "从一个生成表列表同步生成一个实体组.",
            "func": "( handle_1 )",
            "return": "handle",
            "name": "SpawnEntityListFromTableSynchronous"
        },
        {
            "desc": "(quaternion,quaternion,float)非常基础的v0到v1差值，t属于[0,1]为参数",
            "func": "( Quaternion_1, Quaternion_2, float_3 )",
            "return": "Quaternion",
            "name": "SplineQuaternions"
        },
        {
            "desc": "(vector,vector,float)非常基础的v0到v1差值，t属于[0,1]为参数",
            "func": "( Vector_1, Vector_2, float_3 )",
            "return": "Vector",
            "name": "SplineVectors"
        },
        {
            "desc": "开始音效事件",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StartSoundEvent"
        },
        {
            "desc": "在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "return": "void",
            "name": "StartSoundEventFromPosition"
        },
        {
            "desc": "通过可靠的传递，在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "return": "void",
            "name": "StartSoundEventFromPositionReliable"
        },
        {
            "desc": "通过随意的传递，在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "return": "void",
            "name": "StartSoundEventFromPositionUnreliable"
        },
        {
            "desc": "通过可靠的传递，开始音效事件。",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StartSoundEventReliable"
        },
        {
            "desc": "通过随意的传递，开始音效事件。",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StartSoundEventUnreliable"
        },
        {
            "desc": "(hEntity,szEffectName)",
            "func": "( handle_1, string_2 )",
            "return": "void",
            "name": "StopEffect"
        },
        {
            "desc": "Stop named sound for all players",
            "func": "( string_1 )",
            "return": "void",
            "name": "StopGlobalSound"
        },
        {
            "desc": "停止listen在给定内容内的所有游戏事件",
            "func": "( handle_1 )",
            "return": "void",
            "name": "StopListeningToAllGameEvents"
        },
        {
            "desc": "停止listen特定的游戏事件",
            "func": "( int_1 )",
            "return": "bool",
            "name": "StopListeningToGameEvent"
        },
        {
            "desc": "停止音效事件",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StopSoundEvent"
        },
        {
            "desc": "停止实体上的命名音效",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "StopSoundOn"
        },
        {
            "desc": "获取当前服务器时间",
            "func": "()",
            "return": "float",
            "name": "Time"
        },
        {
            "desc": "传递table-输入:start,end,ent,(可选mins,maxs)--输出:pos,fraction,hit,startsolid,normal",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "TraceCollideable"
        },
        {
            "desc": "传递table-输入:start,end,min,max,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "TraceHull"
        },
        {
            "desc": "传递table-输入:startpos,endpos,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "TraceLine"
        },
        {
            "desc": "Returns the number of degrees difference between two yaw angles",
            "func": "( float_1, float_2 )",
            "return": "float",
            "name": "UTIL_AngleDiff"
        },
        {
            "desc": "对特定的玩家显示信息。",
            "func": "( int_1, string_2, int_3, int_4, int_5, int_6 )",
            "return": "void",
            "name": "UTIL_MessageText"
        },
        {
            "desc": "在文本框内对所有玩家显示信息。",
            "func": "( string_1, int_2, int_3, int_4, int_5 )",
            "return": "void",
            "name": "UTIL_MessageTextAll"
        },
        {
            "desc": "Sendsamessagetoeveryoneinthemessageboxwithacontexttable",
            "func": "( string_1, int_2, int_3, int_4, int_5, handle_6 )",
            "return": "void",
            "name": "UTIL_MessageTextAll_WithContext"
        },
        {
            "desc": "Sendsamessagetoaspecificplayerinthemessageboxwithacontexttable",
            "func": "( int_1, string_2, int_3, int_4, int_5, int_6, handle_7 )",
            "return": "void",
            "name": "UTIL_MessageText_WithContext"
        },
        {
            "desc": "删除给定实体",
            "func": "( handle_1 )",
            "return": "void",
            "name": "UTIL_Remove"
        },
        {
            "desc": "立即删除给定实体",
            "func": "( handle_1 )",
            "return": "void",
            "name": "UTIL_RemoveImmediate"
        },
        {
            "desc": "对某个玩家重新设置信息文本。",
            "func": "( int_1 )",
            "return": "void",
            "name": "UTIL_ResetMessageText"
        },
        {
            "desc": "对所有玩家重新设置信息文本。",
            "func": "()",
            "return": "void",
            "name": "UTIL_ResetMessageTextAll"
        },
        {
            "desc": "当一个单位通过一系列过滤器时进行检查。(hNPC,nTargetTeam,nTargetType,nTargetFlags,nTeam",
            "func": "( handle_1, int_2, int_3, int_4, int_5 )",
            "return": "int",
            "name": "UnitFilter"
        },
        {
            "desc": "通过名称去除生成组",
            "func": "( string_1 )",
            "return": "void",
            "name": "UnloadSpawnGroup"
        },
        {
            "desc": "通过handle去除生成组",
            "func": "( int_1 )",
            "return": "void",
            "name": "UnloadSpawnGroupByHandle"
        },
        {
            "desc": "( hEventPointData )",
            "func": "( handle_1 )",
            "return": "void",
            "name": "UpdateEventPoints"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "return": "QAngle",
            "name": "VectorAngles"
        },
        {
            "desc": "为Vector获取Qangle（没有滚动）",
            "func": "( Vector_1 )",
            "return": "QAngle",
            "name": "VectorToAngles"
        },
        {
            "desc": "输出警告",
            "func": "( string_1 )",
            "return": "void",
            "name": "Warning"
        },
        {
            "desc": "获取给定cvar的值，返回float.",
            "func": "( string_1 )",
            "return": "float",
            "name": "cvar_getf"
        },
        {
            "desc": "设置给定cvar的值,传递float.",
            "func": "( string_1, float_2 )",
            "return": "bool",
            "name": "cvar_setf"
        },
        {
            "desc": "给决定数据库增加一个规则",
            "func": "( handle_1 )",
            "return": "bool",
            "name": "rr_AddDecisionRule"
        },
        {
            "desc": "把QueryBestResponse的结果交付给定的实体播放，用参数调用(entity,airesponse)",
            "func": "( handle_1, handle_2 )",
            "return": "bool",
            "name": "rr_CommitAIResponse"
        },
        {
            "desc": "获取所有提供的表达者目标的table，格式为{name :handle,name:handle}.",
            "func": "()",
            "return": "handle",
            "name": "rr_GetResponseTargets"
        },
        {
            "desc": "参数:(hEnt,hQuery,hResult)//静态 :对实体的回复系统测试'query'并返回最佳回复(无回复返回nil)",
            "func": "( handle_1, handle_2, handle_3 )",
            "return": "bool",
            "name": "rr_QueryBestResponse"
        },
        {
            "desc": "检查c++对象是否被释放(所有对象都拥有此函数)",
            "func": "(  )",
            "return": "bool",
            "name": "IsNull"            
        },
        {
            "desc": "输出堆栈信息",
            "func": "(  )",
            "return": "string",
            "name": "printstack"              
        },
        {
            "desc": "根据x,y,z创建向量",
            "func": "( float x,float y,float z )",
            "return": "Vector",
            "name": "Vector"              
        },
        {
            "desc": "根据x,y,z创建欧拉角(x上下旋转+下/-上  y平面旋转左+/右-   z翻滚旋转右+/左-)",
            "func": "( float x,float y,float z )",
            "return": "QAngle",
            "name": "QAngle"
        }
    ],
    "CDOTA_Ability_Nian_Leap": [
        {
            "desc": "Overrideplaybackrate",
            "func": "( flRate )",
            "return": "void",
            "name": "SetPlaybackRate"
        }
    ],
    "CBaseModelEntity": [
        {
            "desc": "GetMaterialGroupHash(): Get the material group hash of this entity.",
            "func": "()",
            "return": "unsigned",
            "name": "GetMaterialGroupHash"
        },
        {
            "desc": "GetMaterialGroupMask(): Get the mesh group mask of this entity.",
            "func": "()",
            "return": "uint64",
            "name": "GetMaterialGroupMask"
        },
        {
            "desc": "GetRenderAlpha(): Get the alpha modulation of this entity.",
            "func": "()",
            "return": "int",
            "name": "GetRenderAlpha"
        },
        {
            "desc": "GetRenderColor(): Get the render color of the entity.",
            "func": "()",
            "return": "Vector",
            "name": "GetRenderColor"
        },
        {
            "desc": "Sets a bodygroup.",
            "func": "( iGroup, iValue )",
            "return": "void",
            "name": "SetBodygroup"
        },
        {
            "desc": "Sets a bodygroup by name.",
            "func": "( pName, iValue )",
            "return": "void",
            "name": "SetBodygroupByName"
        },
        {
            "desc": "SetLightGroup(string):设置实体所属的光照组。",
            "func": "( pLightGroup )",
            "return": "void",
            "name": "SetLightGroup"
        },
        {
            "desc": "SetMaterialGroup( string ): Set the material group of this entity.",
            "func": "( pMaterialGroup )",
            "return": "void",
            "name": "SetMaterialGroup"
        },
        {
            "desc": "SetMaterialGroupHash( uint32 ): Set the material group hash of this entity.",
            "func": "( nHash )",
            "return": "void",
            "name": "SetMaterialGroupHash"
        },
        {
            "desc": "SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity.",
            "func": "( nMeshGroupMask )",
            "return": "void",
            "name": "SetMaterialGroupMask"
        },
        {
            "desc": "设置模型",
            "func": "( pModelName )",
            "return": "void",
            "name": "SetModel"
        },
        {
            "desc": "SetRenderAlpha( int ): Set the alpha modulation of this entity.",
            "func": "( nAlpha )",
            "return": "void",
            "name": "SetRenderAlpha"
        },
        {
            "desc": "SetRenderColor(r,g,b):设置实体的渲染颜色。",
            "func": "( r, g, b )",
            "return": "void",
            "name": "SetRenderColor"
        },
        {
            "desc": "SetRenderMode(int):设置实体的渲染模式。",
            "func": "( nMode )",
            "return": "void",
            "name": "SetRenderMode"
        },
        {
            "desc": "SetSingleMeshGroup( string ): Set a single mesh group for this entity.",
            "func": "( pMeshGroupName )",
            "return": "void",
            "name": "SetSingleMeshGroup"
        },
        {
            "desc": "设置尺寸。",
            "func": "( mins, maxs )",
            "return": "void",
            "name": "SetSize"
        },
        {
            "desc": "Set skin (int).",
            "func": "( iSkin )",
            "return": "void",
            "name": "SetSkin"
        }
    ],
    "Constants": {
        "DOTAMusicStatus_t": [
            {
                "desc": "DOTA音乐地位之争",
                "name": "DOTA_MUSIC_STATUS_BATTLE",
                "value": "2"
            },
            {
                "desc": "DOTA音乐状态死亡",
                "name": "DOTA_MUSIC_STATUS_DEAD",
                "value": "4"
            },
            {
                "desc": "DOTA音乐现状探索",
                "name": "DOTA_MUSIC_STATUS_EXPLORATION",
                "value": "1"
            },
            {
                "desc": "最后一个音乐状态",
                "name": "DOTA_MUSIC_STATUS_LAST",
                "value": "5"
            },
            {
                "desc": "DOTA音乐状态无",
                "name": "DOTA_MUSIC_STATUS_NONE",
                "value": "0"
            },
            {
                "desc": "游戏前音乐状态探索",
                "name": "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION",
                "value": "3"
            }
        ],
        "AbilityLearnResult_t": [
            {
                "desc": "能力不能升级到最大值",
                "name": "ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
                "value": "2"
            },
            {
                "desc": "能力无法升级不可升级",
                "name": "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
                "value": "1"
            },
            {
                "desc": "技能不能升级需要等级",
                "name": "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
                "value": "3"
            },
            {
                "desc": "能力可以升级",
                "name": "ABILITY_CAN_BE_UPGRADED",
                "value": "0"
            },
            {
                "desc": "无法学习的能力",
                "name": "ABILITY_NOT_LEARNABLE",
                "value": "4"
            }
        ],
        "ABILITY_TYPES": [
            {
                "desc": "技能类型： 属性",
                "name": "ABILITY_TYPE_ATTRIBUTES",
                "value": "2"
            },
            {
                "desc": "技能类型： 基础",
                "name": "ABILITY_TYPE_BASIC",
                "value": "0"
            },
            {
                "desc": "技能类型： 隐藏",
                "name": "ABILITY_TYPE_HIDDEN",
                "value": "3"
            },
            {
                "desc": "技能类型： 大招",
                "name": "ABILITY_TYPE_ULTIMATE",
                "value": "1"
            }
        ],
        "DOTAInventoryFlags_t": [
            {
                "desc": "DOTA库存允许在喷泉处投放",
                "name": "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN",
                "value": "8"
            },
            {
                "desc": "DOTA库存允许落地",
                "name": "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND",
                "value": "4"
            },
            {
                "desc": "DOTA库存允许主",
                "name": "DOTA_INVENTORY_ALLOW_MAIN",
                "value": "1"
            },
            {
                "desc": "DOTA库存不允许",
                "name": "DOTA_INVENTORY_ALLOW_NONE",
                "value": "0"
            },
            {
                "desc": "DOTA库存允许存放",
                "name": "DOTA_INVENTORY_ALLOW_STASH",
                "value": "2"
            },
            {
                "desc": "DOTA库存所有访问",
                "name": "DOTA_INVENTORY_ALL_ACCESS",
                "value": "3"
            },
            {
                "desc": "DOTA库存限制落地",
                "name": "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND",
                "value": "16"
            }
        ],
        "AttributeDerivedStats": [
            {
                "desc": "每点敏捷护甲",
                "name": "DOTA_ATTRIBUTE_AGILITY_ARMOR",
                "value": "4"
            },
            {
                "desc": "每点敏捷攻速",
                "name": "DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED",
                "value": "5"
            },
            {
                "desc": "每点敏捷攻击",
                "name": "DOTA_ATTRIBUTE_AGILITY_DAMAGE",
                "value": "3"
            },
            {
                "desc": "每点智力攻击",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE",
                "value": "6"
            },
            {
                "desc": "每点智力魔法",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA",
                "value": "7"
            },
            {
                "desc": "每点智力回魔",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN",
                "value": "8"
            },
            {
                "desc": "每点力量攻击",
                "name": "DOTA_ATTRIBUTE_STRENGTH_DAMAGE",
                "value": "0"
            },
            {
                "desc": "每点力量生命",
                "name": "DOTA_ATTRIBUTE_STRENGTH_HP",
                "value": "1"
            },
            {
                "desc": "每点力量回血",
                "name": "DOTA_ATTRIBUTE_STRENGTH_HP_REGEN",
                "value": "2"
            }
        ],
        "DOTAHUDVisibility_t": [
            {
                "desc": "HUD元素后面的DOTA HUD CUSTOMUI",
                "name": "DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS",
                "value": "28"
            },
            {
                "desc": "DOTA HUD可见性行动小地图",
                "name": "DOTA_HUD_VISIBILITY_ACTION_MINIMAP",
                "value": "4"
            },
            {
                "desc": "DOTA HUD可见性操作面板",
                "name": "DOTA_HUD_VISIBILITY_ACTION_PANEL",
                "value": "3"
            },
            {
                "desc": "DOTA HUD可见性计数",
                "name": "DOTA_HUD_VISIBILITY_COUNT",
                "value": "29"
            },
            {
                "desc": "DOTA HUD可见性结束游戏",
                "name": "DOTA_HUD_VISIBILITY_ENDGAME",
                "value": "22"
            },
            {
                "desc": "DOTA HUD可见性游戏结束聊天",
                "name": "DOTA_HUD_VISIBILITY_ENDGAME_CHAT",
                "value": "23"
            },
            {
                "desc": "DOTA HUD可见性英雄选择时钟",
                "name": "DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK",
                "value": "16"
            },
            {
                "desc": "DOTA HUD可见性英雄选择游戏名",
                "name": "DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME",
                "value": "15"
            },
            {
                "desc": "DOTA HUD可见性英雄选择团队",
                "name": "DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS",
                "value": "14"
            },
            {
                "desc": "DOTA HUD可见性无效",
                "name": "DOTA_HUD_VISIBILITY_INVALID",
                "value": "-1"
            },
            {
                "desc": "DOTA HUD可见性库存信使",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_COURIER",
                "value": "9"
            },
            {
                "desc": "DOTA HUD可见性库存黄金",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_GOLD",
                "value": "11"
            },
            {
                "desc": "DOTA HUD可见性清单项目",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS",
                "value": "7"
            },
            {
                "desc": "DOTA HUD可见性清单面板",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_PANEL",
                "value": "5"
            },
            {
                "desc": "DOTA HUD可见性清单保护",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT",
                "value": "10"
            },
            {
                "desc": "DOTA HUD可见性目录QUICKBUY",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY",
                "value": "8"
            },
            {
                "desc": "DOTA HUD可见性库存商店",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_SHOP",
                "value": "6"
            },
            {
                "desc": "DOTA HUD可见性KILLCAM",
                "name": "DOTA_HUD_VISIBILITY_KILLCAM",
                "value": "26"
            },
            {
                "desc": "DOTA HUD可见性赛前策略",
                "name": "DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI",
                "value": "25"
            },
            {
                "desc": "DOTA HUD可见性快速统计",
                "name": "DOTA_HUD_VISIBILITY_QUICK_STATS",
                "value": "24"
            },
            {
                "desc": "DOTA HUD可见性商店常用物品",
                "name": "DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS",
                "value": "13"
            },
            {
                "desc": "DOTA HUD可见性商店建议编辑",
                "name": "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS",
                "value": "12"
            },
            {
                "desc": "DOTA HUD可见性顶栏",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR",
                "value": "27"
            },
            {
                "desc": "DOTA HUD可见性顶栏背景",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND",
                "value": "18"
            },
            {
                "desc": "DOTA HUD可见度顶栏DIRE团队",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM",
                "value": "20"
            },
            {
                "desc": "DOTA HUD能见度顶栏辐射小组",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM",
                "value": "19"
            },
            {
                "desc": "DOTA HUD可见性顶栏分数",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_SCORE",
                "value": "21"
            },
            {
                "desc": "DOTA HUD可见性顶级英雄",
                "name": "DOTA_HUD_VISIBILITY_TOP_HEROES",
                "value": "1"
            },
            {
                "desc": "DOTA HUD可见性顶部菜单按钮",
                "name": "DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS",
                "value": "17"
            },
            {
                "desc": "DOTA HUD可见性最高记分板",
                "name": "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD",
                "value": "2"
            },
            {
                "desc": "DOTA HUD能见度最高时间",
                "name": "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY",
                "value": "0"
            }
        ],
        "DOTADamageFlag_t": [
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK",
                "value": "8"
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY",
                "value": "4"
            },
            {
                "desc": "伤害标签：当伤害来源是隐身状态则不触发被伤害的动画",
                "name": "DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN",
                "value": "2048"
            },
            {
                "desc": "伤害标签：生命移除",
                "name": "DOTA_DAMAGE_FLAG_HPLOSS",
                "value": "32"
            },
            {
                "desc": "伤害标签：无视基础护甲",
                "name": "DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR",
                "value": "16384"
            },
            {
                "desc": "伤害标签：无视魔抗",
                "name": "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR",
                "value": "1"
            },
            {
                "desc": "伤害标签：无视物抗",
                "name": "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR",
                "value": "2"
            },
            {
                "desc": "伤害标签：无",
                "name": "DOTA_DAMAGE_FLAG_NONE",
                "value": "0"
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NON_LETHAL",
                "value": "128"
            },
            {
                "desc": "伤害标签：不造成多倍伤害",
                "name": "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS",
                "value": "512"
            },
            {
                "desc": "伤害标签：不触发修改器事件",
                "name": "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT",
                "value": "64"
            },
            {
                "desc": "伤害标签：不能被技能强化",
                "name": "DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION",
                "value": "1024"
            },
            {
                "desc": "伤害标签：不能触发技能吸血",
                "name": "DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL",
                "value": "4096"
            },
            {
                "desc": "伤害标签：DOTA火属性伤害",
                "name": "DOTA_DAMAGE_FLAG_PROPERTY_FIRE",
                "value": "8192"
            },
            {
                "desc": "伤害标签：反伤",
                "name": "DOTA_DAMAGE_FLAG_REFLECTION",
                "value": "16"
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY",
                "value": "256"
            }
        ],
        "DOTALimits_t": [
            {
                "desc": "Default number of players per team.()",
                "name": "DOTA_DEFAULT_MAX_TEAM",
                "value": "5"
            },
            {
                "desc": "Default number of non-spectator players supported.()",
                "name": "DOTA_DEFAULT_MAX_TEAM_PLAYERS",
                "value": "10"
            },
            {
                "desc": "Max number of players connected to the server including spectators.(最大玩家数？)",
                "name": "DOTA_MAX_PLAYERS",
                "value": "64"
            },
            {
                "desc": "Max number of player teams supported.(最大队伍数？)",
                "name": "DOTA_MAX_PLAYER_TEAMS",
                "value": "10"
            },
            {
                "desc": "Max number of viewers in a spectator lobby.()",
                "name": "DOTA_MAX_SPECTATOR_LOBBY_SIZE",
                "value": "15"
            },
            {
                "desc": "How many spectators can watch.()",
                "name": "DOTA_MAX_SPECTATOR_TEAM_SIZE",
                "value": "40"
            },
            {
                "desc": "Max number of players per team.()",
                "name": "DOTA_MAX_TEAM",
                "value": "24"
            },
            {
                "desc": "Max number of non-spectator players supported.(玩家最大数量)",
                "name": "DOTA_MAX_TEAM_PLAYERS",
                "value": "24"
            }
        ],
        "Attributes": [
            {
                "desc": "敏捷",
                "name": "DOTA_ATTRIBUTE_AGILITY",
                "value": "1"
            },
            {
                "desc": "智力",
                "name": "DOTA_ATTRIBUTE_INTELLECT",
                "value": "2"
            },
            {
                "desc": "属性无效",
                "name": "DOTA_ATTRIBUTE_INVALID",
                "value": "-1"
            },
            {
                "desc": "属性最大值",
                "name": "DOTA_ATTRIBUTE_MAX",
                "value": "3"
            },
            {
                "desc": "力量",
                "name": "DOTA_ATTRIBUTE_STRENGTH",
                "value": "0"
            }
        ],
        "DOTASlotType_t": [
            {
                "desc": "",
                "name": "DOTA_LOADOUT_PERSONA_1_END",
                "value": "55"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_PERSONA_1_START",
                "value": "28"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY1",
                "value": "22"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1",
                "value": "50"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY2",
                "value": "23"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1",
                "value": "51"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY3",
                "value": "24"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1",
                "value": "52"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY4",
                "value": "25"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1",
                "value": "53"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK",
                "value": "21"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1",
                "value": "49"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE",
                "value": "26"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1",
                "value": "54"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS",
                "value": "20"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1",
                "value": "48"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ANNOUNCER",
                "value": "58"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMOR",
                "value": "7"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1",
                "value": "35"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMS",
                "value": "6"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMS_PERSONA_1",
                "value": "34"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BACK",
                "value": "10"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BACK_PERSONA_1",
                "value": "38"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BELT",
                "value": "8"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BELT_PERSONA_1",
                "value": "36"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BLINK_EFFECT",
                "value": "69"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BODY_HEAD",
                "value": "15"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1",
                "value": "43"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_COUNT",
                "value": "79"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_COURIER",
                "value": "57"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_CURSOR_PACK",
                "value": "67"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_DIRE_CREEPS",
                "value": "73"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_DIRE_TOWER",
                "value": "75"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_EMBLEM",
                "value": "70"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_GLOVES",
                "value": "12"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1",
                "value": "40"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEAD",
                "value": "4"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEAD_PERSONA_1",
                "value": "32"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEROIC_STATUE",
                "value": "65"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HUD_SKIN",
                "value": "62"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_INVALID",
                "value": "-1"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_LEGS",
                "value": "11"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_LEGS_PERSONA_1",
                "value": "39"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_LOADING_SCREEN",
                "value": "63"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MEGA_KILLS",
                "value": "59"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MISC",
                "value": "14"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MISC_PERSONA_1",
                "value": "42"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MOUNT",
                "value": "16"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1",
                "value": "44"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER",
                "value": "66"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MUSIC",
                "value": "60"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_NECK",
                "value": "9"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_NECK_PERSONA_1",
                "value": "37"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_NONE",
                "value": "78"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON",
                "value": "1"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2",
                "value": "3"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1",
                "value": "31"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1",
                "value": "29"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_PERSONA_SELECTOR",
                "value": "56"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_RADIANT_CREEPS",
                "value": "72"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_RADIANT_TOWER",
                "value": "74"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHAPESHIFT",
                "value": "18"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1",
                "value": "46"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHOULDER",
                "value": "5"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1",
                "value": "33"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_STREAK_EFFECT",
                "value": "77"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SUMMON",
                "value": "17"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1",
                "value": "45"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAIL",
                "value": "13"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAIL_PERSONA_1",
                "value": "41"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAUNT",
                "value": "19"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1",
                "value": "47"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT",
                "value": "68"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TERRAIN",
                "value": "71"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_VERSUS_SCREEN",
                "value": "76"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_VOICE",
                "value": "27"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_VOICE_PERSONA_1",
                "value": "55"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WARD",
                "value": "61"
            },
            {
                "desc": "饰品替换部位：主武器",
                "name": "DOTA_LOADOUT_TYPE_WEAPON",
                "value": "0"
            },
            {
                "desc": "饰品替换部位：副武器",
                "name": "DOTA_LOADOUT_TYPE_WEAPON2",
                "value": "2"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1",
                "value": "30"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1",
                "value": "28"
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEATHER",
                "value": "64"
            },
            {
                "desc": "",
                "name": "DOTA_PLAYER_LOADOUT_END",
                "value": "77"
            },
            {
                "desc": "",
                "name": "DOTA_PLAYER_LOADOUT_START",
                "value": "57"
            }
        ],
        "DOTAAbilitySpeakTrigger_t": [
            {
                "desc": "",
                "name": "DOTA_ABILITY_SPEAK_CAST",
                "value": "1"
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
                "value": "0"
            }
        ],
        "DAMAGE_TYPES": [
            {
                "desc": "除了生命移除以外的各种类型",
                "name": "DAMAGE_TYPE_ALL",
                "value": "7"
            },
            {
                "desc": "生命移除伤害类型",
                "name": "DAMAGE_TYPE_HP_REMOVAL",
                "value": "8"
            },
            {
                "desc": "魔法伤害类型",
                "name": "DAMAGE_TYPE_MAGICAL",
                "value": "2"
            },
            {
                "desc": "无伤害类型",
                "name": "DAMAGE_TYPE_NONE",
                "value": "0"
            },
            {
                "desc": "物理伤害类型",
                "name": "DAMAGE_TYPE_PHYSICAL",
                "value": "1"
            },
            {
                "desc": "纯粹伤害 神圣伤害 混乱伤害 对哪种都是100%",
                "name": "DAMAGE_TYPE_PURE",
                "value": "4"
            }
        ],
        "DOTAMinimapEvent_t": [
            {
                "desc": "DOTA小地图事件古代受到攻击",
                "name": "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK",
                "value": "2"
            },
            {
                "desc": "DOTA小地图事件基字形",
                "name": "DOTA_MINIMAP_EVENT_BASE_GLYPHED",
                "value": "8"
            },
            {
                "desc": "受到攻击的DOTA小地图事件库",
                "name": "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK",
                "value": "4"
            },
            {
                "desc": "DOTA小地图事件取消传送",
                "name": "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING",
                "value": "2048"
            },
            {
                "desc": "DOTA小地图事件敌方传送",
                "name": "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING",
                "value": "1024"
            },
            {
                "desc": "DOTA小地图事件提示位置",
                "name": "DOTA_MINIMAP_EVENT_HINT_LOCATION",
                "value": "512"
            },
            {
                "desc": "DOTA小地图事件移动到目标",
                "name": "DOTA_MINIMAP_EVENT_MOVE_TO_TARGET",
                "value": "16384"
            },
            {
                "desc": "DOTA小地图事件雷达",
                "name": "DOTA_MINIMAP_EVENT_RADAR",
                "value": "4096"
            },
            {
                "desc": "DOTA小地图事件雷达目标",
                "name": "DOTA_MINIMAP_EVENT_RADAR_TARGET",
                "value": "8192"
            },
            {
                "desc": "DOTA小地图事件队友死亡",
                "name": "DOTA_MINIMAP_EVENT_TEAMMATE_DIED",
                "value": "64"
            },
            {
                "desc": "DOTA小地图事件队友传送",
                "name": "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING",
                "value": "32"
            },
            {
                "desc": "DOTA小地图事件队友受到攻击",
                "name": "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK",
                "value": "16"
            },
            {
                "desc": "DOTA小地图事件教程任务处于活动状态",
                "name": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE",
                "value": "128"
            },
            {
                "desc": "DOTA小地图事件教程任务已完成",
                "name": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED",
                "value": "256"
            }
        ],
        "attackfail": [
            {
                "desc": "DOTA攻击记录不能失败",
                "name": "DOTA_ATTACK_RECORD_CANNOT_FAIL",
                "value": "6"
            },
            {
                "desc": "DOTA攻击记录被阻塞而失败",
                "name": "DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION",
                "value": "7"
            },
            {
                "desc": "DOTA攻击记录失败否",
                "name": "DOTA_ATTACK_RECORD_FAIL_NO",
                "value": "0"
            },
            {
                "desc": "DOTA攻击记录失败源未命中",
                "name": "DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS",
                "value": "2"
            },
            {
                "desc": "DOTA攻击记录失败目标躲过",
                "name": "DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED",
                "value": "3"
            },
            {
                "desc": "攻击记录失败目标无敌",
                "name": "DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE",
                "value": "4"
            },
            {
                "desc": "攻击记录失败目标超出射程",
                "name": "DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE",
                "value": "5"
            },
            {
                "desc": "DOTA攻击记录失败地形未命中",
                "name": "DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS",
                "value": "1"
            }
        ],
        "DOTAModifierAttribute_t": [
            {
                "desc": "光环优先",
                "name": "MODIFIER_ATTRIBUTE_AURA_PRIORITY",
                "value": "8"
            },
            {
                "desc": "无敌不删",
                "name": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
                "value": "4"
            },
            {
                "desc": "并存",
                "name": "MODIFIER_ATTRIBUTE_MULTIPLE",
                "value": "2"
            },
            {
                "desc": "无",
                "name": "MODIFIER_ATTRIBUTE_NONE",
                "value": "0"
            },
            {
                "desc": "死亡不删",
                "name": "MODIFIER_ATTRIBUTE_PERMANENT",
                "value": "1"
            }
        ],
        "DOTA_UNIT_TARGET_TEAM": [
            {
                "desc": "过滤目标队伍类型： 两方都可以",
                "name": "DOTA_UNIT_TARGET_TEAM_BOTH",
                "value": "3"
            },
            {
                "desc": "过滤目标队伍类型： 自定义队伍（不是天灾，不是近卫，不是中立，不是自然，不是无队伍）",
                "name": "DOTA_UNIT_TARGET_TEAM_CUSTOM",
                "value": "4"
            },
            {
                "desc": "过滤目标队伍类型： 敌人",
                "name": "DOTA_UNIT_TARGET_TEAM_ENEMY",
                "value": "2"
            },
            {
                "desc": "过滤目标队伍类型： 友军",
                "name": "DOTA_UNIT_TARGET_TEAM_FRIENDLY",
                "value": "1"
            },
            {
                "desc": "过滤目标队伍类型： 无",
                "name": "DOTA_UNIT_TARGET_TEAM_NONE",
                "value": "0"
            }
        ],
        "DOTAProjectileAttachment_t": [
            {
                "desc": "投射物出手位置： 攻击出手位置1 如果英雄左右手都有概率攻击 需要获取出是哪只手 用位置1还是2 如果是单手的，用这个就好了",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_1",
                "value": "1"
            },
            {
                "desc": "投射物出手位置： 攻击出手位置2 参考位置1",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_2",
                "value": "2"
            },
            {
                "desc": "投射物出手位置： 攻击出手位置3 一般用攻击1和攻击2 当1和2不满意时，尝试使用3和4",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_3",
                "value": "4"
            },
            {
                "desc": "投射物出手位置： 攻击出手位置4 参考位置3",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_4",
                "value": "5"
            },
            {
                "desc": "投射物出手位置： 受伤点 一般作为弹射、连锁闪电时用的 但最开始的投射物用这个就有点违和了",
                "name": "DOTA_PROJECTILE_ATTACHMENT_HITLOCATION",
                "value": "3"
            },
            {
                "desc": "投射物出手位置： 待写",
                "name": "DOTA_PROJECTILE_ATTACHMENT_LAST",
                "value": "6"
            },
            {
                "desc": "投射物出手位置： 默认(无)",
                "name": "DOTA_PROJECTILE_ATTACHMENT_NONE",
                "value": "0"
            }
        ],
        "DOTAScriptInventorySlot_t": [
            {
                "desc": "装备栏1",
                "name": "DOTA_ITEM_SLOT_1",
                "value": "0"
            },
            {
                "desc": "装备栏2",
                "name": "DOTA_ITEM_SLOT_2",
                "value": "1"
            },
            {
                "desc": "装备栏3",
                "name": "DOTA_ITEM_SLOT_3",
                "value": "2"
            },
            {
                "desc": "装备栏4",
                "name": "DOTA_ITEM_SLOT_4",
                "value": "3"
            },
            {
                "desc": "装备栏5",
                "name": "DOTA_ITEM_SLOT_5",
                "value": "4"
            },
            {
                "desc": "装备栏6",
                "name": "DOTA_ITEM_SLOT_6",
                "value": "5"
            },
            {
                "desc": "备用装备栏1",
                "name": "DOTA_ITEM_SLOT_7",
                "value": "6"
            },
            {
                "desc": "备用装备栏2",
                "name": "DOTA_ITEM_SLOT_8",
                "value": "7"
            },
            {
                "desc": "备用装备栏3",
                "name": "DOTA_ITEM_SLOT_9",
                "value": "8"
            },
            {
                "desc": "储存室1",
                "name": "DOTA_STASH_SLOT_1",
                "value": "9"
            },
            {
                "desc": "储存室2",
                "name": "DOTA_STASH_SLOT_2",
                "value": "10"
            },
            {
                "desc": "储存室3",
                "name": "DOTA_STASH_SLOT_3",
                "value": "11"
            },
            {
                "desc": "储存室4",
                "name": "DOTA_STASH_SLOT_4",
                "value": "12"
            },
            {
                "desc": "储存室5",
                "name": "DOTA_STASH_SLOT_5",
                "value": "13"
            },
            {
                "desc": "储存室6",
                "name": "DOTA_STASH_SLOT_6",
                "value": "14"
            }
        ],
        "quest_text_replace_values_t": [
            {
                "desc": "任务数文本替换值",
                "name": "QUEST_NUM_TEXT_REPLACE_VALUES",
                "value": "4"
            },
            {
                "desc": "任务文本替换值当前值",
                "name": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
                "value": "0"
            },
            {
                "desc": "任务文本替换价值奖励",
                "name": "QUEST_TEXT_REPLACE_VALUE_REWARD",
                "value": "3"
            },
            {
                "desc": "任务文本替换值轮",
                "name": "QUEST_TEXT_REPLACE_VALUE_ROUND",
                "value": "2"
            },
            {
                "desc": "任务文本替换值目标值",
                "name": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
                "value": "1"
            }
        ],
        "DOTASpeechType_t": [
            {
                "desc": "DOTA演讲糟糕的团队",
                "name": "DOTA_SPEECH_BAD_TEAM",
                "value": "7"
            },
            {
                "desc": "DOTA演讲优秀团队",
                "name": "DOTA_SPEECH_GOOD_TEAM",
                "value": "6"
            },
            {
                "desc": "DOTA语音收件人类型最大值",
                "name": "DOTA_SPEECH_RECIPIENT_TYPE_MAX",
                "value": "9"
            },
            {
                "desc": "DOTA演讲观众",
                "name": "DOTA_SPEECH_SPECTATOR",
                "value": "8"
            },
            {
                "desc": "DOTA语音用户全部",
                "name": "DOTA_SPEECH_USER_ALL",
                "value": "5"
            },
            {
                "desc": "DOTA语音用户无效",
                "name": "DOTA_SPEECH_USER_INVALID",
                "value": "0"
            },
            {
                "desc": "附近的DOTA语音用户",
                "name": "DOTA_SPEECH_USER_NEARBY",
                "value": "4"
            },
            {
                "desc": "DOTA语音用户单一",
                "name": "DOTA_SPEECH_USER_SINGLE",
                "value": "1"
            },
            {
                "desc": "DOTA语音用户团队",
                "name": "DOTA_SPEECH_USER_TEAM",
                "value": "2"
            },
            {
                "desc": "附近的DOTA语音用户团队",
                "name": "DOTA_SPEECH_USER_TEAM_NEARBY",
                "value": "3"
            }
        ],
        "DOTA_ABILITY_BEHAVIOR": [
            {
                "desc": "范围施法",
                "name": "DOTA_ABILITY_BEHAVIOR_AOE",
                "value": "32"
            },
            {
                "desc": "法球",
                "name": "DOTA_ABILITY_BEHAVIOR_ATTACK",
                "value": "131072"
            },
            {
                "desc": "光环_仅改变技能说明",
                "name": "DOTA_ABILITY_BEHAVIOR_AURA",
                "value": "65536"
            },
            {
                "desc": "自动施法",
                "name": "DOTA_ABILITY_BEHAVIOR_AUTOCAST",
                "value": "4096"
            },
            {
                "desc": "DOTA能力行为可以自我施放",
                "name": "DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST",
                "value": "0"
            },
            {
                "desc": "持续施法",
                "name": "DOTA_ABILITY_BEHAVIOR_CHANNELLED",
                "value": "128"
            },
            {
                "desc": "不影响朝向",
                "name": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
                "value": "1024"
            },
            {
                "desc": "不惊醒目标",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
                "value": "16777216"
            },
            {
                "desc": "不取消持续施法",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
                "value": "536870912"
            },
            {
                "desc": "不影响移动",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
                "value": "8388608"
            },
            {
                "desc": "不恢复攻击",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
                "value": "33554432"
            },
            {
                "desc": "不恢复移动",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
                "value": "262144"
            },
            {
                "desc": "DOTA能力-行为-自由绘制目标",
                "name": "DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING",
                "value": "0"
            },
            {
                "desc": "隐藏技能",
                "name": "DOTA_ABILITY_BEHAVIOR_HIDDEN",
                "value": "1"
            },
            {
                "desc": "忽略后摇",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
                "value": "134217728"
            },
            {
                "desc": "施法打断有效",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
                "value": "4194304"
            },
            {
                "desc": "自动施法_总有效",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
                "value": "2097152"
            },
            {
                "desc": "立即施法：忽视前摇",
                "name": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
                "value": "2048"
            },
            {
                "desc": "物品目标",
                "name": "DOTA_ABILITY_BEHAVIOR_ITEM",
                "value": "256"
            },
            {
                "desc": "DOTA能力行为的最后求助点",
                "name": "DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT",
                "value": "-2147483648"
            },
            {
                "desc": "DOTA能力行为无",
                "name": "DOTA_ABILITY_BEHAVIOR_NONE",
                "value": "0"
            },
            {
                "desc": "被偷取技能不影响施法",
                "name": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
                "value": "67108864"
            },
            {
                "desc": "无法作为升级的技能",
                "name": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
                "value": "64"
            },
            {
                "desc": "无目标施法",
                "name": "DOTA_ABILITY_BEHAVIOR_NO_TARGET",
                "value": "4"
            },
            {
                "desc": "可选无目标?",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
                "value": "32768"
            },
            {
                "desc": "DOTA能力行为可选点",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
                "value": "16384"
            },
            {
                "desc": "可选单位目标?",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
                "value": "8192"
            },
            {
                "desc": "被动",
                "name": "DOTA_ABILITY_BEHAVIOR_PASSIVE",
                "value": "2"
            },
            {
                "desc": "点目标",
                "name": "DOTA_ABILITY_BEHAVIOR_POINT",
                "value": "16"
            },
            {
                "desc": "定身无法释放",
                "name": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
                "value": "524288"
            },
            {
                "desc": "神符目标",
                "name": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
                "value": "268435456"
            },
            {
                "desc": "指南中显示的DOTA能力行为",
                "name": "DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES",
                "value": "0"
            },
            {
                "desc": "DOTA能力行为抑制相关消耗品",
                "name": "DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE",
                "value": "0"
            },
            {
                "desc": "切换型",
                "name": "DOTA_ABILITY_BEHAVIOR_TOGGLE",
                "value": "512"
            },
            {
                "desc": "单位目标",
                "name": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
                "value": "8"
            },
            {
                "desc": "DOTA能力行为被效果索引解锁",
                "name": "DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX",
                "value": "0"
            },
            {
                "desc": "无视限制",
                "name": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
                "value": "1048576"
            },
            {
                "desc": "DOTA能力行为向量定向",
                "name": "DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING",
                "value": "1073741824"
            }
        ],
        "DOTATeam_t": [
            {
                "desc": "夜魇",
                "name": "DOTA_TEAM_BADGUYS",
                "value": "3"
            },
            {
                "desc": "DOTA团队计数",
                "name": "DOTA_TEAM_COUNT",
                "value": "14"
            },
            {
                "desc": "DOTA团队自定义1",
                "name": "DOTA_TEAM_CUSTOM_1",
                "value": "6"
            },
            {
                "desc": "DOTA团队自定义2",
                "name": "DOTA_TEAM_CUSTOM_2",
                "value": "7"
            },
            {
                "desc": "DOTA团队自定义3",
                "name": "DOTA_TEAM_CUSTOM_3",
                "value": "8"
            },
            {
                "desc": "DOTA团队自定义4",
                "name": "DOTA_TEAM_CUSTOM_4",
                "value": "9"
            },
            {
                "desc": "DOTA团队自定义5",
                "name": "DOTA_TEAM_CUSTOM_5",
                "value": "10"
            },
            {
                "desc": "DOTA团队自定义6",
                "name": "DOTA_TEAM_CUSTOM_6",
                "value": "11"
            },
            {
                "desc": "DOTA团队自定义7",
                "name": "DOTA_TEAM_CUSTOM_7",
                "value": "12"
            },
            {
                "desc": "DOTA团队自定义8",
                "name": "DOTA_TEAM_CUSTOM_8",
                "value": "13"
            },
            {
                "desc": "DOTA团队自定义计数",
                "name": "DOTA_TEAM_CUSTOM_COUNT",
                "value": "8"
            },
            {
                "desc": "DOTA团队自定义最大值",
                "name": "DOTA_TEAM_CUSTOM_MAX",
                "value": "13"
            },
            {
                "desc": "DOTA团队自定义最小值",
                "name": "DOTA_TEAM_CUSTOM_MIN",
                "value": "6"
            },
            {
                "desc": "DOTA团队第一",
                "name": "DOTA_TEAM_FIRST",
                "value": "2"
            },
            {
                "desc": "天辉",
                "name": "DOTA_TEAM_GOODGUYS",
                "value": "2"
            },
            {
                "desc": "野怪队伍",
                "name": "DOTA_TEAM_NEUTRALS",
                "value": "4"
            },
            {
                "desc": "没有队伍",
                "name": "DOTA_TEAM_NOTEAM",
                "value": "5"
            }
        ],
        "EDOTA_ModifyGold_Reason": [
            {
                "desc": "修改金币的原因: 放弃再分配",
                "name": "DOTA_ModifyGold_AbandonedRedistribute",
                "value": "5"
            },
            {
                "desc": "修改金币的原因: 技能消耗金币",
                "name": "DOTA_ModifyGold_AbilityCost",
                "value": "7"
            },
            {
                "desc": "修改金币的原因: 技能金币？",
                "name": "DOTA_ModifyGold_AbilityGold",
                "value": "19"
            },
            {
                "desc": "修改金币的原因: 赏金神符",
                "name": "DOTA_ModifyGold_BountyRune",
                "value": "17"
            },
            {
                "desc": "修改金币的原因: 建筑",
                "name": "DOTA_ModifyGold_Building",
                "value": "11"
            },
            {
                "desc": "修改金币的原因: 买活",
                "name": "DOTA_ModifyGold_Buyback",
                "value": "2"
            },
            {
                "desc": "修改金币的原因: 作弊命令",
                "name": "DOTA_ModifyGold_CheatCommand",
                "value": "8"
            },
            {
                "desc": "修改金币的原因: 击杀信使",
                "name": "DOTA_ModifyGold_CourierKill",
                "value": "16"
            },
            {
                "desc": "修改金币的原因: 击杀野怪",
                "name": "DOTA_ModifyGold_CreepKill",
                "value": "13"
            },
            {
                "desc": "修改金币的原因: 死亡",
                "name": "DOTA_ModifyGold_Death",
                "value": "1"
            },
            {
                "desc": "修改金币的原因: 每秒跳票",
                "name": "DOTA_ModifyGold_GameTick",
                "value": "10"
            },
            {
                "desc": "修改金币的原因: 击杀英雄",
                "name": "DOTA_ModifyGold_HeroKill",
                "value": "12"
            },
            {
                "desc": "修改金币的原因: 击杀中立单位",
                "name": "DOTA_ModifyGold_NeutralKill",
                "value": "14"
            },
            {
                "desc": "修改金币的原因: 购买消耗品？",
                "name": "DOTA_ModifyGold_PurchaseConsumable",
                "value": "3"
            },
            {
                "desc": "修改金币的原因: 购买物品？",
                "name": "DOTA_ModifyGold_PurchaseItem",
                "value": "4"
            },
            {
                "desc": "修改金币的原因: 击杀肉山",
                "name": "DOTA_ModifyGold_RoshanKill",
                "value": "15"
            },
            {
                "desc": "修改金币的原因: 没有按时选择英雄的选择惩罚",
                "name": "DOTA_ModifyGold_SelectionPenalty",
                "value": "9"
            },
            {
                "desc": "修改金币的原因: 出售物品",
                "name": "DOTA_ModifyGold_SellItem",
                "value": "6"
            },
            {
                "desc": "修改金币的原因: 共享黄金",
                "name": "DOTA_ModifyGold_SharedGold",
                "value": "18"
            },
            {
                "desc": "修改金币的原因: 未知",
                "name": "DOTA_ModifyGold_Unspecified",
                "value": "0"
            },
            {
                "desc": "修改金币的原因: 躲避击杀？",
                "name": "DOTA_ModifyGold_WardKill",
                "value": "20"
            }
        ],
        "DOTAUnitAttackCapability_t": [
            {
                "desc": "DOTA单位攻击能力位计数",
                "name": "DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT",
                "value": "3"
            },
            {
                "desc": "攻击类型: 近战",
                "name": "DOTA_UNIT_CAP_MELEE_ATTACK",
                "value": "1"
            },
            {
                "desc": "攻击类型: 不能攻击",
                "name": "DOTA_UNIT_CAP_NO_ATTACK",
                "value": "0"
            },
            {
                "desc": "攻击类型: 远程",
                "name": "DOTA_UNIT_CAP_RANGED_ATTACK",
                "value": "2"
            },
            {
                "desc": "DOTA单位上限远程攻击方向",
                "name": "DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL",
                "value": "4"
            }
        ],
        "DOTAUnitMoveCapability_t": [
            {
                "desc": "飞行单位",
                "name": "DOTA_UNIT_CAP_MOVE_FLY",
                "value": "2"
            },
            {
                "desc": "地面单位",
                "name": "DOTA_UNIT_CAP_MOVE_GROUND",
                "value": "1"
            },
            {
                "desc": "无移动方式",
                "name": "DOTA_UNIT_CAP_MOVE_NONE",
                "value": "0"
            }
        ],
        "DOTA_GameState": [
            {
                "desc": "游戏阶段：队伍选择",
                "name": "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
                "value": "2"
            },
            {
                "desc": "游戏阶段：断开连接",
                "name": "DOTA_GAMERULES_STATE_DISCONNECT",
                "value": "10"
            },
            {
                "desc": "游戏阶段：游戏正在进行中",
                "name": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
                "value": "8"
            },
            {
                "desc": "游戏阶段：英雄选择",
                "name": "DOTA_GAMERULES_STATE_HERO_SELECTION",
                "value": "3"
            },
            {
                "desc": "游戏阶段：创建游戏",
                "name": "DOTA_GAMERULES_STATE_INIT",
                "value": "0"
            },
            {
                "desc": "游戏阶段：游戏结束",
                "name": "DOTA_GAMERULES_STATE_POST_GAME",
                "value": "9"
            },
            {
                "desc": "游戏阶段：前状态",
                "name": "DOTA_GAMERULES_STATE_PRE_GAME",
                "value": "7"
            },
            {
                "desc": "游戏阶段：策略时间",
                "name": "DOTA_GAMERULES_STATE_STRATEGY_TIME",
                "value": "4"
            },
            {
                "desc": "游戏阶段：英雄展示",
                "name": "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
                "value": "5"
            },
            {
                "desc": "游戏阶段：地图渲染",
                "name": "DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD",
                "value": "6"
            },
            {
                "desc": "游戏阶段：等待玩家载入",
                "name": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
                "value": "1"
            }
        ],
        "subquest_text_replace_values_t": [
            {
                "desc": "子任务NUM文本替换值",
                "name": "SUBQUEST_NUM_TEXT_REPLACE_VALUES",
                "value": "2"
            },
            {
                "desc": "子任务文本替换值当前值",
                "name": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
                "value": "0"
            },
            {
                "desc": "子任务文本替换值目标值",
                "name": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
                "value": "1"
            }
        ],
        "DOTA_UNIT_TARGET_FLAGS": [
            {
                "desc": "目标标签：检测玩家禁用帮助选项：禁止队友对自己使用技能 如海民的雪球",
                "name": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
                "value": "65536"
            },
            {
                "desc": "目标标签：死亡(听说已失效)",
                "name": "DOTA_UNIT_TARGET_FLAG_DEAD",
                "value": "8"
            },
            {
                "desc": "目标标签：可见",
                "name": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
                "value": "128"
            },
            {
                "desc": "目标标签：无敌",
                "name": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
                "value": "64"
            },
            {
                "desc": "目标标签：魔免",
                "name": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
                "value": "16"
            },
            {
                "desc": "目标标签：有蓝条的",
                "name": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
                "value": "32768"
            },
            {
                "desc": "目标标签：近战",
                "name": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
                "value": "4"
            },
            {
                "desc": "目标标签：无",
                "name": "DOTA_UNIT_TARGET_FLAG_NONE",
                "value": "0"
            },
            {
                "desc": "目标标签：非远古",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
                "value": "512"
            },
            {
                "desc": "目标标签：非攻击免疫",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
                "value": "16384"
            },
            {
                "desc": "目标标签：非地面英雄",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
                "value": "131072"
            },
            {
                "desc": "目标标签：非支配控制",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
                "value": "2048"
            },
            {
                "desc": "目标标签：非幻象",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
                "value": "8192"
            },
            {
                "desc": "目标标签：非魔免",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
                "value": "32"
            },
            {
                "desc": "目标标签：非催眠的",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
                "value": "524288"
            },
            {
                "desc": "目标标签：非召唤物",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
                "value": "4096"
            },
            {
                "desc": "目标标签：不可见",
                "name": "DOTA_UNIT_TARGET_FLAG_NO_INVIS",
                "value": "256"
            },
            {
                "desc": "目标标签：被OUT出世界的？ 待纠正",
                "name": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
                "value": "262144"
            },
            {
                "desc": "目标标签：玩家控制的",
                "name": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
                "value": "1024"
            },
            {
                "desc": "目标标签：敌人优先",
                "name": "DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES",
                "value": "1048576"
            },
            {
                "desc": "目标标签：远程",
                "name": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
                "value": "2"
            },
            {
                "desc": "目标标签：非障碍物",
                "name": "DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS",
                "value": "2097152"
            }
        ],
        "DOTA_HeroPickState": [
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
                "value": "57"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_AP_SELECT",
                "value": "1"
            },
            {
                "desc": "选择一个状态",
                "name": "DOTA_HEROPICK_STATE_AR_SELECT",
                "value": "32"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_BD_SELECT",
                "value": "54"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN1",
                "value": "37"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN2",
                "value": "38"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN3",
                "value": "39"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN4",
                "value": "40"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN5",
                "value": "41"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_BAN6",
                "value": "42"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
                "value": "36"
            },
            {
                "desc": "   ",
                "name": "DOTA_HEROPICK_STATE_CD_INTRO",
                "value": "35"
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_CD_PICK",
                "value": "53"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT1",
                "value": "43"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT10",
                "value": "52"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT2",
                "value": "44"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT3",
                "value": "45"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT4",
                "value": "46"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT5",
                "value": "47"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT6",
                "value": "48"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT7",
                "value": "49"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT8",
                "value": "50"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT9",
                "value": "51"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN1",
                "value": "7"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN10",
                "value": "16"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN11",
                "value": "17"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN12",
                "value": "18"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN13",
                "value": "19"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_BAN14",
                "value": "20"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN2",
                "value": "8"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN3",
                "value": "9"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN4",
                "value": "10"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN5",
                "value": "11"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN6",
                "value": "12"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN7",
                "value": "13"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN8",
                "value": "14"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN9",
                "value": "15"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
                "value": "6"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_INTRO",
                "value": "5"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_PICK",
                "value": "31"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT1",
                "value": "21"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT10",
                "value": "30"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT2",
                "value": "22"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT3",
                "value": "23"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT4",
                "value": "24"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT5",
                "value": "25"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT6",
                "value": "26"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT7",
                "value": "27"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT8",
                "value": "28"
            },
            {
                "desc": "  ",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT9",
                "value": "29"
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_COUNT",
                "value": "61"
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES",
                "value": "60"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_FH_SELECT",
                "value": "34"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED",
                "value": "3"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_MO_SELECT",
                "value": "33"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_NONE",
                "value": "0"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_RD_SELECT_UNUSED",
                "value": "4"
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_SD_SELECT",
                "value": "2"
            },
            {
                "desc": " ",
                "name": "DOTA_HEROPICK_STATE_SELECT_PENALTY",
                "value": "59"
            },
            {
                "desc": "英雄选择状态能力选秀",
                "name": "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
                "value": "55"
            },
            {
                "desc": "    ",
                "name": "DOTA_HERO_PICK_STATE_ARDM_SELECT",
                "value": "56"
            },
            {
                "desc": "英雄选择状态自定义游戏选择",
                "name": "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
                "value": "58"
            }
        ],
        "modifierpriority": [
            {
                "desc": "修改器优先级高",
                "name": "MODIFIER_PRIORITY_HIGH",
                "value": "2"
            },
            {
                "desc": "修改器优先级低",
                "name": "MODIFIER_PRIORITY_LOW",
                "value": "0"
            },
            {
                "desc": "修改器优先级正常",
                "name": "MODIFIER_PRIORITY_NORMAL",
                "value": "1"
            },
            {
                "desc": "超优先级修改器",
                "name": "MODIFIER_PRIORITY_SUPER_ULTRA",
                "value": "4"
            },
            {
                "desc": "修改器优先级超",
                "name": "MODIFIER_PRIORITY_ULTRA",
                "value": "3"
            }
        ],
        "DOTA_MOTION_CONTROLLER_PRIORITY": [
            {
                "desc": "DOTA运动控制器：优先级高",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
                "value": "3"
            },
            {
                "desc": "DOTA运动控制器：优先级最高",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
                "value": "4"
            },
            {
                "desc": "DOTA运动控制器：优先级低",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
                "value": "1"
            },
            {
                "desc": "DOTA运动控制器：优先级最低",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
                "value": "0"
            },
            {
                "desc": "DOTA运动控制器：优先级介质",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
                "value": "2"
            }
        ],
        "DOTA_SHOP_TYPE": [
            {
                "desc": "商店类型: 自定义商店",
                "name": "DOTA_SHOP_CUSTOM",
                "value": "6"
            },
            {
                "desc": "商店类型: ",
                "name": "DOTA_SHOP_GROUND",
                "value": "3"
            },
            {
                "desc": "商店类型: 温泉",
                "name": "DOTA_SHOP_HOME",
                "value": "0"
            },
            {
                "desc": "商店类型: 中立商店？",
                "name": "DOTA_SHOP_NEUTRALS",
                "value": "7"
            },
            {
                "desc": "商店类型: 无",
                "name": "DOTA_SHOP_NONE",
                "value": "8"
            },
            {
                "desc": "商店类型: 神秘商店",
                "name": "DOTA_SHOP_SECRET",
                "value": "2"
            },
            {
                "desc": "商店类型: 神秘商店2",
                "name": "DOTA_SHOP_SECRET2",
                "value": "5"
            },
            {
                "desc": "商店类型: 边路",
                "name": "DOTA_SHOP_SIDE",
                "value": "1"
            },
            {
                "desc": "商店类型: 边路2",
                "name": "DOTA_SHOP_SIDE2",
                "value": "4"
            }
        ],
        "DOTA_RUNES": [
            {
                "desc": "奥术神符",
                "name": "DOTA_RUNE_ARCANE",
                "value": "6"
            },
            {
                "desc": "赏金神符",
                "name": "DOTA_RUNE_BOUNTY",
                "value": "5"
            },
            {
                "desc": "神符计数",
                "name": "DOTA_RUNE_COUNT",
                "value": "8"
            },
            {
                "desc": "双倍伤害神符",
                "name": "DOTA_RUNE_DOUBLEDAMAGE",
                "value": "0"
            },
            {
                "desc": "急速神符",
                "name": "DOTA_RUNE_HASTE",
                "value": "1"
            },
            {
                "desc": "幻像神符",
                "name": "DOTA_RUNE_ILLUSION",
                "value": "2"
            },
            {
                "desc": "无效神符",
                "name": "DOTA_RUNE_INVALID",
                "value": "-1"
            },
            {
                "desc": "隐身神符",
                "name": "DOTA_RUNE_INVISIBILITY",
                "value": "3"
            },
            {
                "desc": "恢复神符 ",
                "name": "DOTA_RUNE_REGENERATION",
                "value": "4"
            },
            {
                "desc": "经验神符",
                "name": "DOTA_RUNE_XP",
                "value": "7"
            }
        ],
        "DOTA_UNIT_TARGET_TYPE": [
            {
                "desc": "目标类型要求： 全部（单位和建筑）",
                "name": "DOTA_UNIT_TARGET_ALL",
                "value": "55"
            },
            {
                "desc": "目标类型要求： 基础",
                "name": "DOTA_UNIT_TARGET_BASIC",
                "value": "18"
            },
            {
                "desc": "目标类型要求： 建筑",
                "name": "DOTA_UNIT_TARGET_BUILDING",
                "value": "4"
            },
            {
                "desc": "目标类型要求： 信使",
                "name": "DOTA_UNIT_TARGET_COURIER",
                "value": "16"
            },
            {
                "desc": "目标类型要求： 野怪",
                "name": "DOTA_UNIT_TARGET_CREEP",
                "value": "2"
            },
            {
                "desc": "目标类型要求： 自定义",
                "name": "DOTA_UNIT_TARGET_CUSTOM",
                "value": "128"
            },
            {
                "desc": "目标类型要求： 英雄",
                "name": "DOTA_UNIT_TARGET_HERO",
                "value": "1"
            },
            {
                "desc": "目标类型要求： 无",
                "name": "DOTA_UNIT_TARGET_NONE",
                "value": "0"
            },
            {
                "desc": "目标类型要求： 其他",
                "name": "DOTA_UNIT_TARGET_OTHER",
                "value": "32"
            },
            {
                "desc": "目标类型要求： 树",
                "name": "DOTA_UNIT_TARGET_TREE",
                "value": "64"
            }
        ],
        "DamageCategory_t": [
            {
                "desc": "DOTA伤害类别：攻击",
                "name": "DOTA_DAMAGE_CATEGORY_ATTACK",
                "value": "1"
            },
            {
                "desc": "DOTA伤害类别：法术",
                "name": "DOTA_DAMAGE_CATEGORY_SPELL",
                "value": "0"
            }
        ],
        "GameActivity_t": [
            {
                "desc": "道塔炼金术士化学狂暴结束",
                "name": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END",
                "value": "1580"
            },
            {
                "desc": "道塔炼金术士化学狂暴开始",
                "name": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START",
                "value": "1572"
            },
            {
                "desc": "道塔炼金术士配制",
                "name": "ACT_DOTA_ALCHEMIST_CONCOCTION",
                "value": "1573"
            },
            {
                "desc": "道塔炼金术士调制投掷",
                "name": "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW",
                "value": "1579"
            },
            {
                "desc": "多塔伏击",
                "name": "ACT_DOTA_AMBUSH",
                "value": "1627"
            },
            {
                "desc": "祖宗精神",
                "name": "ACT_DOTA_ANCESTRAL_SPIRIT",
                "value": "1677"
            },
            {
                "desc": "北极燃烧结束",
                "name": "ACT_DOTA_ARCTIC_BURN_END",
                "value": "1682"
            },
            {
                "desc": "区域拒绝行为",
                "name": "ACT_DOTA_AREA_DENY",
                "value": "1661"
            },
            {
                "desc": "攻击",
                "name": "ACT_DOTA_ATTACK",
                "value": "1503"
            },
            {
                "desc": "攻击2",
                "name": "ACT_DOTA_ATTACK2",
                "value": "1504"
            },
            {
                "desc": "ACT DOTA攻击事件",
                "name": "ACT_DOTA_ATTACK_EVENT",
                "value": "1505"
            },
            {
                "desc": "行为攻击事件重击",
                "name": "ACT_DOTA_ATTACK_EVENT_BASH",
                "value": "1705"
            },
            {
                "desc": "实际磁场",
                "name": "ACT_DOTA_AW_MAGNETIC_FIELD",
                "value": "1707"
            },
            {
                "desc": "一幕腹痛结束",
                "name": "ACT_DOTA_BELLYACHE_END",
                "value": "1614"
            },
            {
                "desc": "腹痛环",
                "name": "ACT_DOTA_BELLYACHE_LOOP",
                "value": "1613"
            },
            {
                "desc": "开始腹痛",
                "name": "ACT_DOTA_BELLYACHE_START",
                "value": "1612"
            },
            {
                "desc": "多塔闪现匕首",
                "name": "ACT_DOTA_BLINK_DAGGER",
                "value": "1732"
            },
            {
                "desc": "多塔闪现匕首",
                "name": "ACT_DOTA_BLINK_DAGGER_END",
                "value": "1733"
            },
            {
                "desc": "摧毁多塔大桥",
                "name": "ACT_DOTA_BRIDGE_DESTROY",
                "value": "1640"
            },
            {
                "desc": "多塔大桥威胁",
                "name": "ACT_DOTA_BRIDGE_THREAT",
                "value": "1650"
            },
            {
                "desc": "多塔关在笼子里的暴怒",
                "name": "ACT_DOTA_CAGED_CREEP_RAGE",
                "value": "1644"
            },
            {
                "desc": "把愤怒关在笼子里",
                "name": "ACT_DOTA_CAGED_CREEP_RAGE_OUT",
                "value": "1645"
            },
            {
                "desc": "多塔关在笼子里偷袭",
                "name": "ACT_DOTA_CAGED_CREEP_SMASH",
                "value": "1646"
            },
            {
                "desc": "一个被关在笼子里的小东西砸碎了",
                "name": "ACT_DOTA_CAGED_CREEP_SMASH_OUT",
                "value": "1647"
            },
            {
                "desc": "取消塞壬之歌",
                "name": "ACT_DOTA_CANCEL_SIREN_SONG",
                "value": "1599"
            },
            {
                "desc": "动作捕捉",
                "name": "ACT_DOTA_CAPTURE",
                "value": "1533"
            },
            {
                "desc": "ACT DOTA捕获卡",
                "name": "ACT_DOTA_CAPTURE_CARD",
                "value": "1717"
            },
            {
                "desc": "捕捉宠物",
                "name": "ACT_DOTA_CAPTURE_PET",
                "value": "1698"
            },
            {
                "desc": "动作捕捉稀有",
                "name": "ACT_DOTA_CAPTURE_RARE",
                "value": "1706"
            },
            {
                "desc": "施法技能1",
                "name": "ACT_DOTA_CAST_ABILITY_1",
                "value": "1510"
            },
            {
                "desc": "施法技能1结束",
                "name": "ACT_DOTA_CAST_ABILITY_1_END",
                "value": "1540"
            },
            {
                "desc": "施法技能2",
                "name": "ACT_DOTA_CAST_ABILITY_2",
                "value": "1511"
            },
            {
                "desc": "行动点施法异能2盟友",
                "name": "ACT_DOTA_CAST_ABILITY_2_ALLY",
                "value": "1748"
            },
            {
                "desc": "施法技能2结束",
                "name": "ACT_DOTA_CAST_ABILITY_2_END",
                "value": "1541"
            },
            {
                "desc": "行动点施法异能2掷骰",
                "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL",
                "value": "1653"
            },
            {
                "desc": "行动点施法异能2掷骰结束",
                "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END",
                "value": "1654"
            },
            {
                "desc": "行动点施法异能2掷骰开始",
                "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START",
                "value": "1652"
            },
            {
                "desc": "施法技能3",
                "name": "ACT_DOTA_CAST_ABILITY_3",
                "value": "1512"
            },
            {
                "desc": "施法技能3结束",
                "name": "ACT_DOTA_CAST_ABILITY_3_END",
                "value": "1542"
            },
            {
                "desc": "施法技能4",
                "name": "ACT_DOTA_CAST_ABILITY_4",
                "value": "1513"
            },
            {
                "desc": "施法技能4结束",
                "name": "ACT_DOTA_CAST_ABILITY_4_END",
                "value": "1543"
            },
            {
                "desc": "施法技能5",
                "name": "ACT_DOTA_CAST_ABILITY_5",
                "value": "1514"
            },
            {
                "desc": "施法技能6",
                "name": "ACT_DOTA_CAST_ABILITY_6",
                "value": "1515"
            },
            {
                "desc": "施法技能7",
                "name": "ACT_DOTA_CAST_ABILITY_7",
                "value": "1598"
            },
            {
                "desc": "行为点施法技能腐烂",
                "name": "ACT_DOTA_CAST_ABILITY_ROT",
                "value": "1547"
            },
            {
                "desc": "动作敏捷",
                "name": "ACT_DOTA_CAST_ALACRITY",
                "value": "1585"
            },
            {
                "desc": "多塔施放灵光宝珠",
                "name": "ACT_DOTA_CAST_ALACRITY_ORB",
                "value": "1741"
            },
            {
                "desc": "ACT DOTA铸造洞底",
                "name": "ACT_DOTA_CAST_BURROW_END",
                "value": "1702"
            },
            {
                "desc": "多塔投下混乱流星",
                "name": "ACT_DOTA_CAST_CHAOS_METEOR",
                "value": "1586"
            },
            {
                "desc": "多塔星投混沌流星球",
                "name": "ACT_DOTA_CAST_CHAOS_METEOR_ORB",
                "value": "1742"
            },
            {
                "desc": "多塔投寒流",
                "name": "ACT_DOTA_CAST_COLD_SNAP",
                "value": "1581"
            },
            {
                "desc": "ACT DOTA投射寒流球",
                "name": "ACT_DOTA_CAST_COLD_SNAP_ORB",
                "value": "1737"
            },
            {
                "desc": "多塔投下震耳欲聋的爆炸声",
                "name": "ACT_DOTA_CAST_DEAFENING_BLAST",
                "value": "1590"
            },
            {
                "desc": "ACT DOTA铸造震耳欲聋的爆破球",
                "name": "ACT_DOTA_CAST_DEAFENING_BLAST_ORB",
                "value": "1746"
            },
            {
                "desc": "施放龙息",
                "name": "ACT_DOTA_CAST_DRAGONBREATH",
                "value": "1538"
            },
            {
                "desc": "多塔演员表演",
                "name": "ACT_DOTA_CAST_EMP",
                "value": "1584"
            },
            {
                "desc": "道塔铸造EMP球体",
                "name": "ACT_DOTA_CAST_EMP_ORB",
                "value": "1740"
            },
            {
                "desc": "多塔铸造锻造精神",
                "name": "ACT_DOTA_CAST_FORGE_SPIRIT",
                "value": "1588"
            },
            {
                "desc": "道塔铸造铸造精神之球",
                "name": "ACT_DOTA_CAST_FORGE_SPIRIT_ORB",
                "value": "1744"
            },
            {
                "desc": "多塔扮演幽灵船",
                "name": "ACT_DOTA_CAST_GHOST_SHIP",
                "value": "1708"
            },
            {
                "desc": "多塔扮演鬼走",
                "name": "ACT_DOTA_CAST_GHOST_WALK",
                "value": "1582"
            },
            {
                "desc": "道塔施法幽灵行走球",
                "name": "ACT_DOTA_CAST_GHOST_WALK_ORB",
                "value": "1738"
            },
            {
                "desc": "多塔铸冰墙",
                "name": "ACT_DOTA_CAST_ICE_WALL",
                "value": "1589"
            },
            {
                "desc": "多塔铸冰墙圆球",
                "name": "ACT_DOTA_CAST_ICE_WALL_ORB",
                "value": "1745"
            },
            {
                "desc": "多塔扮演生命的终结",
                "name": "ACT_DOTA_CAST_LIFE_BREAK_END",
                "value": "1564"
            },
            {
                "desc": "第二幕：人生转折点",
                "name": "ACT_DOTA_CAST_LIFE_BREAK_START",
                "value": "1563"
            },
            {
                "desc": "ACT DOTA投射折射",
                "name": "ACT_DOTA_CAST_REFRACTION",
                "value": "1597"
            },
            {
                "desc": "多塔投射阳光",
                "name": "ACT_DOTA_CAST_SUN_STRIKE",
                "value": "1587"
            },
            {
                "desc": "道塔投下太阳打击球",
                "name": "ACT_DOTA_CAST_SUN_STRIKE_ORB",
                "value": "1743"
            },
            {
                "desc": "多塔投龙卷风",
                "name": "ACT_DOTA_CAST_TORNADO",
                "value": "1583"
            },
            {
                "desc": "多塔星投龙卷风球",
                "name": "ACT_DOTA_CAST_TORNADO_ORB",
                "value": "1739"
            },
            {
                "desc": "多塔投野斧结束",
                "name": "ACT_DOTA_CAST_WILD_AXES_END",
                "value": "1562"
            },
            {
                "desc": "ACT DOTA半人马踩踏",
                "name": "ACT_DOTA_CENTAUR_STAMPEDE",
                "value": "1611"
            },
            {
                "desc": "施法持续施法技能1",
                "name": "ACT_DOTA_CHANNEL_ABILITY_1",
                "value": "1520"
            },
            {
                "desc": "施法持续施法技能2",
                "name": "ACT_DOTA_CHANNEL_ABILITY_2",
                "value": "1521"
            },
            {
                "desc": "施法持续施法技能3",
                "name": "ACT_DOTA_CHANNEL_ABILITY_3",
                "value": "1522"
            },
            {
                "desc": "施法持续施法技能4",
                "name": "ACT_DOTA_CHANNEL_ABILITY_4",
                "value": "1523"
            },
            {
                "desc": "施法持续施法技能5",
                "name": "ACT_DOTA_CHANNEL_ABILITY_5",
                "value": "1524"
            },
            {
                "desc": "施法持续施法技能6",
                "name": "ACT_DOTA_CHANNEL_ABILITY_6",
                "value": "1525"
            },
            {
                "desc": "施法持续施法技能7",
                "name": "ACT_DOTA_CHANNEL_ABILITY_7",
                "value": "1600"
            },
            {
                "desc": "结束持续施法技能1",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_1",
                "value": "1526"
            },
            {
                "desc": "结束持续施法技能2",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_2",
                "value": "1527"
            },
            {
                "desc": "结束持续施法技能3",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_3",
                "value": "1528"
            },
            {
                "desc": "结束持续施法技能4",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_4",
                "value": "1529"
            },
            {
                "desc": "结束持续施法技能5",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_5",
                "value": "1530"
            },
            {
                "desc": "结束持续施法技能6",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_6",
                "value": "1531"
            },
            {
                "desc": "行为令人毛骨悚然",
                "name": "ACT_DOTA_CHILLING_TOUCH",
                "value": "1673"
            },
            {
                "desc": "行为冷淡",
                "name": "ACT_DOTA_COLD_FEET",
                "value": "1671"
            },
            {
                "desc": "ACT DOTA常量层",
                "name": "ACT_DOTA_CONSTANT_LAYER",
                "value": "1532"
            },
            {
                "desc": "ACT DOTA定制塔攻击",
                "name": "ACT_DOTA_CUSTOM_TOWER_ATTACK",
                "value": "1734"
            },
            {
                "desc": "ACT DOTA定制塔模",
                "name": "ACT_DOTA_CUSTOM_TOWER_DIE",
                "value": "1736"
            },
            {
                "desc": "ACT DOTA定制塔闲置",
                "name": "ACT_DOTA_CUSTOM_TOWER_IDLE",
                "value": "1735"
            },
            {
                "desc": "多塔达贡剧院",
                "name": "ACT_DOTA_DAGON",
                "value": "1651"
            },
            {
                "desc": "第二幕狙击手之死",
                "name": "ACT_DOTA_DEATH_BY_SNIPER",
                "value": "1642"
            },
            {
                "desc": "失败的行为",
                "name": "ACT_DOTA_DEFEAT",
                "value": "1592"
            },
            {
                "desc": "行动失败开始",
                "name": "ACT_DOTA_DEFEAT_START",
                "value": "1711"
            },
            {
                "desc": "死亡",
                "name": "ACT_DOTA_DIE",
                "value": "1506"
            },
            {
                "desc": "特殊死亡",
                "name": "ACT_DOTA_DIE_SPECIAL",
                "value": "1548"
            },
            {
                "desc": "禁用",
                "name": "ACT_DOTA_DISABLED",
                "value": "1509"
            },
            {
                "desc": "ACT DOTA DP精神虹吸管",
                "name": "ACT_DOTA_DP_SPIRIT_SIPHON",
                "value": "1712"
            },
            {
                "desc": "行动多塔震慑图腾攻击",
                "name": "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK",
                "value": "1570"
            },
            {
                "desc": "回音重击",
                "name": "ACT_DOTA_ECHO_SLAM",
                "value": "1539"
            },
            {
                "desc": "衰弱的行为",
                "name": "ACT_DOTA_ENFEEBLE",
                "value": "1674"
            },
            {
                "desc": "行为是点石成金的",
                "name": "ACT_DOTA_ES_STONE_CALLER",
                "value": "1714"
            },
            {
                "desc": "致命债券法案",
                "name": "ACT_DOTA_FATAL_BONDS",
                "value": "1675"
            },
            {
                "desc": "连枷",
                "name": "ACT_DOTA_FLAIL",
                "value": "1508"
            },
            {
                "desc": "多塔逃离",
                "name": "ACT_DOTA_FLEE",
                "value": "1685"
            },
            {
                "desc": "退缩",
                "name": "ACT_DOTA_FLINCH",
                "value": "1507"
            },
            {
                "desc": "DOTA FORCESTAFF结束法案",
                "name": "ACT_DOTA_FORCESTAFF_END",
                "value": "1602"
            },
            {
                "desc": "失意行为",
                "name": "ACT_DOTA_FRUSTRATION",
                "value": "1630"
            },
            {
                "desc": "法案",
                "name": "ACT_DOTA_FXANIM",
                "value": "1709"
            },
            {
                "desc": "ACT DOTA通用频道1",
                "name": "ACT_DOTA_GENERIC_CHANNEL_1",
                "value": "1728"
            },
            {
                "desc": "ACT DOTA手势重音",
                "name": "ACT_DOTA_GESTURE_ACCENT",
                "value": "1625"
            },
            {
                "desc": "动作点手势",
                "name": "ACT_DOTA_GESTURE_POINT",
                "value": "1624"
            },
            {
                "desc": "多塔问候",
                "name": "ACT_DOTA_GREET",
                "value": "1690"
            },
            {
                "desc": "多塔·格里维尔眨骨头",
                "name": "ACT_DOTA_GREEVIL_BLINK_BONE",
                "value": "1621"
            },
            {
                "desc": "多塔·格里维尔·卡斯特",
                "name": "ACT_DOTA_GREEVIL_CAST",
                "value": "1617"
            },
            {
                "desc": "多塔格里维尔钩尾",
                "name": "ACT_DOTA_GREEVIL_HOOK_END",
                "value": "1620"
            },
            {
                "desc": "动作DOTA GREEVIL钩子开始",
                "name": "ACT_DOTA_GREEVIL_HOOK_START",
                "value": "1619"
            },
            {
                "desc": "道塔-格里维尔超驰能力",
                "name": "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY",
                "value": "1618"
            },
            {
                "desc": "行为多塔GS墨水生物",
                "name": "ACT_DOTA_GS_INK_CREATURE",
                "value": "1730"
            },
            {
                "desc": "灵魂之链",
                "name": "ACT_DOTA_GS_SOUL_CHAIN",
                "value": "1729"
            },
            {
                "desc": "多塔冰涡",
                "name": "ACT_DOTA_ICE_VORTEX",
                "value": "1672"
            },
            {
                "desc": "站立",
                "name": "ACT_DOTA_IDLE",
                "value": "1500"
            },
            {
                "desc": "表现得无所事事，不耐烦",
                "name": "ACT_DOTA_IDLE_IMPATIENT",
                "value": "1636"
            },
            {
                "desc": "做一个无所事事的不耐烦的拍击剑",
                "name": "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP",
                "value": "1648"
            },
            {
                "desc": "很少有人闲着",
                "name": "ACT_DOTA_IDLE_RARE",
                "value": "1501"
            },
            {
                "desc": "懒得睡觉",
                "name": "ACT_DOTA_IDLE_SLEEPING",
                "value": "1622"
            },
            {
                "desc": "一个懒散的睡眠结束",
                "name": "ACT_DOTA_IDLE_SLEEPING_END",
                "value": "1639"
            },
            {
                "desc": "ACT DOTA简介",
                "name": "ACT_DOTA_INTRO",
                "value": "1623"
            },
            {
                "desc": "ACT DOTA简介循环",
                "name": "ACT_DOTA_INTRO_LOOP",
                "value": "1649"
            },
            {
                "desc": "ACT DOTA项目删除",
                "name": "ACT_DOTA_ITEM_DROP",
                "value": "1697"
            },
            {
                "desc": "ACT DOTA项目外观",
                "name": "ACT_DOTA_ITEM_LOOK",
                "value": "1628"
            },
            {
                "desc": "ACT DOTA项目拾取",
                "name": "ACT_DOTA_ITEM_PICKUP",
                "value": "1696"
            },
            {
                "desc": "ACT DOTA JAKIRO LIQUIDFIRE LOOP公司",
                "name": "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP",
                "value": "1575"
            },
            {
                "desc": "雅克洛火灾启动法案",
                "name": "ACT_DOTA_JAKIRO_LIQUIDFIRE_START",
                "value": "1574"
            },
            {
                "desc": "杀人犯",
                "name": "ACT_DOTA_KILLTAUNT",
                "value": "1535"
            },
            {
                "desc": "ACT DOTA动力场",
                "name": "ACT_DOTA_KINETIC_FIELD",
                "value": "1679"
            },
            {
                "desc": "套索套索动作",
                "name": "ACT_DOTA_LASSO_LOOP",
                "value": "1578"
            },
            {
                "desc": "多塔跳跃眩晕",
                "name": "ACT_DOTA_LEAP_STUN",
                "value": "1658"
            },
            {
                "desc": "动作跳跃刷",
                "name": "ACT_DOTA_LEAP_SWIPE",
                "value": "1659"
            },
            {
                "desc": "生命催眠剂",
                "name": "ACT_DOTA_LIFESTEALER_ASSIMILATE",
                "value": "1703"
            },
            {
                "desc": "动作DOTA LIFESTEALER弹出",
                "name": "ACT_DOTA_LIFESTEALER_EJECT",
                "value": "1704"
            },
            {
                "desc": "多塔生命之旅",
                "name": "ACT_DOTA_LIFESTEALER_INFEST",
                "value": "1576"
            },
            {
                "desc": "多塔生命之旅结束",
                "name": "ACT_DOTA_LIFESTEALER_INFEST_END",
                "value": "1577"
            },
            {
                "desc": "ACT DOTA LIFESTEALER开放式伤口",
                "name": "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS",
                "value": "1567"
            },
            {
                "desc": "多塔生活狂",
                "name": "ACT_DOTA_LIFESTEALER_RAGE",
                "value": "1566"
            },
            {
                "desc": "ACT DOTA装船",
                "name": "ACT_DOTA_LOADOUT",
                "value": "1601"
            },
            {
                "desc": "很少装船",
                "name": "ACT_DOTA_LOADOUT_RARE",
                "value": "1683"
            },
            {
                "desc": "行动起来看看周围",
                "name": "ACT_DOTA_LOOK_AROUND",
                "value": "1643"
            },
            {
                "desc": "ACT DOTA MAGNUS串尾",
                "name": "ACT_DOTA_MAGNUS_SKEWER_END",
                "value": "1606"
            },
            {
                "desc": "ACT DOTA MAGNUS SKEWER开始",
                "name": "ACT_DOTA_MAGNUS_SKEWER_START",
                "value": "1605"
            },
            {
                "desc": "多塔水母石凝视",
                "name": "ACT_DOTA_MEDUSA_STONE_GAZE",
                "value": "1607"
            },
            {
                "desc": "午夜脉搏",
                "name": "ACT_DOTA_MIDNIGHT_PULSE",
                "value": "1676"
            },
            {
                "desc": "小嘲讽",
                "name": "ACT_DOTA_MINI_TAUNT",
                "value": "1681"
            },
            {
                "desc": "ACT DOTA MK皮毛军",
                "name": "ACT_DOTA_MK_FUR_ARMY",
                "value": "1722"
            },
            {
                "desc": "ACT DOTA MK春播",
                "name": "ACT_DOTA_MK_SPRING_CAST",
                "value": "1723"
            },
            {
                "desc": "ACT DOTA MK弹簧端",
                "name": "ACT_DOTA_MK_SPRING_END",
                "value": "1719"
            },
            {
                "desc": "春天的飞翔",
                "name": "ACT_DOTA_MK_SPRING_SOAR",
                "value": "1718"
            },
            {
                "desc": "罢工行动",
                "name": "ACT_DOTA_MK_STRIKE",
                "value": "1715"
            },
            {
                "desc": "ACT DOTA MK树端",
                "name": "ACT_DOTA_MK_TREE_END",
                "value": "1721"
            },
            {
                "desc": "多塔MK树翱翔",
                "name": "ACT_DOTA_MK_TREE_SOAR",
                "value": "1720"
            },
            {
                "desc": "多塔死灵裹尸布",
                "name": "ACT_DOTA_NECRO_GHOST_SHROUD",
                "value": "1724"
            },
            {
                "desc": "多塔年简介跳跃",
                "name": "ACT_DOTA_NIAN_INTRO_LEAP",
                "value": "1660"
            },
            {
                "desc": "多塔年针尾",
                "name": "ACT_DOTA_NIAN_PIN_END",
                "value": "1657"
            },
            {
                "desc": "多塔年针环",
                "name": "ACT_DOTA_NIAN_PIN_LOOP",
                "value": "1656"
            },
            {
                "desc": "多塔年针启动",
                "name": "ACT_DOTA_NIAN_PIN_START",
                "value": "1655"
            },
            {
                "desc": "扮多塔年钉晕",
                "name": "ACT_DOTA_NIAN_PIN_TO_STUN",
                "value": "1662"
            },
            {
                "desc": "多塔夜行者转型",
                "name": "ACT_DOTA_NIGHTSTALKER_TRANSITION",
                "value": "1565"
            },
            {
                "desc": "法案公告",
                "name": "ACT_DOTA_NOTICE",
                "value": "1747"
            },
            {
                "desc": "施法覆盖技能1",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_1",
                "value": "1516"
            },
            {
                "desc": "施法覆盖技能2",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_2",
                "value": "1517"
            },
            {
                "desc": "施法覆盖技能3",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_3",
                "value": "1518"
            },
            {
                "desc": "施法覆盖技能4",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_4",
                "value": "1519"
            },
            {
                "desc": "行为点覆盖奥秘",
                "name": "ACT_DOTA_OVERRIDE_ARCANA",
                "value": "1725"
            },
            {
                "desc": "ACT DOTA覆盖装船",
                "name": "ACT_DOTA_OVERRIDE_LOADOUT",
                "value": "1751"
            },
            {
                "desc": "ACT DOTA宠物等级",
                "name": "ACT_DOTA_PET_LEVEL",
                "value": "1701"
            },
            {
                "desc": "宠物病房观察员",
                "name": "ACT_DOTA_PET_WARD_OBSERVER",
                "value": "1699"
            },
            {
                "desc": "ACT DOTA宠物病房哨兵",
                "name": "ACT_DOTA_PET_WARD_SENTRY",
                "value": "1700"
            },
            {
                "desc": "最后一幕",
                "name": "ACT_DOTA_POOF_END",
                "value": "1603"
            },
            {
                "desc": "ACT DOTA礼品",
                "name": "ACT_DOTA_PRESENT_ITEM",
                "value": "1635"
            },
            {
                "desc": "响尾蛇",
                "name": "ACT_DOTA_RATTLETRAP_BATTERYASSAULT",
                "value": "1549"
            },
            {
                "desc": "动作结束",
                "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_END",
                "value": "1553"
            },
            {
                "desc": "ACT DOTA响尾蛇钩环",
                "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP",
                "value": "1552"
            },
            {
                "desc": "动作开始",
                "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_START",
                "value": "1551"
            },
            {
                "desc": "响尾蛇",
                "name": "ACT_DOTA_RATTLETRAP_POWERCOGS",
                "value": "1550"
            },
            {
                "desc": "第1幕",
                "name": "ACT_DOTA_RAZE_1",
                "value": "1663"
            },
            {
                "desc": "行动计划2",
                "name": "ACT_DOTA_RAZE_2",
                "value": "1664"
            },
            {
                "desc": "第三幕",
                "name": "ACT_DOTA_RAZE_3",
                "value": "1665"
            },
            {
                "desc": "动作放松结束",
                "name": "ACT_DOTA_RELAX_END",
                "value": "1610"
            },
            {
                "desc": "动作放松循环",
                "name": "ACT_DOTA_RELAX_LOOP",
                "value": "1609"
            },
            {
                "desc": "ACT DOTA RELAX循环结束",
                "name": "ACT_DOTA_RELAX_LOOP_END",
                "value": "1634"
            },
            {
                "desc": "开始放松",
                "name": "ACT_DOTA_RELAX_START",
                "value": "1608"
            },
            {
                "desc": "多塔罗克莱尔法案",
                "name": "ACT_DOTA_ROQUELAIRE_LAND",
                "value": "1615"
            },
            {
                "desc": "DOTA ROQUELAIRE法案土地闲置",
                "name": "ACT_DOTA_ROQUELAIRE_LAND_IDLE",
                "value": "1616"
            },
            {
                "desc": "移动",
                "name": "ACT_DOTA_RUN",
                "value": "1502"
            },
            {
                "desc": "多塔沙王钻进去",
                "name": "ACT_DOTA_SAND_KING_BURROW_IN",
                "value": "1568"
            },
            {
                "desc": "多塔沙王挖洞",
                "name": "ACT_DOTA_SAND_KING_BURROW_OUT",
                "value": "1569"
            },
            {
                "desc": "摇摇晃晃",
                "name": "ACT_DOTA_SHAKE",
                "value": "1687"
            },
            {
                "desc": "多塔浅墓",
                "name": "ACT_DOTA_SHALLOW_GRAVE",
                "value": "1670"
            },
            {
                "desc": "ACT DOTA锐化武器",
                "name": "ACT_DOTA_SHARPEN_WEAPON",
                "value": "1637"
            },
            {
                "desc": "把武器磨出来",
                "name": "ACT_DOTA_SHARPEN_WEAPON_OUT",
                "value": "1638"
            },
            {
                "desc": "ACT DOTA店主宠物互动",
                "name": "ACT_DOTA_SHOPKEEPER_PET_INTERACT",
                "value": "1695"
            },
            {
                "desc": "多塔耸耸肩",
                "name": "ACT_DOTA_SHRUG",
                "value": "1633"
            },
            {
                "desc": "洗牌动作",
                "name": "ACT_DOTA_SHUFFLE_L",
                "value": "1749"
            },
            {
                "desc": "洗牌动作",
                "name": "ACT_DOTA_SHUFFLE_R",
                "value": "1750"
            },
            {
                "desc": "斯莱克突袭行动",
                "name": "ACT_DOTA_SLARK_POUNCE",
                "value": "1604"
            },
            {
                "desc": "行动结束",
                "name": "ACT_DOTA_SLEEPING_END",
                "value": "1626"
            },
            {
                "desc": "行动计划幻灯片",
                "name": "ACT_DOTA_SLIDE",
                "value": "1726"
            },
            {
                "desc": "ACT DOTA幻灯片循环",
                "name": "ACT_DOTA_SLIDE_LOOP",
                "value": "1727"
            },
            {
                "desc": "产生",
                "name": "ACT_DOTA_SPAWN",
                "value": "1534"
            },
            {
                "desc": "道塔精神断路器充电结束",
                "name": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END",
                "value": "1594"
            },
            {
                "desc": "道塔精神破坏者冲锋姿势",
                "name": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE",
                "value": "1593"
            },
            {
                "desc": "吓一跳",
                "name": "ACT_DOTA_STARTLE",
                "value": "1629"
            },
            {
                "desc": "静态风暴",
                "name": "ACT_DOTA_STATIC_STORM",
                "value": "1680"
            },
            {
                "desc": "多塔游泳",
                "name": "ACT_DOTA_SWIM",
                "value": "1684"
            },
            {
                "desc": "游手好闲",
                "name": "ACT_DOTA_SWIM_IDLE",
                "value": "1688"
            },
            {
                "desc": "嘲讽",
                "name": "ACT_DOTA_TAUNT",
                "value": "1536"
            },
            {
                "desc": "嘲弄狙击手",
                "name": "ACT_DOTA_TAUNT_SNIPER",
                "value": "1641"
            },
            {
                "desc": "多塔嘲讽特辑",
                "name": "ACT_DOTA_TAUNT_SPECIAL",
                "value": "1752"
            },
            {
                "desc": "多塔传送",
                "name": "ACT_DOTA_TELEPORT",
                "value": "1595"
            },
            {
                "desc": "多塔传送合作社结束",
                "name": "ACT_DOTA_TELEPORT_COOP_END",
                "value": "1693"
            },
            {
                "desc": "ACT DOTA传送合作社出口",
                "name": "ACT_DOTA_TELEPORT_COOP_EXIT",
                "value": "1694"
            },
            {
                "desc": "行动开始传送合作社",
                "name": "ACT_DOTA_TELEPORT_COOP_START",
                "value": "1691"
            },
            {
                "desc": "多塔传送合作社等等",
                "name": "ACT_DOTA_TELEPORT_COOP_WAIT",
                "value": "1692"
            },
            {
                "desc": "多塔传送结束",
                "name": "ACT_DOTA_TELEPORT_END",
                "value": "1596"
            },
            {
                "desc": "行动点传送结束反应",
                "name": "ACT_DOTA_TELEPORT_END_REACT",
                "value": "1632"
            },
            {
                "desc": "传送反应",
                "name": "ACT_DOTA_TELEPORT_REACT",
                "value": "1631"
            },
            {
                "desc": "干渴",
                "name": "ACT_DOTA_THIRST",
                "value": "1537"
            },
            {
                "desc": "多塔雷击",
                "name": "ACT_DOTA_THUNDER_STRIKE",
                "value": "1678"
            },
            {
                "desc": "补锅补锅行动1",
                "name": "ACT_DOTA_TINKER_REARM1",
                "value": "1555"
            },
            {
                "desc": "补锅匠行动2",
                "name": "ACT_DOTA_TINKER_REARM2",
                "value": "1556"
            },
            {
                "desc": "补锅匠行动3",
                "name": "ACT_DOTA_TINKER_REARM3",
                "value": "1557"
            },
            {
                "desc": "ACT DOTA转换",
                "name": "ACT_DOTA_TRANSITION",
                "value": "1731"
            },
            {
                "desc": "动作结束",
                "name": "ACT_DOTA_TRICKS_END",
                "value": "1713"
            },
            {
                "desc": "小跑表演",
                "name": "ACT_DOTA_TROT",
                "value": "1686"
            },
            {
                "desc": "行为不朽",
                "name": "ACT_DOTA_UNDYING_DECAY",
                "value": "1666"
            },
            {
                "desc": "永远撕碎灵魂",
                "name": "ACT_DOTA_UNDYING_SOUL_RIP",
                "value": "1667"
            },
            {
                "desc": "多塔不朽墓碑",
                "name": "ACT_DOTA_UNDYING_TOMBSTONE",
                "value": "1668"
            },
            {
                "desc": "多塔法案与",
                "name": "ACT_DOTA_VERSUS",
                "value": "1716"
            },
            {
                "desc": "多塔胜利号",
                "name": "ACT_DOTA_VICTORY",
                "value": "1591"
            },
            {
                "desc": "多塔胜利开始",
                "name": "ACT_DOTA_VICTORY_START",
                "value": "1710"
            },
            {
                "desc": "别等着闲着",
                "name": "ACT_DOTA_WAIT_IDLE",
                "value": "1689"
            },
            {
                "desc": "行动计划",
                "name": "ACT_DOTA_WEAVERBUG_ATTACH",
                "value": "1561"
            },
            {
                "desc": "ACT DOTA WHEEL层",
                "name": "ACT_DOTA_WHEEL_LAYER",
                "value": "1571"
            },
            {
                "desc": "多塔旋转斧列",
                "name": "ACT_DOTA_WHIRLING_AXES_RANGED",
                "value": "1669"
            },
            {
                "desc": "米拉纳舞步",
                "name": "ACT_MIRANA_LEAP_END",
                "value": "1544"
            },
            {
                "desc": "行动风暴精神超载运行超控",
                "name": "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE",
                "value": "1554"
            },
            {
                "desc": "小雪崩",
                "name": "ACT_TINY_AVALANCHE",
                "value": "1558"
            },
            {
                "desc": "装作微吼",
                "name": "ACT_TINY_GROWL",
                "value": "1560"
            },
            {
                "desc": "小小的投掷",
                "name": "ACT_TINY_TOSS",
                "value": "1559"
            },
            {
                "desc": "动作波形结束",
                "name": "ACT_WAVEFORM_END",
                "value": "1546"
            },
            {
                "desc": "动作波形启动",
                "name": "ACT_WAVEFORM_START",
                "value": "1545"
            }
        ],
        "DotaDefaultUIElement_t": [
            {
                "desc": "DOTA默认用户界面：操作小地图",
                "name": "DOTA_DEFAULT_UI_ACTION_MINIMAP",
                "value": "4"
            },
            {
                "desc": "DOTA默认用户界面：操作面板",
                "name": "DOTA_DEFAULT_UI_ACTION_PANEL",
                "value": "3"
            },
            {
                "desc": "DOTA默认用户界面：在HUD元素后面的自定义UI",
                "name": "DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS",
                "value": "28"
            },
            {
                "desc": "DOTA默认用户界面：元素计数",
                "name": "DOTA_DEFAULT_UI_ELEMENT_COUNT",
                "value": "29"
            },
            {
                "desc": "DOTA默认用户界面：结束游戏",
                "name": "DOTA_DEFAULT_UI_ENDGAME",
                "value": "22"
            },
            {
                "desc": "DOTA默认用户界面：游戏结束聊天",
                "name": "DOTA_DEFAULT_UI_ENDGAME_CHAT",
                "value": "23"
            },
            {
                "desc": "DOTA默认用户界面：弹出记分板",
                "name": "DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD",
                "value": "2"
            },
            {
                "desc": "DOTA默认用户界面：英雄选择时钟",
                "name": "DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK",
                "value": "16"
            },
            {
                "desc": "DOTA默认用户界面：英雄选择游戏名称",
                "name": "DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME",
                "value": "15"
            },
            {
                "desc": "DOTA默认用户界面：英雄选择团队",
                "name": "DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS",
                "value": "14"
            },
            {
                "desc": "DOTA默认用户界面：无效",
                "name": "DOTA_DEFAULT_UI_INVALID",
                "value": "-1"
            },
            {
                "desc": "DOTA默认用户界面：库存信使",
                "name": "DOTA_DEFAULT_UI_INVENTORY_COURIER",
                "value": "9"
            },
            {
                "desc": "DOTA默认用户界面：库存黄金",
                "name": "DOTA_DEFAULT_UI_INVENTORY_GOLD",
                "value": "11"
            },
            {
                "desc": "DOTA默认用户界面：清单项",
                "name": "DOTA_DEFAULT_UI_INVENTORY_ITEMS",
                "value": "7"
            },
            {
                "desc": "DOTA默认用户界面：清单面板",
                "name": "DOTA_DEFAULT_UI_INVENTORY_PANEL",
                "value": "5"
            },
            {
                "desc": "DOTA默认用户界面：清单保护",
                "name": "DOTA_DEFAULT_UI_INVENTORY_PROTECT",
                "value": "10"
            },
            {
                "desc": "DOTA默认用户界面：库存QUICKBUY",
                "name": "DOTA_DEFAULT_UI_INVENTORY_QUICKBUY",
                "value": "8"
            },
            {
                "desc": "DOTA默认用户界面：库存商店",
                "name": "DOTA_DEFAULT_UI_INVENTORY_SHOP",
                "value": "6"
            },
            {
                "desc": "DOTA默认用户界面： KILLCAM",
                "name": "DOTA_DEFAULT_UI_KILLCAM",
                "value": "26"
            },
            {
                "desc": "DOTA默认用户界面：游戏前策略UI",
                "name": "DOTA_DEFAULT_UI_PREGAME_STRATEGYUI",
                "value": "25"
            },
            {
                "desc": "DOTA默认用户界面：快速统计",
                "name": "DOTA_DEFAULT_UI_QUICK_STATS",
                "value": "24"
            },
            {
                "desc": "DOTA默认用户界面： SHOP COMMONITEMS",
                "name": "DOTA_DEFAULT_UI_SHOP_COMMONITEMS",
                "value": "13"
            },
            {
                "desc": "DOTA默认用户界面： SHOP SUGGESTEDITEMS",
                "name": "DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS",
                "value": "12"
            },
            {
                "desc": "DOTA默认用户界面：顶栏",
                "name": "DOTA_DEFAULT_UI_TOP_BAR",
                "value": "27"
            },
            {
                "desc": "DOTA默认用户界面：顶栏背景",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND",
                "value": "18"
            },
            {
                "desc": "DOTA默认用户界面：顶栏灾难团队",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM",
                "value": "20"
            },
            {
                "desc": "DOTA默认用户界面：顶栏辐射团队",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM",
                "value": "19"
            },
            {
                "desc": "DOTA默认用户界面：顶栏分数",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_SCORE",
                "value": "21"
            },
            {
                "desc": "DOTA默认用户界面：顶级英雄",
                "name": "DOTA_DEFAULT_UI_TOP_HEROES",
                "value": "1"
            },
            {
                "desc": "DOTA默认用户界面：顶部菜单按钮",
                "name": "DOTA_DEFAULT_UI_TOP_MENU_BUTTONS",
                "value": "17"
            },
            {
                "desc": "DOTA默认用户界面：顶部TIMEOFDAY",
                "name": "DOTA_DEFAULT_UI_TOP_TIMEOFDAY",
                "value": "0"
            }
        ],
        "EDOTA_ModifyXP_Reason": [
            {
                "desc": "修改经验的原因：击杀野怪",
                "name": "DOTA_ModifyXP_CreepKill",
                "value": "2"
            },
            {
                "desc": "修改经验的原因：击杀英雄",
                "name": "DOTA_ModifyXP_HeroKill",
                "value": "1"
            },
            {
                "desc": "修改经验的原因：最大值",
                "name": "DOTA_ModifyXP_MAX",
                "value": "6"
            },
            {
                "desc": "修改经验的原因：前哨站",
                "name": "DOTA_ModifyXP_Outpost",
                "value": "5"
            },
            {
                "desc": "修改经验的原因：击杀肉山",
                "name": "DOTA_ModifyXP_RoshanKill",
                "value": "3"
            },
            {
                "desc": "修改经验的原因：经验书",
                "name": "DOTA_ModifyXP_TomeOfKnowledge",
                "value": "4"
            },
            {
                "desc": "修改经验的原因：未指定",
                "name": "DOTA_ModifyXP_Unspecified",
                "value": "0"
            }
        ],
        "EShareAbility": [
            {
                "desc": "都可以共享",
                "name": "ITEM_FULLY_SHAREABLE",
                "value": "0"
            },
            {
                "desc": "不可共享",
                "name": "ITEM_NOT_SHAREABLE",
                "value": "2"
            },
            {
                "desc": "部分共享",
                "name": "ITEM_PARTIALLY_SHAREABLE",
                "value": "1"
            }
        ],
        "LuaModifierType": [
            {
                "desc": "貌似和修饰器 注册相关 ：无效",
                "name": "LUA_MODIFIER_INVALID",
                "value": "4"
            },
            {
                "desc": "貌似和修饰器 注册相关 ：垂直与水平运行兼有",
                "name": "LUA_MODIFIER_MOTION_BOTH",
                "value": "3"
            },
            {
                "desc": "貌似和修饰器 注册相关 ：水平运动",
                "name": "LUA_MODIFIER_MOTION_HORIZONTAL",
                "value": "1"
            },
            {
                "desc": "貌似和修饰器 注册相关 ：无",
                "name": "LUA_MODIFIER_MOTION_NONE",
                "value": "0"
            },
            {
                "desc": "貌似和修饰器 注册相关 ：垂直运动",
                "name": "LUA_MODIFIER_MOTION_VERTICAL",
                "value": "2"
            }
        ],
        "ParticleAttachment_t": [
            {
                "desc": "附加点： 最大路径类型",
                "name": "MAX_PATTACH_TYPES",
                "value": "16"
            },
            {
                "desc": "附加点： 世界中心2",
                "name": "PATTACH_ABSORIGIN",
                "value": "0"
            },
            {
                "desc": "附加点： 跟随世界中心",
                "name": "PATTACH_ABSORIGIN_FOLLOW",
                "value": "1"
            },
            {
                "desc": "附加点： 跟随中心",
                "name": "PATTACH_CENTER_FOLLOW",
                "value": "13"
            },
            {
                "desc": "附加点： 开始于自定义目标  这个需要自定义特效向量时用",
                "name": "PATTACH_CUSTOMORIGIN",
                "value": "2"
            },
            {
                "desc": "附加点： CUSTOMORIGIN跟随",
                "name": "PATTACH_CUSTOMORIGIN_FOLLOW",
                "value": "3"
            },
            {
                "desc": "附加点：",
                "name": "PATTACH_CUSTOM_GAME_STATE_1",
                "value": "14"
            },
            {
                "desc": "附加点： 跟随眼睛",
                "name": "PATTACH_EYES_FOLLOW",
                "value": "6"
            },
            {
                "desc": "附加点： 血条",
                "name": "PATTACH_HEALTHBAR",
                "value": "15"
            },
            {
                "desc": "附加点： 无效",
                "name": "PATTACH_INVALID",
                "value": "-1"
            },
            {
                "desc": "附加点： 主视图点",
                "name": "PATTACH_MAIN_VIEW",
                "value": "11"
            },
            {
                "desc": "附加点： 跟随头顶",
                "name": "PATTACH_OVERHEAD_FOLLOW",
                "value": "7"
            },
            {
                "desc": "附加点： 脚底？",
                "name": "PATTACH_POINT",
                "value": "4"
            },
            {
                "desc": "附加点： 跟随脚底",
                "name": "PATTACH_POINT_FOLLOW",
                "value": "5"
            },
            {
                "desc": "附加点： 跟随渲染目标",
                "name": "PATTACH_RENDERORIGIN_FOLLOW",
                "value": "10"
            },
            {
                "desc": "附加点： 跟随根骨",
                "name": "PATTACH_ROOTBONE_FOLLOW",
                "value": "9"
            },
            {
                "desc": "附加点：",
                "name": "PATTACH_WATERWAKE",
                "value": "12"
            },
            {
                "desc": "附加点： 世界中心",
                "name": "PATTACH_WORLDORIGIN",
                "value": "8"
            }
        ],
        "UnitFilterResult": [
            {
                "desc": "不能对远古单位使用",
                "name": "UF_FAIL_ANCIENT",
                "value": "9"
            },
            {
                "desc": "不能对攻击免疫的单位使用",
                "name": "UF_FAIL_ATTACK_IMMUNE",
                "value": "22"
            },
            {
                "desc": "不能对建筑使用",
                "name": "UF_FAIL_BUILDING",
                "value": "6"
            },
            {
                "desc": "UF失败被视为英雄",
                "name": "UF_FAIL_CONSIDERED_HERO",
                "value": "4"
            },
            {
                "desc": "不能对信使使用",
                "name": "UF_FAIL_COURIER",
                "value": "7"
            },
            {
                "desc": "不能对野怪使用",
                "name": "UF_FAIL_CREEP",
                "value": "5"
            },
            {
                "desc": "自定义不能使用原因",
                "name": "UF_FAIL_CUSTOM",
                "value": "23"
            },
            {
                "desc": "不能对死亡单位使用",
                "name": "UF_FAIL_DEAD",
                "value": "15"
            },
            {
                "desc": "技能被禁用帮助",
                "name": "UF_FAIL_DISABLE_HELP",
                "value": "25"
            },
            {
                "desc": "UF故障占主导地位",
                "name": "UF_FAIL_DOMINATED",
                "value": "12"
            },
            {
                "desc": "不能对敌方使用",
                "name": "UF_FAIL_ENEMY",
                "value": "2"
            },
            {
                "desc": "不能对友方使用",
                "name": "UF_FAIL_FRIENDLY",
                "value": "1"
            },
            {
                "desc": "不能对英雄使用",
                "name": "UF_FAIL_HERO",
                "value": "3"
            },
            {
                "desc": "不能对幻象使用",
                "name": "UF_FAIL_ILLUSION",
                "value": "10"
            },
            {
                "desc": "无效的使用地点",
                "name": "UF_FAIL_INVALID_LOCATION",
                "value": "24"
            },
            {
                "desc": "不能对丢失视野的目标使用",
                "name": "UF_FAIL_INVISIBLE",
                "value": "20"
            },
            {
                "desc": "不能对无敌的单位使用",
                "name": "UF_FAIL_INVULNERABLE",
                "value": "18"
            },
            {
                "desc": "不能在战争迷雾中使用",
                "name": "UF_FAIL_IN_FOW",
                "value": "19"
            },
            {
                "desc": "不能对魔法免疫的友军使用",
                "name": "UF_FAIL_MAGIC_IMMUNE_ALLY",
                "value": "16"
            },
            {
                "desc": "不能对魔法免疫的敌军使用",
                "name": "UF_FAIL_MAGIC_IMMUNE_ENEMY",
                "value": "17"
            },
            {
                "desc": "不能对近战单位使用",
                "name": "UF_FAIL_MELEE",
                "value": "13"
            },
            {
                "desc": "不能对噩梦中的单位使用",
                "name": "UF_FAIL_NIGHTMARED",
                "value": "27"
            },
            {
                "desc": "不能对不受玩家控制的单位使用",
                "name": "UF_FAIL_NOT_PLAYER_CONTROLLED",
                "value": "21"
            },
            {
                "desc": "UF故障受阻",
                "name": "UF_FAIL_OBSTRUCTED",
                "value": "28"
            },
            {
                "desc": "不能其他单位使用",
                "name": "UF_FAIL_OTHER",
                "value": "8"
            },
            {
                "desc": "不能对潜行的单位使用",
                "name": "UF_FAIL_OUT_OF_WORLD",
                "value": "26"
            },
            {
                "desc": "不能对远程单位使用",
                "name": "UF_FAIL_RANGED",
                "value": "14"
            },
            {
                "desc": "不能对召唤物使用",
                "name": "UF_FAIL_SUMMONED",
                "value": "11"
            },
            {
                "desc": "可以使用",
                "name": "UF_SUCCESS",
                "value": "0"
            }
        ],
        "modifierremove": [
            {
                "desc": "DOTA BUFF全部删除",
                "name": "DOTA_BUFF_REMOVE_ALL",
                "value": "0"
            },
            {
                "desc": "DOTA BUFF移除盟友",
                "name": "DOTA_BUFF_REMOVE_ALLY",
                "value": "2"
            },
            {
                "desc": "DOTA BUFF移除敌人",
                "name": "DOTA_BUFF_REMOVE_ENEMY",
                "value": "1"
            }
        ],
        "modifierfunction": [
            {
                "desc": "OnAbilityEndChannel(停止施法时)",
                "name": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
                "value": "172"
            },
            {
                "desc": "OnAbilityExecuted(施法完成时 释放技能时 施法前摇结束时)",
                "name": "MODIFIER_EVENT_ON_ABILITY_EXECUTED",
                "value": "169"
            },
            {
                "desc": "OnAbilityFullyCast(施法完全激活/触发时 等待确认)",
                "name": "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
                "value": "170"
            },
            {
                "desc": "OnAbilityStart(施法开始时)",
                "name": "MODIFIER_EVENT_ON_ABILITY_START",
                "value": "168"
            },
            {
                "desc": "OnAttack(攻击时 攻击完成-忽略是否击中时)",
                "name": "MODIFIER_EVENT_ON_ATTACK",
                "value": "161"
            },
            {
                "desc": "OnAttacked(被攻击时)",
                "name": "MODIFIER_EVENT_ON_ATTACKED",
                "value": "181"
            },
            {
                "desc": "OnAttackAllied(攻击队友时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_ALLIED",
                "value": "164"
            },
            {
                "desc": "OnAttackCancelled(攻击取消时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_CANCELLED",
                "value": "226"
            },
            {
                "desc": "OnAttackFail(攻击失败时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_FAIL",
                "value": "163"
            },
            {
                "desc": "OnAttackFinished(攻击完成时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_FINISHED",
                "value": "216"
            },
            {
                "desc": "OnAttackLanded(攻击命中时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_LANDED",
                "value": "162"
            },
            {
                "desc": "OnAttackRecord(有记录的攻击时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_RECORD",
                "value": "159"
            },
            {
                "desc": "OnAttackRecordDestroy(有记录的攻击消失时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
                "value": "223"
            },
            {
                "desc": "OnAttackStart(攻击开始时)",
                "name": "MODIFIER_EVENT_ON_ATTACK_START",
                "value": "160"
            },
            {
                "desc": "OnBreakInvisibility(隐身解除时)",
                "name": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
                "value": "171"
            },
            {
                "desc": "OnBuildingKilled(建筑被伤害到着火时)",
                "name": "MODIFIER_EVENT_ON_BUILDING_KILLED",
                "value": "193"
            },
            {
                "desc": "OnDamageCalculated(伤害结算时)",
                "name": "MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
                "value": "180"
            },
            {
                "desc": "OnDeath(死亡时)",
                "name": "MODIFIER_EVENT_ON_DEATH",
                "value": "182"
            },
            {
                "desc": "OnDamagePrevented(完成最后一击时)",
                "name": "MODIFIER_EVENT_ON_DEATH_PREVENTED",
                "value": "176"
            },
            {
                "desc": "OnDominated(被支配时)",
                "name": "MODIFIER_EVENT_ON_DOMINATED",
                "value": "213"
            },
            {
                "desc": "OnHealthGained(获得生命值时 满血不触发_回血时)",
                "name": "MODIFIER_EVENT_ON_HEALTH_GAINED",
                "value": "188"
            },
            {
                "desc": "OnHealReceived(获得治疗时 满血触发_回血时)",
                "name": "MODIFIER_EVENT_ON_HEAL_RECEIVED",
                "value": "192"
            },
            {
                "desc": "OnHeroKilled(击杀单位 被英雄杀死)",
                "name": "MODIFIER_EVENT_ON_HERO_KILLED",
                "value": "191"
            },
            {
                "desc": "OnManaGained(获得MP时 满蓝不触发_回蓝时)",
                "name": "MODIFIER_EVENT_ON_MANA_GAINED",
                "value": "189"
            },
            {
                "desc": "OnModelChanged(模型变化时)",
                "name": "MODIFIER_EVENT_ON_MODEL_CHANGED",
                "value": "194"
            },
            {
                "desc": "OnModifierAdded(获得buff时)",
                "name": "MODIFIER_EVENT_ON_MODIFIER_ADDED",
                "value": "195"
            },
            {
                "desc": "Unused(球体效果修正事件)",
                "name": "MODIFIER_EVENT_ON_ORB_EFFECT",
                "value": "178"
            },
            {
                "desc": "OnOrder(发布命令时)",
                "name": "MODIFIER_EVENT_ON_ORDER",
                "value": "166"
            },
            {
                "desc": "OnProcessCleave(跳劈过程？)",
                "name": "MODIFIER_EVENT_ON_PROCESS_CLEAVE",
                "value": "179"
            },
            {
                "desc": "Unused(进程升级时的修改器事件)",
                "name": "MODIFIER_EVENT_ON_PROCESS_UPGRADE",
                "value": "173"
            },
            {
                "desc": "OnProjectileDodge(投射物闪避)",
                "name": "MODIFIER_EVENT_ON_PROJECTILE_DODGE",
                "value": "165"
            },
            {
                "desc": "OnProjectileObstructionHit(投射物击中时)",
                "name": "MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
                "value": "224"
            },
            {
                "desc": "Unused(刷新时的修改器事件)",
                "name": "MODIFIER_EVENT_ON_REFRESH",
                "value": "174"
            },
            {
                "desc": "OnRespawn(重生时)",
                "name": "MODIFIER_EVENT_ON_RESPAWN",
                "value": "183"
            },
            {
                "desc": "OnSetLocation(瞬移时)",
                "name": "MODIFIER_EVENT_ON_SET_LOCATION",
                "value": "187"
            },
            {
                "desc": "OnSpellTargetReady(当技能选定目标时)",
                "name": "MODIFIER_EVENT_ON_SPELL_TARGET_READY",
                "value": "158"
            },
            {
                "desc": "OnSpentMana(消耗MP时)",
                "name": "MODIFIER_EVENT_ON_SPENT_MANA",
                "value": "184"
            },
            {
                "desc": "OnStateChanged(状态改变时)",
                "name": "MODIFIER_EVENT_ON_STATE_CHANGED",
                "value": "177"
            },
            {
                "desc": "OnTakeDamage(受到伤害时)",
                "name": "MODIFIER_EVENT_ON_TAKEDAMAGE",
                "value": "175"
            },
            {
                "desc": "OnTakeDamageKillCredit(完成最后一击时)",
                "name": "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
                "value": "190"
            },
            {
                "desc": "OnTeleported(传送完成时)",
                "name": "MODIFIER_EVENT_ON_TELEPORTED",
                "value": "186"
            },
            {
                "desc": "OnTeleporting(传送中周期触发)",
                "name": "MODIFIER_EVENT_ON_TELEPORTING",
                "value": "185"
            },
            {
                "desc": "OnUnitMoved(移动时)",
                "name": "MODIFIER_EVENT_ON_UNIT_MOVED",
                "value": "167"
            },
            {
                "desc": "修饰符函数无效",
                "name": "MODIFIER_FUNCTION_INVALID",
                "value": "255"
            },
            {
                "desc": "修饰符函数LAST",
                "name": "MODIFIER_FUNCTION_LAST",
                "value": "232"
            },
            {
                "desc": "GetModifierAbilityLayout(设置技能布局)",
                "name": "MODIFIER_PROPERTY_ABILITY_LAYOUT",
                "value": "212"
            },
            {
                "desc": "GetAbsoluteNoDamageMagical(是否魔法攻击无效)",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
                "value": "139"
            },
            {
                "desc": "GetAbsoluteNoDamagePhysical(是否物理攻击无效)",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
                "value": "138"
            },
            {
                "desc": "GetAbsoluteNoDamagePure(是否混乱攻击无效)",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
                "value": "140"
            },
            {
                "desc": "GetAbsorbSpell(属性吸收法术)",
                "name": "MODIFIER_PROPERTY_ABSORB_SPELL",
                "value": "128"
            },
            {
                "desc": "GetAlwaysAllowAttack(是否总能攻击)",
                "name": "MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
                "value": "149"
            },
            {
                "desc": "GetAllowEtherealAttack(是否允许空灵攻击？)",
                "name": "MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
                "value": "150"
            },
            {
                "desc": "GetModifierAttackSpeedBaseOverride(设置加成的基础攻击速度)",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
                "value": "28"
            },
            {
                "desc": "GetModifierAttackSpeedBonus_Constant(设置攻击速度)",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
                "value": "30"
            },
            {
                "desc": "GetModifierAttackSpeedReductionPercentage(修改器属性攻击速度降低百分比)",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
                "value": "229"
            },
            {
                "desc": "GetModifierAttackPointConstant(修正属性攻击点常数)",
                "name": "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
                "value": "35"
            },
            {
                "desc": "GetModifierAttackRangeOverride(设置攻击范围)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
                "value": "99"
            },
            {
                "desc": "GetModifierAttackRangeBonus(设置攻击范围奖励)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
                "value": "100"
            },
            {
                "desc": "GetModifierAttackRangeBonusPercentage(设置攻击范围加成百分比)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
                "value": "102"
            },
            {
                "desc": "GetModifierAttackRangeBonusUnique(设置攻击范围奖励_不叠加)",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
                "value": "101"
            },
            {
                "desc": "",
                "name": "MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET",
                "value": "231"
            },
            {
                "desc": "GetModifierAvoidDamage(是否免疫伤害)",
                "name": "MODIFIER_PROPERTY_AVOID_DAMAGE",
                "value": "62"
            },
            {
                "desc": "GetModifierAvoidSpell(是否免疫技能伤害)",
                "name": "MODIFIER_PROPERTY_AVOID_SPELL",
                "value": "63"
            },
            {
                "desc": "GetModifierBaseAttack_BonusDamage(设置基础攻击力)",
                "name": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
                "value": "4"
            },
            {
                "desc": "GetModifierBaseDamageOutgoing_Percentage(设置基础伤害百分比)",
                "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
                "value": "51"
            },
            {
                "desc": "GetModifierBaseDamageOutgoing_PercentageUnique(设置基础伤害百分比_不叠加)",
                "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
                "value": "52"
            },
            {
                "desc": "GetModifierBaseAttackTimeConstant(设置攻击初始间隔)",
                "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
                "value": "33"
            },
            {
                "desc": "GetModifierBaseAttackTimeConstant_Adjust(修正属性基攻击时间常数调整,20年7月测试无效)",
                "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
                "value": "34"
            },
            {
                "desc": "GetModifierBaseRegen(设置MP基础回复)",
                "name": "MODIFIER_PROPERTY_BASE_MANA_REGEN",
                "value": "76"
            },
            {
                "desc": "GetModifierBonusDamageOutgoing_Percentage",
                "name": "MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
                "value": "36"
            },
            {
                "desc": "GetBonusDayVision(设置白天视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_DAY_VISION",
                "value": "131"
            },
            {
                "desc": "GetBonusNightVision(设置夜晚视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
                "value": "132"
            },
            {
                "desc": "GetBonusNightVisionUnique(设置额外夜晚视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
                "value": "133"
            },
            {
                "desc": "GetBonusVisionPercentage(设置百分比视野奖励)",
                "name": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
                "value": "134"
            },
            {
                "desc": "BotAttackScoreBonus(设置机器人攻击得分加成)",
                "name": "MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
                "value": "228"
            },
            {
                "desc": "Unused(设置野怪赏金比例)",
                "name": "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
                "value": "153"
            },
            {
                "desc": "Unused(设置其它赏金比例)",
                "name": "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
                "value": "154"
            },
            {
                "desc": "GetModifierCanAttackTrees(是否允许攻击树木)",
                "name": "MODIFIER_PROPERTY_CAN_ATTACK_TREES",
                "value": "218"
            },
            {
                "desc": "GetModifierPercentageCasttime(设置施法时间百分比)",
                "name": "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
                "value": "113"
            },
            {
                "desc": "GetModifierCastRangeBonus(设置施法距离奖励)",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS",
                "value": "96"
            },
            {
                "desc": "GetModifierCastRangeBonusStacking(设置施法距离奖励_可叠加)",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
                "value": "98"
            },
            {
                "desc": "GetModifierCastRangeBonusTarget(设置施法距离奖励目标？)",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
                "value": "97"
            },
            {
                "desc": "GetModifierChangeAbilityValue(改变技能数值)",
                "name": "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
                "value": "209"
            },
            {
                "desc": "GetModifierPercentageCooldown(设置冷却时间百分比)",
                "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
                "value": "111"
            },
            {
                "desc": "GetModifierPercentageCooldownOngoing(设置正在施法的技能冷却百分比？)",
                "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
                "value": "112"
            },
            {
                "desc": "GetModifierCooldownReduction_Constant(设置减少冷却时间)",
                "name": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
                "value": "31"
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage(设置伤害百分比)",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
                "value": "37"
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage_Illusion(设置幻象攻击百分比)",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
                "value": "38"
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage_Illusion_Amplify(设置幻象伤害百分比)",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
                "value": "39"
            },
            {
                "desc": "GetModifierConstantDeathGoldCost(设置死亡损失的金钱)",
                "name": "MODIFIER_PROPERTY_DEATHGOLDCOST",
                "value": "116"
            },
            {
                "desc": "GetDisableAutoAttack(是否禁止自动攻击)",
                "name": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
                "value": "130"
            },
            {
                "desc": "GetDisableHealing(是否禁止生命回复)",
                "name": "MODIFIER_PROPERTY_DISABLE_HEALING",
                "value": "148"
            },
            {
                "desc": "GetModifierDisableTurning(是否禁止转身_无效 等待确认)",
                "name": "MODIFIER_PROPERTY_DISABLE_TURNING",
                "value": "207"
            },
            {
                "desc": "GetModifierDodgeProjectile(是否闪避投射物)",
                "name": "MODIFIER_PROPERTY_DODGE_PROJECTILE",
                "value": "156"
            },
            {
                "desc": "GetModifierNoVisionOfAttacker(是否看不到攻击者)",
                "name": "MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
                "value": "221"
            },
            {
                "desc": "GetModifierEvasion_Constant(设置闪避值)",
                "name": "MODIFIER_PROPERTY_EVASION_CONSTANT",
                "value": "57"
            },
            {
                "desc": "GetModifierPercentageExpRateBoost(设置经验百分比)",
                "name": "MODIFIER_PROPERTY_EXP_RATE_BOOST",
                "value": "117"
            },
            {
                "desc": "GetModifierExtraHealthBonus(设置额外生命值)",
                "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
                "value": "86"
            },
            {
                "desc": "GetModifierExtraHealthPercentage(设置额外生命值百分比)",
                "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
                "value": "88"
            },
            {
                "desc": "GetModifierExtraManaBonus(设置额外魔法值_无效)",
                "name": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
                "value": "87"
            },
            {
                "desc": "GetModifierExtraManaPercentage(设置额外魔法值百分比_无效)",
                "name": "MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
                "value": "89"
            },
            {
                "desc": "GetModifierExtraStrengthBonus(设置额外力量_无效)",
                "name": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
                "value": "85"
            },
            {
                "desc": "GetModifierFixedAttackRate(设置固定攻击率？)",
                "name": "MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
                "value": "29"
            },
            {
                "desc": "GetFixedDayVision(设置固定白天视野)",
                "name": "MODIFIER_PROPERTY_FIXED_DAY_VISION",
                "value": "135"
            },
            {
                "desc": "GetFixedNightVision(设置固定夜晚视野)",
                "name": "MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
                "value": "136"
            },
            {
                "desc": "GetForceDrawOnMinimap(是否绘制小地图路径？)",
                "name": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
                "value": "206"
            },
            {
                "desc": "GetModifierHealthBonus(设置生命值奖励)",
                "name": "MODIFIER_PROPERTY_HEALTH_BONUS",
                "value": "83"
            },
            {
                "desc": "GetModifierConstantHealthRegen(设置生命回复值)",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
                "value": "80"
            },
            {
                "desc": "GetModifierHealthRegenPercentage(设置生命回复值百分比)",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
                "value": "81"
            },
            {
                "desc": "GetModifierHealthRegenPercentageUnique(设置生命回复百分比奖励_不叠加)",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
                "value": "82"
            },
            {
                "desc": "GetModifierHealAmplify_PercentageSource(设置治疗百分比来源？)",
                "name": "MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
                "value": "43"
            },
            {
                "desc": "GetModifierHealAmplify_PercentageTarget(修正属性治疗放大百分比目标)",
                "name": "MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
                "value": "44"
            },
            {
                "desc": "GetModifierHPRegenAmplify_Percentage(设置施法HP增强比例)",
                "name": "MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
                "value": "45"
            },
            {
                "desc": "GetModifierIgnoreCastAngle(是否忽略投射角度)",
                "name": "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
                "value": "208"
            },
            {
                "desc": "GetModifierIgnoreCooldown(是否忽略冷却)",
                "name": "MODIFIER_PROPERTY_IGNORE_COOLDOWN",
                "value": "217"
            },
            {
                "desc": "GetModifierIgnoreMovespeedLimit(是否忽略移动速度限制)",
                "name": "MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
                "value": "26"
            },
            {
                "desc": "GetModifierIgnorePhysicalArmor(是否忽略护甲)",
                "name": "MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
                "value": "70"
            },
            {
                "desc": "GetModifierIllusionLabel(是否为幻象_标签？)",
                "name": "MODIFIER_PROPERTY_ILLUSION_LABEL",
                "value": "142"
            },
            {
                "desc": "修正属性传入伤害幻觉",
                "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
                "value": "220"
            },
            {
                "desc": "GetModifierIncomingDamage_Percentage(设置受到伤害的百分比)",
                "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
                "value": "53"
            },
            {
                "desc": "GetModifierIncomingPhysicalDamageConstant(设置所受物理伤害数值)",
                "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
                "value": "55"
            },
            {
                "desc": "GetModifierIncomingPhysicalDamage_Percentage(设置受到的物理伤害百分比)",
                "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
                "value": "54"
            },
            {
                "desc": "GetModifierIncomingSpellDamageConstant(修正属性传入法术伤害常量)",
                "name": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
                "value": "56"
            },
            {
                "desc": "GetModifierInvisibilityAttackBehaviorException(设置所受技能伤害数值)",
                "name": "MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
                "value": "12"
            },
            {
                "desc": "GetModifierInvisibilityLevel(设置隐身等级)",
                "name": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
                "value": "11"
            },
            {
                "desc": "GetIsIllusion(设置为幻象)",
                "name": "MODIFIER_PROPERTY_IS_ILLUSION",
                "value": "141"
            },
            {
                "desc": "GetModifierScepter(是否携带蓝杖？)",
                "name": "MODIFIER_PROPERTY_IS_SCEPTER",
                "value": "199"
            },
            {
                "desc": "GetModifierLifestealRegenAmplify_Percentage(设置生命回复奖励百分比？)",
                "name": "MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
                "value": "46"
            },
            {
                "desc": "GetUnitLifetimeFraction(设置单位存在剩余时间)",
                "name": "MODIFIER_PROPERTY_LIFETIME_FRACTION",
                "value": "203"
            },
            {
                "desc": "GetModifierMagical_ConstantBlock(设置魔法常数)",
                "name": "MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
                "value": "120"
            },
            {
                "desc": "GetModifierMagicalResistanceBaseReduction(设置基础魔抗降低值)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
                "value": "71"
            },
            {
                "desc": "GetModifierMagicalResistanceBonus(魔法抗性，对神圣伤害无效，可以累加)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
                "value": "73"
            },
            {
                "desc": "GetModifierMagicalResistanceBonusIllusions(设置幻象魔抗奖励)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
                "value": "74"
            },
            {
                "desc": "GetModifierMagicalResistanceDecrepifyUnique(骨法的衰老_影响魔法抗性_不可累加)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
                "value": "75"
            },
            {
                "desc": "GetModifierMagicalResistanceDirectModification(设置魔抗_覆盖？)",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
                "value": "72"
            },
            {
                "desc": "GetModifierPercentageManacost(设置父技能的魔法消耗百分比增幅值)",
                "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
                "value": "114"
            },
            {
                "desc": "GetModifierPercentageManacostStacking(设置父技能的魔法消耗百分比增幅值_叠加)",
                "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
                "value": "115"
            },
            {
                "desc": "GetModifierManacostReduction_Constant(修正属性法力消耗降低常数)",
                "name": "MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
                "value": "32"
            },
            {
                "desc": "GetModifierManaBonus(设置魔法值奖励)",
                "name": "MODIFIER_PROPERTY_MANA_BONUS",
                "value": "84"
            },
            {
                "desc": "GetModifierManaDrainAmplify_Percentage(修正属性法力消耗放大百分比)",
                "name": "MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
                "value": "49"
            },
            {
                "desc": "GetModifierConstantManaRegen(设置基础魔法回复)",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
                "value": "77"
            },
            {
                "desc": "GetModifierConstantManaRegenUnique(设置基础魔法回复_不叠加)",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
                "value": "78"
            },
            {
                "desc": "GetModifierTotalPercentageManaRegen(设置魔法回复百分比)",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
                "value": "79"
            },
            {
                "desc": "GetModifierMaxAttackRange(设置最大攻击距离奖励)",
                "name": "MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
                "value": "103"
            },
            {
                "desc": "GetMinHealth(设置生命最小值)",
                "name": "MODIFIER_PROPERTY_MIN_HEALTH",
                "value": "137"
            },
            {
                "desc": "GetModifierMiss_Percentage(设置MISS率)",
                "name": "MODIFIER_PROPERTY_MISS_PERCENTAGE",
                "value": "64"
            },
            {
                "desc": "GetModifierModelChange(设置模型)",
                "name": "MODIFIER_PROPERTY_MODEL_CHANGE",
                "value": "197"
            },
            {
                "desc": "GetModifierModelScale(设置模型大小_无效 等待确认)",
                "name": "MODIFIER_PROPERTY_MODEL_SCALE",
                "value": "198"
            },
            {
                "desc": "GetModifierMoveSpeed_Absolute(设置移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
                "value": "23"
            },
            {
                "desc": "GetModifierMoveSpeed_AbsoluteMax(设置最大移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
                "value": "25"
            },
            {
                "desc": "GetModifierMoveSpeed_AbsoluteMin(设置最小移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
                "value": "24"
            },
            {
                "desc": "GetModifierMoveSpeedOverride(设置基础移动速度)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
                "value": "15"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant(设置移动速度奖励)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
                "value": "14"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant_Unique(设置移动速度奖励_1)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
                "value": "21"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant_Unique_2(设置移动速度奖励_2)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
                "value": "22"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage(设置移动速度百分比_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
                "value": "16"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage_Unique(设置移动速度百分比1_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
                "value": "17"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage_Unique_2(设置移动速度百分比2_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
                "value": "18"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Special_Boots(设置移动速度奖励_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
                "value": "19"
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Special_Boots_2(设置移动速度奖励2_不叠加)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
                "value": "20"
            },
            {
                "desc": "GetModifierMoveSpeed_Limit(是否限制移动速度_无效)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_LIMIT",
                "value": "27"
            },
            {
                "desc": "GetModifierMoveSpeedReductionPercentage(修改器属性移动速度降低百分比)",
                "name": "MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
                "value": "230"
            },
            {
                "desc": "GetModifierMPRegenAmplify_Percentage(设置施法MP增强比例)",
                "name": "MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
                "value": "48"
            },
            {
                "desc": "GetModifierMPRestoreAmplify_Percentage(设置施法MP消耗加大比例)",
                "name": "MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
                "value": "50"
            },
            {
                "desc": "GetModifierNegativeEvasion_Constant(设置闪避降低值)",
                "name": "MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
                "value": "58"
            },
            {
                "desc": "GetModifierOverrideAbilitySpecial(修饰符属性重写能力特殊)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
                "value": "210"
            },
            {
                "desc": "GetModifierOverrideAbilitySpecialValue(修饰符属性重写能力特殊值)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
                "value": "211"
            },
            {
                "desc": "GetOverrideAnimation(是否强制播放模型动作 覆盖动作)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
                "value": "125"
            },
            {
                "desc": "GetOverrideAnimationRate(设置播放模型动作速度)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
                "value": "127"
            },
            {
                "desc": "GetOverrideAnimationWeight(是否强制播放模型动作2)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
                "value": "126"
            },
            {
                "desc": "GetModifierOverrideAttackDamage(覆盖攻击伤害)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
                "value": "9"
            },
            {
                "desc": "GetOverrideAttackMagical(设置魔法攻击)",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
                "value": "151"
            },
            {
                "desc": "GetModifierPersistentInvisibility(是否永久隐身)",
                "name": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
                "value": "13"
            },
            {
                "desc": "GetModifierPhysicalArmorBase_Percentage(设置护甲基础百分比)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
                "value": "65"
            },
            {
                "desc": "GetModifierPhysicalArmorBonus(设置护甲)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
                "value": "67"
            },
            {
                "desc": "GetModifierPhysicalArmorBonusUnique(设置护甲增加值_不叠加)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
                "value": "68"
            },
            {
                "desc": "GetModifierPhysicalArmorBonusUniqueActive(设置减伤_圆盾)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
                "value": "69"
            },
            {
                "desc": "GetModifierPhysicalArmorTotal_Percentage(设置护甲总百分比)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
                "value": "66"
            },
            {
                "desc": "GetModifierPhysical_ConstantBlock(设置减免伤害)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
                "value": "121"
            },
            {
                "desc": "GetModifierPhysical_ConstantBlockSpecial(物伤数值阻挡（特殊的）)",
                "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
                "value": "122"
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage(设置附加攻击力)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
                "value": "0"
            },
            {
                "desc": "GetModifierPreAttack_BonusDamagePostCrit(设置增加的伤害_不参与暴击计算)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
                "value": "3"
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage_Proc(设置攻击前附加伤害)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
                "value": "2"
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage_Target(设置攻击前额外伤害目标)",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
                "value": "1"
            },
            {
                "desc": "GetModifierPreAttack_CriticalStrike(设置致命一击)",
                "name": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
                "value": "118"
            },
            {
                "desc": "GetModifierPreAttack_Target_CriticalStrike(是否受攻击时总是被致命一击)",
                "name": "MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
                "value": "119"
            },
            {
                "desc": "PreserveParticlesOnModelChanged(是否模型更改时保留特效)",
                "name": "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
                "value": "215"
            },
            {
                "desc": "GetModifierPreAttack(设置攻击前？)",
                "name": "MODIFIER_PROPERTY_PRE_ATTACK",
                "value": "10"
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Magical(修改在普通攻击后计算的魔法伤害)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
                "value": "6"
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Physical(修改在普通攻击后计算的物理伤害)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
                "value": "5"
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Pure(修改在普通攻击后计算的纯粹伤害)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
                "value": "7"
            },
            {
                "desc": "GetModifierProcAttack_Feedback(设置攻击反馈过程)",
                "name": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
                "value": "8"
            },
            {
                "desc": "GetModifierProjectileName(设置投射物名)",
                "name": "MODIFIER_PROPERTY_PROJECTILE_NAME",
                "value": "106"
            },
            {
                "desc": "GetModifierProjectileSpeedBonus(设置投射物速率加成)",
                "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
                "value": "104"
            },
            {
                "desc": "GetModifierProjectileSpeedBonusPercentage(设置投射物速率百分比加成)",
                "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
                "value": "105"
            },
            {
                "desc": "GetModifierProvidesFOWVision(设置投射物提供视野)",
                "name": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
                "value": "204"
            },
            {
                "desc": "GetModifierRadarCooldownReduction(设置雷达冷却减少时间)",
                "name": "MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
                "value": "200"
            },
            {
                "desc": "GetReflectSpell(是否反弹技能？)",
                "name": "MODIFIER_PROPERTY_REFLECT_SPELL",
                "value": "129"
            },
            {
                "desc": "ReincarnateTime(设置再生时间)",
                "name": "MODIFIER_PROPERTY_REINCARNATION",
                "value": "107"
            },
            {
                "desc": "GetModifierConstantRespawnTime(设置复活时间)",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME",
                "value": "108"
            },
            {
                "desc": "GetModifierPercentageRespawnTime(设置复活时间百分比)",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
                "value": "109"
            },
            {
                "desc": "GetModifierStackingRespawnTime(设置累积复活时间)",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
                "value": "110"
            },
            {
                "desc": "GetModifierSpellsRequireHP(设置技能需要的生命)",
                "name": "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
                "value": "205"
            },
            {
                "desc": "GetModifierSpellAmplify_Percentage(设置施法增强比例)",
                "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
                "value": "41"
            },
            {
                "desc": "GetModifierSpellAmplify_PercentageUnique(设置施法增强比例2)",
                "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
                "value": "42"
            },
            {
                "desc": "GetModifierSpellLifestealRegenAmplify_Percentage(修饰符属性法术生命线放大百分比)",
                "name": "MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
                "value": "47"
            },
            {
                "desc": "GetModifierBonusStats_Agility(设置敏捷)",
                "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
                "value": "91"
            },
            {
                "desc": "GetModifierBonusStats_Agility_Percentage(设置敏捷百分比)",
                "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
                "value": "94"
            },
            {
                "desc": "GetModifierBonusStats_Intellect(设置智力)",
                "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
                "value": "92"
            },
            {
                "desc": "GetModifierBonusStats_Intellect_Percentage(设置智力百分比)",
                "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
                "value": "95"
            },
            {
                "desc": "GetModifierBonusStats_Strength(设置力量)",
                "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
                "value": "90"
            },
            {
                "desc": "GetModifierBonusStats_Strength_Percentage(设置力量百分比)",
                "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
                "value": "93"
            },
            {
                "desc": "GetModifierStatusResistance(设置状态抗性)",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE",
                "value": "59"
            },
            {
                "desc": "GetModifierStatusResistanceCaster(设置状态抗性3？)",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
                "value": "61"
            },
            {
                "desc": "GetModifierStatusResistanceStacking(设置状态抗性2？)",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
                "value": "60"
            },
            {
                "desc": "GetModifierStrongIllusion(是否为强大的幻象)",
                "name": "MODIFIER_PROPERTY_STRONG_ILLUSION",
                "value": "143"
            },
            {
                "desc": "GetModifierSuperIllusion(是否为超级幻象)",
                "name": "MODIFIER_PROPERTY_SUPER_ILLUSION",
                "value": "144"
            },
            {
                "desc": "GetModifierSuperIllusionWithUltimate(是否为终极幻象_VS大招)",
                "name": "MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
                "value": "145"
            },
            {
                "desc": "GetSuppressCleave(是否不再跳批？)",
                "name": "MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
                "value": "227"
            },
            {
                "desc": "GetSuppressTeleport(是否禁止传送)",
                "name": "MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
                "value": "225"
            },
            {
                "desc": "GetModifierTempestDouble(是否多倍吹风？)",
                "name": "MODIFIER_PROPERTY_TEMPEST_DOUBLE",
                "value": "214"
            },
            {
                "desc": "OnTooltip(修改器属性工具提示)",
                "name": "MODIFIER_PROPERTY_TOOLTIP",
                "value": "196"
            },
            {
                "desc": "OnTooltip2(修改器属性工具提示2)",
                "name": "MODIFIER_PROPERTY_TOOLTIP2",
                "value": "222"
            },
            {
                "desc": "GetModifierTotalDamageOutgoing_Percentage(设置伤害总百分比)",
                "name": "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
                "value": "40"
            },
            {
                "desc": "GetModifierTotal_ConstantBlock(设置伤害减少值)",
                "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
                "value": "124"
            },
            {
                "desc": "GetModifierPhysical_ConstantBlockUnavoidablePreArmor(设置来至自动攻击的伤害减少值)",
                "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
                "value": "123"
            },
            {
                "desc": "GetActivityTranslationModifiers(设置动作修改？)",
                "name": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
                "value": "201"
            },
            {
                "desc": "GetAttackSound(设置攻击音效)",
                "name": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
                "value": "202"
            },
            {
                "desc": "GetTriggerCosmeticAndEndAttack(获得变身触发器和结束攻击？)",
                "name": "MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
                "value": "157"
            },
            {
                "desc": "GetModifierTurnRate_Override(设置转向速度_覆盖)",
                "name": "MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
                "value": "147"
            },
            {
                "desc": "GetModifierTurnRate_Percentage(设置转身速度百分比)",
                "name": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
                "value": "146"
            },
            {
                "desc": "GetModifierUnitDisllowUpgrading(设置单位是否禁止升级)",
                "name": "MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
                "value": "155"
            },
            {
                "desc": "GetModifierUnitStatsNeedsRefresh(设置单位统计需要刷新)",
                "name": "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
                "value": "152"
            },
            {
                "desc": "GetVisualZDelta(设置可视化Z差量)",
                "name": "MODIFIER_PROPERTY_VISUAL_Z_DELTA",
                "value": "219"
            }
        ],
        "modifierstate": [
            {
                "desc": "可以穿树",
                "name": "MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES",
                "value": "36"
            },
            {
                "desc": "攻击免疫",
                "name": "MODIFIER_STATE_ATTACK_IMMUNE",
                "value": "2"
            },
            {
                "desc": "致盲：无法命中",
                "name": "MODIFIER_STATE_BLIND",
                "value": "29"
            },
            {
                "desc": "禁用伤害减免",
                "name": "MODIFIER_STATE_BLOCK_DISABLED",
                "value": "12"
            },
            {
                "desc": "修改器状态不能由运动控制",
                "name": "MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED",
                "value": "43"
            },
            {
                "desc": "无法丢失",
                "name": "MODIFIER_STATE_CANNOT_MISS",
                "value": "16"
            },
            {
                "desc": "无法以敌人为目标",
                "name": "MODIFIER_STATE_CANNOT_TARGET_ENEMIES",
                "value": "15"
            },
            {
                "desc": "无法执行命令",
                "name": "MODIFIER_STATE_COMMAND_RESTRICTED",
                "value": "19"
            },
            {
                "desc": "缴械",
                "name": "MODIFIER_STATE_DISARMED",
                "value": "1"
            },
            {
                "desc": "支配",
                "name": "MODIFIER_STATE_DOMINATED",
                "value": "28"
            },
            {
                "desc": "无法躲避",
                "name": "MODIFIER_STATE_EVADE_DISABLED",
                "value": "13"
            },
            {
                "desc": "假装为敌人友方",
                "name": "MODIFIER_STATE_FAKE_ALLY",
                "value": "31"
            },
            {
                "desc": "恐惧",
                "name": "MODIFIER_STATE_FEARED",
                "value": "41"
            },
            {
                "desc": "飞行",
                "name": "MODIFIER_STATE_FLYING",
                "value": "23"
            },
            {
                "desc": "拥有飞行碰撞",
                "name": "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
                "value": "32"
            },
            {
                "desc": "冰冻",
                "name": "MODIFIER_STATE_FROZEN",
                "value": "18"
            },
            {
                "desc": "妖术",
                "name": "MODIFIER_STATE_HEXED",
                "value": "6"
            },
            {
                "desc": "无视移动和攻击命令",
                "name": "MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS",
                "value": "35"
            },
            {
                "desc": "无视停止命令",
                "name": "MODIFIER_STATE_IGNORING_STOP_ORDERS",
                "value": "40"
            },
            {
                "desc": "隐身",
                "name": "MODIFIER_STATE_INVISIBLE",
                "value": "7"
            },
            {
                "desc": "无敌",
                "name": "MODIFIER_STATE_INVULNERABLE",
                "value": "8"
            },
            {
                "desc": "最后修改状态",
                "name": "MODIFIER_STATE_LAST",
                "value": "44"
            },
            {
                "desc": "低攻击优先级",
                "name": "MODIFIER_STATE_LOW_ATTACK_PRIORITY",
                "value": "21"
            },
            {
                "desc": "魔免",
                "name": "MODIFIER_STATE_MAGIC_IMMUNE",
                "value": "9"
            },
            {
                "desc": "闭锁：禁用物品",
                "name": "MODIFIER_STATE_MUTED",
                "value": "4"
            },
            {
                "desc": "催眠",
                "name": "MODIFIER_STATE_NIGHTMARED",
                "value": "11"
            },
            {
                "desc": "在小地图上消失",
                "name": "MODIFIER_STATE_NOT_ON_MINIMAP",
                "value": "20"
            },
            {
                "desc": "从敌方小地图中消失",
                "name": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
                "value": "37"
            },
            {
                "desc": "无生命条",
                "name": "MODIFIER_STATE_NO_HEALTH_BAR",
                "value": "22"
            },
            {
                "desc": "无法被编队",
                "name": "MODIFIER_STATE_NO_TEAM_MOVE_TO",
                "value": "25"
            },
            {
                "desc": "无法选择编队",
                "name": "MODIFIER_STATE_NO_TEAM_SELECT",
                "value": "26"
            },
            {
                "desc": "无碰撞",
                "name": "MODIFIER_STATE_NO_UNIT_COLLISION",
                "value": "24"
            },
            {
                "desc": "OUT出世界 用以加特征 让一些技能可以区分目标",
                "name": "MODIFIER_STATE_OUT_OF_GAME",
                "value": "30"
            },
            {
                "desc": "破坏：禁用被动",
                "name": "MODIFIER_STATE_PASSIVES_DISABLED",
                "value": "27"
            },
            {
                "desc": "提供视野",
                "name": "MODIFIER_STATE_PROVIDES_VISION",
                "value": "10"
            },
            {
                "desc": "缠绕",
                "name": "MODIFIER_STATE_ROOTED",
                "value": "0"
            },
            {
                "desc": "沉默：禁用技能",
                "name": "MODIFIER_STATE_SILENCED",
                "value": "3"
            },
            {
                "desc": "可被友军攻击",
                "name": "MODIFIER_STATE_SPECIALLY_DENIABLE",
                "value": "17"
            },
            {
                "desc": "眩晕",
                "name": "MODIFIER_STATE_STUNNED",
                "value": "5"
            },
            {
                "desc": "嘲讽",
                "name": "MODIFIER_STATE_TAUNTED",
                "value": "42"
            },
            {
                "desc": "魔法锁链",
                "name": "MODIFIER_STATE_TETHERED",
                "value": "39"
            },
            {
                "desc": "免疫真视",
                "name": "MODIFIER_STATE_TRUESIGHT_IMMUNE",
                "value": "33"
            },
            {
                "desc": "无法点选",
                "name": "MODIFIER_STATE_UNSELECTABLE",
                "value": "14"
            },
            {
                "desc": "修改器状态不可流动",
                "name": "MODIFIER_STATE_UNSLOWABLE",
                "value": "38"
            },
            {
                "desc": "让单位变成无目标 无法被范围选取函数作用",
                "name": "MODIFIER_STATE_UNTARGETABLE",
                "value": "34"
            }
        ],
        "FindOrder_t":[
            {
                "desc": "随机顺序",
                "name": "FIND_ANY_ORDER",
                "value": "0"
            },
            {
                "desc": "固定顺序",
                "name": "FIND_UNITS_EVERYWHERE",
                "value": "-1"                
            },
            {
                "desc": "近距离优先",
                "name": "FIND_CLOSEST",
                "value": "1"
            },
            {
                "desc": "远距离优先",
                "name": "FIND_FARTHEST",
                "value": "2"
            }
        ],
        "DOTA_HULL_SIZES":[
            {
                "desc": "碰撞体积_房子",
                "name": "DOTA_HULL_SIZE_BARRACKS",
                "value": ""
            },
            {
                "desc": "碰撞体积_充满(?)",
                "name": "DOTA_HULL_SIZE_FILLER",
                "value": ""
            },
            {
                "desc": "碰撞体积_塔",
                "name": "DOTA_HULL_SIZE_TOWER",
                "value": ""
            },
            {
                "desc": "碰撞体积_大的",
                "name": "DOTA_HULL_SIZE_LARGE",
                "value": ""
            },
            {
                "desc": "碰撞体积_巨大的",
                "name": "DOTA_HULL_SIZE_HUGE",
                "value": ""
            },
            {
                "desc": "碰撞体积_建造中",
                "name": "DOTA_HULL_SIZE_BUILDING",
                "value": ""
            },
            {
                "desc": "碰撞体积_小的",
                "name": "DOTA_HULL_SIZE_SMALL",
                "value": ""                
            },
            {
                "desc": "碰撞体积_英雄",
                "name": "DOTA_HULL_SIZE_HERO",
                "value": ""                
            },
            {
                "desc": "碰撞体积_包围(?)",
                "name": "DOTA_HULL_SIZE_SIEGE",
                "value": ""                   
            },
            {
                "desc": "碰撞体积_常规",
                "name": "DOTA_HULL_SIZE_REGULAR",
                "value": ""                   
            },
            {
                "desc": "碰撞体积_最小的",
                "name": "DOTA_HULL_SIZE_SMALLEST",
                "value": ""                 
            }                       
        ]
    },
    "CDOTA_Item_DataDriven": [
        {
            "desc": "应用一个数据驱动的Mordifier。",
            "func": "( hCaster, hTarget, pszModifierName, hModifierTable )",
            "return": "void",
            "name": "ApplyDataDrivenModifier"
        },
        {
            "desc": "应用一个数据驱动的计时器到指定地点。",
            "func": "( hCaster, vLocation, pszModifierName, hModifierTable )",
            "return": "handle",
            "name": "ApplyDataDrivenThinker"
        }
    ],
    "CBaseAnimating": [
        {
            "desc": "Returns the duration in seconds of the active sequence.",
            "func": "()",
            "return": "float",
            "name": "ActiveSequenceDuration"
        },
        {
            "desc": "获得指定ID附件的角度，返回vector(p,y,r)",
            "func": "( iAttachment )",
            "return": "Vector",
            "name": "GetAttachmentAngles"
        },
        {
            "desc": "Get the attachment id's forward vector.",
            "func": "( iAttachment )",
            "return": "Vector",
            "name": "GetAttachmentForward"
        },
        {
            "desc": "获得指定ID附件的源vector",
            "func": "( iAttachment )",
            "return": "Vector",
            "name": "GetAttachmentOrigin"
        },
        {
            "desc": "Get the cycle of the animation.",
            "func": "()",
            "return": "float",
            "name": "GetCycle"
        },
        {
            "desc": "Get the value of the given animGraph parameter",
            "func": "( pszParam )",
            "return": "table",
            "name": "GetGraphParameter"
        },
        {
            "desc": "获取实体的模型比例。",
            "func": "()",
            "return": "float",
            "name": "GetModelScale"
        },
        {
            "desc": "Returns the name of the active sequence.",
            "func": "()",
            "return": "string",
            "name": "GetSequence"
        },
        {
            "desc": "查询主序列是否播放结束",
            "func": "()",
            "return": "bool",
            "name": "IsSequenceFinished"
        },
        {
            "desc": "Sets the active sequence by name, resetting the current cycle.",
            "func": "( pSequenceName )",
            "return": "void",
            "name": "ResetSequence"
        },
        {
            "desc": "获得指定名序列的ID",
            "func": "( pAttachmentName )",
            "return": "int",
            "name": "ScriptLookupAttachment"
        },
        {
            "desc": "Returns the duration in seconds of the given sequence name.",
            "func": "( pSequenceName )",
            "return": "float",
            "name": "SequenceDuration"
        },
        {
            "desc": "Set the cycle of the animation.",
            "func": "( flCycle )",
            "return": "void",
            "name": "SetCycle"
        },
        {
            "desc": "Pass the desired look target in world space to the graph",
            "func": "( vValue )",
            "return": "void",
            "name": "SetGraphLookTarget"
        },
        {
            "desc": "Set the specific param value, type is inferred from the type in script",
            "func": "( pszParam, svArg )",
            "return": "void",
            "name": "SetGraphParameter"
        },
        {
            "desc": "Set the specific param on or off",
            "func": "( szName, bValue )",
            "return": "void",
            "name": "SetGraphParameterBool"
        },
        {
            "desc": "Pass the enum (int) value to the specified param",
            "func": "( szName, nValue )",
            "return": "void",
            "name": "SetGraphParameterEnum"
        },
        {
            "desc": "Pass the float value to the specified param",
            "func": "( szName, flValue )",
            "return": "void",
            "name": "SetGraphParameterFloat"
        },
        {
            "desc": "Pass the int value to the specified param",
            "func": "( szName, nValue )",
            "return": "void",
            "name": "SetGraphParameterInt"
        },
        {
            "desc": "Pass the vector value to the specified param in the graph",
            "func": "( szName, vValue )",
            "return": "void",
            "name": "SetGraphParameterVector"
        },
        {
            "desc": "设置模型放大率。如果模型缩放为1，使用SetModelScale(10.0)将放大率设置成10.0.",
            "func": "( flScale )",
            "return": "void",
            "name": "SetModelScale"
        },
        {
            "desc": "将指定的位置参数（poseparameter）设定为指定值",
            "func": "( szName, fValue )",
            "return": "float",
            "name": "SetPoseParameter"
        },
        {
            "desc": "Sets the active sequence by name, keeping the current cycle.",
            "func": "( pSequenceName )",
            "return": "void",
            "name": "SetSequence"
        },
        {
            "desc": "Stop the current animation by setting playback rate to 0.0.",
            "func": "()",
            "return": "void",
            "name": "StopAnimation"
        }
    ],
    "CBaseCombatCharacter": [
        {
            "desc": "GetEquippedWeapons():获取一个装备武器的数组",
            "func": "()",
            "return": "table",
            "name": "GetEquippedWeapons"
        },
        {
            "desc": "Get the combat character faction.",
            "func": "()",
            "return": "int",
            "name": "GetFaction"
        },
        {
            "desc": "GetWeaponCount():获取当前装备的武器数量",
            "func": "()",
            "return": "int",
            "name": "GetWeaponCount"
        },
        {
            "desc": "Returns the shoot position eyes (or hand in VR).",
            "func": "( nHand, nMuzzle )",
            "return": "Vector",
            "name": "ShootPosition"
        }
    ],
    "CPointTemplate": [
        {
            "desc": "删除任何该点模板的刷新组。提示：并不删除点模板",
            "func": "()",
            "return": "void",
            "name": "DeleteCreatedSpawnGroups"
        },
        {
            "desc": "强制刷新该点模板指向的全部实体",
            "func": "()",
            "return": "void",
            "name": "ForceSpawn"
        },
        {
            "desc": "获取最近被刷新的实体",
            "func": "()",
            "return": "handle",
            "name": "GetSpawnedEntities"
        },
        {
            "desc": "设置刷新回调（hCallbackFunc,hCallbackScope,hCallbackData），当模板产生实体时回调。被刷新的实体作为数组被传入",
            "func": "( hCallbackFunc, hCallbackScope )",
            "return": "void",
            "name": "SetSpawnCallback"
        }
    ],
    "CBasePlayer": [
        {
            "desc": "Returns whether this player's chaperone bounds are visible.",
            "func": "()",
            "return": "bool",
            "name": "AreChaperoneBoundsVisible"
        },
        {
            "desc": "Returns the HMD anchor entity for this player if it exists.",
            "func": "()",
            "return": "handle",
            "name": "GetHMDAnchor"
        },
        {
            "desc": "ReturnstheHMDAvatarentityforthisplayerifitexists.",
            "func": "()",
            "return": "handle",
            "name": "GetHMDAvatar"
        },
        {
            "desc": "Returns the Vector position of the point you ask for. Pass 0-3 to get the four points.",
            "func": "( nPoint )",
            "return": "Vector",
            "name": "GetPlayArea"
        },
        {
            "desc": "Returns the player's user id.",
            "func": "()",
            "return": "int",
            "name": "GetUserID"
        },
        {
            "desc": "Returns the type of controller being used while in VR.",
            "func": "()",
            "return": "<unknown>",
            "name": "GetVRControllerType"
        },
        {
            "desc": "玩家处于穿墙模式（noclipmode）下返回true",
            "func": "()",
            "return": "bool",
            "name": "IsNoclipping"
        },
        {
            "desc": "当使用按钮被按下时，返回True。",
            "func": "()",
            "return": "bool",
            "name": "IsUsePressed"
        },
        {
            "desc": "当VR控制按钮被按下时，返回True。",
            "func": "( nButton )",
            "return": "bool",
            "name": "IsVRControllerButtonPressed"
        },
        {
            "desc": "Returns true if the SteamVR dashboard is showing for this player.",
            "func": "()",
            "return": "bool",
            "name": "IsVRDashboardShowing"
        }
    ],
    "CBaseFlex": [
        {
            "desc": "返回最早激活的场景实体的实例（如果存在的话）",
            "func": "()",
            "return": "handle",
            "name": "GetCurrentScene"
        },
        {
            "desc": "返回指定索引号的场景实体的实例",
            "func": "( index )",
            "return": "handle",
            "name": "GetSceneByIndex"
        },
        {
            "desc": "( vcd file, delay ) - play specified vcd file",
            "func": "( pszScene, flDelay )",
            "return": "float",
            "name": "ScriptPlayScene"
        }
    ],
    "CBaseEntity": [
        {
            "desc": "AddEffects( int ): Adds the render effect flag.",
            "func": "( nFlags )",
            "return": "void",
            "name": "AddEffects"
        },
        {
            "desc": "添加一个速度冲击",
            "func": "( vecImpulse )",
            "return": "void",
            "name": "ApplyAbsVelocityImpulse"
        },
        {
            "desc": "添加一个角速度的冲击",
            "func": "( angImpulse )",
            "return": "void",
            "name": "ApplyLocalAngularVelocityImpulse"
        },
        {
            "desc": "Get float value for an entity attribute.",
            "func": "( pName, flDefault )",
            "return": "float",
            "name": "Attribute_GetFloatValue"
        },
        {
            "desc": "Get int value for an entity attribute.",
            "func": "( pName, nDefault )",
            "return": "int",
            "name": "Attribute_GetIntValue"
        },
        {
            "desc": "Set float value for an entity attribute.",
            "func": "( pName, flValue )",
            "return": "void",
            "name": "Attribute_SetFloatValue"
        },
        {
            "desc": "Set int value for an entity attribute.",
            "func": "( pName, nValue )",
            "return": "void",
            "name": "Attribute_SetIntValue"
        },
        {
            "desc": "Delete an entity attribute.",
            "func": "( pName )",
            "return": "void",
            "name": "DeleteAttribute"
        },
        {
            "desc": "Plays a sound from this entity.",
            "func": "( soundname )",
            "return": "void",
            "name": "EmitSound"
        },
        {
            "desc": "播放/修改这个实体的声音.当音调,音量或播放时间大于零时改变声音",
            "func": "( soundname, nPitch, flVolume, flDelay )",
            "return": "void",
            "name": "EmitSoundParams"
        },
        {
            "desc": "获得这个实体的视角qangles",
            "func": "()",
            "return": "QAngle",
            "name": "EyeAngles"
        },
        {
            "desc": "获得指向视角位置的矢量,位置为绝对坐标",
            "func": "()",
            "return": "Vector",
            "name": "EyePosition"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "FirstMoveChild"
        },
        {
            "desc": "hEntity to follow, bool bBoneMerge",
            "func": "( hEnt, bBoneMerge )",
            "return": "void",
            "name": "FollowEntity"
        },
        {
            "desc": "返回一个表包含用在这个实体的判定的标准.这个表等同于传入脚本方法的调用.",
            "func": "( hResult )",
            "return": "void",
            "name": "GatherCriteria"
        },
        {
            "desc": "",
            "func": "()",
            "return": "Vector",
            "name": "GetAbsOrigin"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetAbsScale"
        },
        {
            "desc": "",
            "func": "()",
            "return": "QAngle",
            "name": "GetAngles"
        },
        {
            "desc": "获得实体的颠簸,偏航,摇晃的矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetAnglesAsVector"
        },
        {
            "desc": "获得当前角速度,返回颠簸,偏航,摇晃的矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetAngularVelocity"
        },
        {
            "desc": "获得基础速度",
            "func": "()",
            "return": "Vector",
            "name": "GetBaseVelocity"
        },
        {
            "desc": "获得一个包含最大范围,以物体为中心的矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetBoundingMaxs"
        },
        {
            "desc": "获得一个包含最小范围,以物体为中心的矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetBoundingMins"
        },
        {
            "desc": "获得一个以物体为中心,包含“Mins”和“Maxs”矢量的表",
            "func": "()",
            "return": "table",
            "name": "GetBounds"
        },
        {
            "desc": "获得指向物体中心的矢量,以绝对坐标的形式",
            "func": "()",
            "return": "Vector",
            "name": "GetCenter"
        },
        {
            "desc": "获得继承这个实体的实体",
            "func": "()",
            "return": "handle",
            "name": "GetChildren"
        },
        {
            "desc": "GetContext(name):检查一个对象的状态然后返回对象是否可用.可能返回string,float,或nil(如果对象没有找到)",
            "func": "( name )",
            "return": "table",
            "name": "GetContext"
        },
        {
            "desc": "获得这个实体的前进矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetForwardVector"
        },
        {
            "desc": "Get the health of this entity.",
            "func": "()",
            "return": "int",
            "name": "GetHealth"
        },
        {
            "desc": "Get entity local pitch, yaw, roll as a QAngle",
            "func": "()",
            "return": "QAngle",
            "name": "GetLocalAngles"
        },
        {
            "desc": "可能为当前角速度",
            "func": "()",
            "return": "QAngle",
            "name": "GetLocalAngularVelocity"
        },
        {
            "desc": "Get entity local origin as a Vector",
            "func": "()",
            "return": "Vector",
            "name": "GetLocalOrigin"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetLocalScale"
        },
        {
            "desc": "获得实体相对速度",
            "func": "()",
            "return": "Vector",
            "name": "GetLocalVelocity"
        },
        {
            "desc": "Get the mass of an entity. (returns 0 if it doesn't have a physics object)",
            "func": "()",
            "return": "float",
            "name": "GetMass"
        },
        {
            "desc": "Get the maximum health of this entity.",
            "func": "()",
            "return": "int",
            "name": "GetMaxHealth"
        },
        {
            "desc": "获得模型的名字",
            "func": "()",
            "return": "string",
            "name": "GetModelName"
        },
        {
            "desc": "如果在有继承对象,恢复实体所继承的对象",
            "func": "()",
            "return": "handle",
            "name": "GetMoveParent"
        },
        {
            "desc": "",
            "func": "()",
            "return": "Vector",
            "name": "GetOrigin"
        },
        {
            "desc": "获得实体的所有者",
            "func": "()",
            "return": "handle",
            "name": "GetOwner"
        },
        {
            "desc": "获得拥有者的实体,如果有的话",
            "func": "()",
            "return": "handle",
            "name": "GetOwnerEntity"
        },
        {
            "desc": "获得实体的右方矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetRightVector"
        },
        {
            "desc": "如果在继承关系里,在继承关系中寻找所继承的根源对象",
            "func": "()",
            "return": "handle",
            "name": "GetRootMoveParent"
        },
        {
            "desc": "返回声音的播放时间.传入声音名字和可选的应用模型名字.",
            "func": "( soundname, actormodel )",
            "return": "float",
            "name": "GetSoundDuration"
        },
        {
            "desc": "Returns the spawn group handle of this entity",
            "func": "()",
            "return": "int",
            "name": "GetSpawnGroupHandle"
        },
        {
            "desc": "Get the team number of this entity.",
            "func": "()",
            "return": "int",
            "name": "GetTeam"
        },
        {
            "desc": "Get the team number of this entity.",
            "func": "()",
            "return": "int",
            "name": "GetTeamNumber"
        },
        {
            "desc": "获得实体的上方矢量",
            "func": "()",
            "return": "Vector",
            "name": "GetUpVector"
        },
        {
            "desc": "",
            "func": "()",
            "return": "Vector",
            "name": "GetVelocity"
        },
        {
            "desc": "See if an entity has a particular attribute.",
            "func": "( pName )",
            "return": "bool",
            "name": "HasAttribute"
        },
        {
            "desc": ".",
            "func": "()",
            "return": "bool",
            "name": "IsAlive"
        },
        {
            "desc": "Is this entity an CAI_BaseNPC?",
            "func": "()",
            "return": "bool",
            "name": "IsNPC"
        },
        {
            "desc": "是否为玩家的实体",
            "func": "()",
            "return": "bool",
            "name": "IsPlayer"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "Kill"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "NextMovePeer"
        },
        {
            "desc": "暂时重设阻力的持续时间和值",
            "func": "( duration, friction )",
            "return": "void",
            "name": "OverrideFriction"
        },
        {
            "desc": "预载声音文件",
            "func": "( soundname )",
            "return": "void",
            "name": "PrecacheScriptSound"
        },
        {
            "desc": "RemoveEffects( int ): Removes the render effect flag.",
            "func": "( nFlags )",
            "return": "void",
            "name": "RemoveEffects"
        },
        {
            "desc": "Set entity pitch, yaw, roll by component.",
            "func": "( fPitch, fYaw, fRoll )",
            "return": "void",
            "name": "SetAbsAngles"
        },
        {
            "desc": "设置绝对来源",
            "func": "( origin )",
            "return": "void",
            "name": "SetAbsOrigin"
        },
        {
            "desc": "",
            "func": "( flScale )",
            "return": "void",
            "name": "SetAbsScale"
        },
        {
            "desc": "设置实体的颠簸,偏航,摇晃",
            "func": "( fPitch, fYaw, fRoll )",
            "return": "void",
            "name": "SetAngles"
        },
        {
            "desc": "设置当前角速度,使用实数颠簸,偏航,摇晃速度",
            "func": "( pitchVel, yawVel, rollVel )",
            "return": "void",
            "name": "SetAngularVelocity"
        },
        {
            "desc": "Set the position of the constraint.",
            "func": "( vPos )",
            "return": "void",
            "name": "SetConstraint"
        },
        {
            "desc": "SetContext(名字,值,持续时间):存储任何在实体对话内容里的配对值.值是一个字符串.持续一段时间.(0代表永久)",
            "func": "( pName, pValue, duration )",
            "return": "void",
            "name": "SetContext"
        },
        {
            "desc": "SetContext(名字,值,持续时间):存储任何在实体对话内容里的配对值.值是一个数字(int或者float).持续一段时间.(0代表永久)",
            "func": "( pName, fValue, duration )",
            "return": "void",
            "name": "SetContextNum"
        },
        {
            "desc": "在这个实体上设置一个计时器（a:标示字符,b:执行函数c:延迟执行的时间）",
            "func": "( pszContextName, hThinkFunc, flInterval )",
            "return": "void",
            "name": "SetContextThink"
        },
        {
            "desc": "Set the name of an entity.",
            "func": "( pName )",
            "return": "void",
            "name": "SetEntityName"
        },
        {
            "desc": "设置实体的方向为前进矢量",
            "func": "( v )",
            "return": "void",
            "name": "SetForwardVector"
        },
        {
            "desc": "设置玩家阻力,无视物体",
            "func": "( flFriction )",
            "return": "void",
            "name": "SetFriction"
        },
        {
            "desc": "设置玩家引力,无视物体",
            "func": "( flGravity )",
            "return": "void",
            "name": "SetGravity"
        },
        {
            "desc": "Set the health of this entity.",
            "func": "( nHealth )",
            "return": "void",
            "name": "SetHealth"
        },
        {
            "desc": "Set entity local pitch, yaw, roll by component",
            "func": "( fPitch, fYaw, fRoll )",
            "return": "void",
            "name": "SetLocalAngles"
        },
        {
            "desc": "Set entity local origin from a Vector",
            "func": "( origin )",
            "return": "void",
            "name": "SetLocalOrigin"
        },
        {
            "desc": "",
            "func": "( flScale )",
            "return": "void",
            "name": "SetLocalScale"
        },
        {
            "desc": "Set the mass of an entity. (does nothing if it doesn't have a physics object)",
            "func": "( flMass )",
            "return": "void",
            "name": "SetMass"
        },
        {
            "desc": "Set the maximum health of this entity.",
            "func": "( amt )",
            "return": "void",
            "name": "SetMaxHealth"
        },
        {
            "desc": "",
            "func": "( v )",
            "return": "void",
            "name": "SetOrigin"
        },
        {
            "desc": "设定实体的所有者",
            "func": "( pOwner )",
            "return": "void",
            "name": "SetOwner"
        },
        {
            "desc": "设定这个实体的所继承的父实体",
            "func": "( hParent, pAttachmentname )",
            "return": "void",
            "name": "SetParent"
        },
        {
            "desc": "",
            "func": "( iTeamNum )",
            "return": "void",
            "name": "SetTeam"
        },
        {
            "desc": "",
            "func": "( vecVelocity )",
            "return": "void",
            "name": "SetVelocity"
        },
        {
            "desc": "停止播放这个实体的特定的声音",
            "func": "( soundname )",
            "return": "void",
            "name": "StopSound"
        },
        {
            "desc": "Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object.",
            "func": "( hInfo )",
            "return": "int",
            "name": "TakeDamage"
        },
        {
            "desc": "Returns the input Vector transformed from entity to world space",
            "func": "( vPoint )",
            "return": "Vector",
            "name": "TransformPointEntityToWorld"
        },
        {
            "desc": "Returns the input Vector transformed from world to entity space",
            "func": "( vPoint )",
            "return": "Vector",
            "name": "TransformPointWorldToEntity"
        },
        {
            "desc": "触发这个实体的触发器",
            "func": "()",
            "return": "void",
            "name": "Trigger"
        },
        {
            "desc": "Validates the private script scope and creates it if one doesn't exist.",
            "func": "()",
            "return": "void",
            "name": "ValidatePrivateScriptScope"
        }
    ],
    "CBaseTrigger": [
        {
            "desc": "禁止触发器",
            "func": "()",
            "return": "void",
            "name": "Disable"
        },
        {
            "desc": "允许触发器",
            "func": "()",
            "return": "void",
            "name": "Enable"
        },
        {
            "desc": "检查指定实体是否正在接触触发器",
            "func": "( hEnt )",
            "return": "bool",
            "name": "IsTouching"
        }
    ],
    "CDOTA_Ability_Aghanim_Spear": [
        {
            "desc": "Launch Spear to a target position from a source position",
            "func": "( vTarget, vStart )",
            "return": "void",
            "name": "LaunchSpear"
        }
    ],
    "CBodyComponent": [
        {
            "desc": "在指定的世界位置施加一个物理推动",
            "func": "( Vector_1, Vector_2 )",
            "return": "void",
            "name": "AddImpulseAtPosition"
        },
        {
            "desc": "为物理物件增加一个线速度或角速度",
            "func": "( Vector_1, Vector_2 )",
            "return": "void",
            "name": "AddVelocity"
        },
        {
            "desc": "从其父项（parent）中分离",
            "func": "()",
            "return": "void",
            "name": "DetachFromParent"
        },
        {
            "desc": "返回激活的序列（sequence）",
            "func": "()",
            "return": "<unknown>",
            "name": "GetSequence"
        },
        {
            "desc": "是否依附父项（parent）",
            "func": "()",
            "return": "bool",
            "name": "IsAttachedToParent"
        },
        {
            "desc": "输入名字返回序列（sequence）ID",
            "func": "( string_1 )",
            "return": "<unknown>",
            "name": "LookupSequence"
        },
        {
            "desc": "按秒数返回指定序列（sequence）的持续时间",
            "func": "( string_1 )",
            "return": "float",
            "name": "SequenceDuration"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "return": "void",
            "name": "SetAngularVelocity"
        },
        {
            "desc": "输入动画名称播放动作，需要模型拥有该动画",
            "func": "( string_1 )",
            "return": "void",
            "name": "SetAnimation"
        },
        {
            "desc": "",
            "func": "( utlstringtoken_1 )",
            "return": "void",
            "name": "SetMaterialGroup"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "return": "void",
            "name": "SetVelocity"
        }
    ],
    "CDOTAVoteSystem": [
        {
            "desc": "开始投票，详细由传入的table制定",
            "func": "( handle_1 )",
            "return": "void",
            "name": "StartVote"
        }
    ],
    "CCustomGameEventManager": [
        {
            "desc": "(stringEventName,funcCallbackFunction)-监听指定自定义事件，注册一个回调函数，在指定事件触发时被调用。返回一个监听者ID用来在以后取消监听。",
            "func": "( string_1, handle_2 )",
            "return": "int",
            "name": "RegisterListener"
        },
        {
            "desc": "(stringEventName,tableEventData)",
            "func": "( string_1, handle_2 )",
            "return": "void",
            "name": "Send_ServerToAllClients"
        },
        {
            "desc": "(EntityPlayer,stringEventName,tableEventData)",
            "func": "( handle_1, string_2, handle_3 )",
            "return": "void",
            "name": "Send_ServerToPlayer"
        },
        {
            "desc": "(intTeamNumber,stringEventName,tableEventData)",
            "func": "( int_1, string_2, handle_3 )",
            "return": "void",
            "name": "Send_ServerToTeam"
        },
        {
            "desc": "(intListnerID)-对指定的监听者取消监听。",
            "func": "( int_1 )",
            "return": "void",
            "name": "UnregisterListener"
        }
    ],
    "CCustomNetTableManager": [
        {
            "desc": "(stringTableName,stringKeyName)",
            "func": "( string_1, string_2 )",
            "return": "table",
            "name": "GetTableValue"
        },
        {
            "desc": "(stringTableName,stringKeyName,script_tableValue)",
            "func": "( string_1, string_2, handle_3 )",
            "return": "bool",
            "name": "SetTableValue"
        }
    ],
    "CDOTA_BaseNPC": [
        {
            "desc": "以技能名称为该单位新增技能，并且返回该技能句柄。",
            "func": "( pszAbilityName )",
            "return": "handle",
            "name": "AddAbility"
        },
        {
            "desc": "Add an activity modifier that affects future StartGesture calls",
            "func": "( szName )",
            "return": "void",
            "name": "AddActivityModifier"
        },
        {
            "desc": "增加物品到该单位的库存。",
            "func": "( hItem )",
            "return": "handle",
            "name": "AddItem"
        },
        {
            "desc": "向玩家的库存添加一个物品。",
            "func": "( pszItemName )",
            "return": "handle",
            "name": "AddItemByName"
        },
        {
            "desc": "为该单位增加修改器。",
            "func": "( hCaster, hAbility, pszScriptName, hModifierTable )",
            "return": "handle",
            "name": "AddNewModifier"
        },
        {
            "desc": "为单位添加NoDraw的flag。",
            "func": "()",
            "return": "void",
            "name": "AddNoDraw"
        },
        {
            "desc": "为单位添加一个会话气泡（可同时存在1-4个）。",
            "func": "( iBubble, pszSpeech, flDuration, unOffsetX, unOffsetY )",
            "return": "void",
            "name": "AddSpeechBubble"
        },
        {
            "desc": "",
            "func": "( hAttacker, hAbility )",
            "return": "void",
            "name": "AlertNearbyUnits"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "AngerNearbyUnits"
        },
        {
            "desc": "",
            "func": "( flTime )",
            "return": "void",
            "name": "AttackNoEarlierThan"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "AttackReady"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "BoundingRadius2D"
        },
        {
            "desc": "CheckFoWtoseeifanentityisvisible.",
            "func": "( hEntity )",
            "return": "bool",
            "name": "CanEntityBeSeenByMyTeam"
        },
        {
            "desc": "Queryifthisunitcansellitems.",
            "func": "()",
            "return": "bool",
            "name": "CanSellItems"
        },
        {
            "desc": "技能立即施法。",
            "func": "( hAbility, iPlayerIndex )",
            "return": "void",
            "name": "CastAbilityImmediately"
        },
        {
            "desc": "无目标的施放技能(hAbility,iPlayerIndex)。",
            "func": "( hAbility, iPlayerIndex )",
            "return": "void",
            "name": "CastAbilityNoTarget"
        },
        {
            "desc": "对一地点施放技能。",
            "func": "( vPosition, hAbility, iPlayerIndex )",
            "return": "void",
            "name": "CastAbilityOnPosition"
        },
        {
            "desc": "对一实体施放技能。",
            "func": "( hTarget, hAbility, iPlayerIndex )",
            "return": "void",
            "name": "CastAbilityOnTarget"
        },
        {
            "desc": "切换技能(hAbility,iPlayerIndex)。",
            "func": "( hAbility, iPlayerIndex )",
            "return": "void",
            "name": "CastAbilityToggle"
        },
        {
            "desc": "Clear Activity modifiers",
            "func": "()",
            "return": "void",
            "name": "ClearActivityModifiers"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "DestroyAllSpeechBubbles"
        },
        {
            "desc": "拆解该单位库存中过时的物品",
            "func": "( hItem )",
            "return": "void",
            "name": "DisassembleItem"
        },
        {
            "desc": "将物品扔在指定地点。",
            "func": "( vDest, hItem )",
            "return": "void",
            "name": "DropItemAtPosition"
        },
        {
            "desc": "立即将物品扔在指定地点。",
            "func": "( hItem, vPosition )",
            "return": "void",
            "name": "DropItemAtPositionImmediate"
        },
        {
            "desc": "自库存栏丢落指定的物品。",
            "func": "( hItem )",
            "return": "void",
            "name": "EjectItemFromStash"
        },
        {
            "desc": "This unit will be set to face the target point.",
            "func": "( vTarget )",
            "return": "void",
            "name": "FaceTowards"
        },
        {
            "desc": "Fade and remove the given gesture activity.",
            "func": "( nActivity )",
            "return": "void",
            "name": "FadeGesture"
        },
        {
            "desc": "以名称寻找技能。",
            "func": "( pAbilityName )",
            "return": "handle",
            "name": "FindAbilityByName"
        },
        {
            "desc": "以table形式返回该单位所具有的所有Modifier。",
            "func": "()",
            "return": "table",
            "name": "FindAllModifiers"
        },
        {
            "desc": "根据Modifier的名字，以table形式返回该单位所具有的modifier。",
            "func": "( pszScriptName )",
            "return": "table",
            "name": "FindAllModifiersByName"
        },
        {
            "desc": "Get handle to first item in inventory, else nil.",
            "func": "( pszItemName )",
            "return": "handle",
            "name": "FindItemInInventory"
        },
        {
            "desc": "根据给定的名称，返回modifier的句柄。如果没有找到该名称，将返回nil。",
            "func": "( pszScriptName )",
            "return": "handle",
            "name": "FindModifierByName"
        },
        {
            "desc": "根据给定的名称，返回某施法者所具有modifier的句柄。如果没有找到该名称，将返回nil。",
            "func": "( pszScriptName, hCaster )",
            "return": "handle",
            "name": "FindModifierByNameAndCaster"
        },
        {
            "desc": "强制击杀该单位。",
            "func": "( bReincarnate )",
            "return": "void",
            "name": "ForceKill"
        },
        {
            "desc": "Play an activity once, and then go back to idle.",
            "func": "( nActivity )",
            "return": "void",
            "name": "ForcePlayActivityOnce"
        },
        {
            "desc": "以下标值检索该单位的技能。0是第一个技能",
            "func": "( iIndex )",
            "return": "handle",
            "name": "GetAbilityByIndex"
        },
        {
            "desc": "获取拥有的技能数量。",
            "func": "()",
            "return": "int",
            "name": "GetAbilityCount"
        },
        {
            "desc": "获取单位的自动收集距离。",
            "func": "()",
            "return": "float",
            "name": "GetAcquisitionRange"
        },
        {
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。",
            "func": "()",
            "return": "float",
            "name": "GetAdditionalBattleMusicWeight"
        },
        {
            "desc": "获取该单位的仇恨目标。",
            "func": "()",
            "return": "handle",
            "name": "GetAggroTarget"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetAttackAnimationPoint"
        },
        {
            "desc": "获取单位的攻击力。",
            "func": "()",
            "return": "int",
            "name": "GetAttackCapability"
        },
        {
            "desc": "获取该单位伤害最大值与最小值之间的随机整数。",
            "func": "()",
            "return": "int",
            "name": "GetAttackDamage"
        },
        {
            "desc": "获取状态增加的攻击距离。",
            "func": "()",
            "return": "float",
            "name": "GetAttackRangeBuffer"
        },
        {
            "desc": "获取该单位的攻速。",
            "func": "()",
            "return": "float",
            "name": "GetAttackSpeed"
        },
        {
            "desc": "返回该单位的攻击目标。",
            "func": "()",
            "return": "handle",
            "name": "GetAttackTarget"
        },
        {
            "desc": "获取APS值(每秒能够打几下)。",
            "func": "()",
            "return": "float",
            "name": "GetAttacksPerSecond"
        },
        {
            "desc": "获取该单位最大伤害值与最小伤害值的平均数。",
            "func": "( hTarget )",
            "return": "int",
            "name": "GetAverageTrueAttackDamage"
        },
        {
            "desc": "获取单位的基础攻击距离(修改器不列入计算)。",
            "func": "()",
            "return": "int",
            "name": "GetBaseAttackRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetBaseAttackTime"
        },
        {
            "desc": "获取最大伤害值。",
            "func": "()",
            "return": "int",
            "name": "GetBaseDamageMax"
        },
        {
            "desc": "获取最小伤害值。",
            "func": "()",
            "return": "int",
            "name": "GetBaseDamageMin"
        },
        {
            "desc": "获取单位的基础日间视野距离(修改器不列入计算)。",
            "func": "()",
            "return": "int",
            "name": "GetBaseDayTimeVisionRange"
        },
        {
            "desc": "获取单位的基础血量恢复值。",
            "func": "()",
            "return": "float",
            "name": "GetBaseHealthRegen"
        },
        {
            "desc": "获取单位的基础魔法抗性值。",
            "func": "()",
            "return": "float",
            "name": "GetBaseMagicalResistanceValue"
        },
        {
            "desc": "获取基础血量值。",
            "func": "()",
            "return": "float",
            "name": "GetBaseMaxHealth"
        },
        {
            "desc": "获取基础跑速。",
            "func": "()",
            "return": "float",
            "name": "GetBaseMoveSpeed"
        },
        {
            "desc": "获取单位基础的夜间视野距离(修改器不列入计算)。",
            "func": "()",
            "return": "int",
            "name": "GetBaseNightTimeVisionRange"
        },
        {
            "desc": "This Mana regen is derived from constant bonuses like Basilius.",
            "func": "()",
            "return": "float",
            "name": "GetBonusManaRegen"
        },
        {
            "desc": "Parameter:bAttack",
            "func": "( bAttack )",
            "return": "float",
            "name": "GetCastPoint"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCastRangeBonus"
        },
        {
            "desc": "获取米波的主身（如果这个单位是米波）。",
            "func": "()",
            "return": "handle",
            "name": "GetCloneSource"
        },
        {
            "desc": "返回该单位的碰撞体积。",
            "func": "()",
            "return": "float",
            "name": "GetCollisionPadding"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCooldownReduction"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCreationTime"
        },
        {
            "desc": "获取该单位正在使用中的法术。",
            "func": "()",
            "return": "handle",
            "name": "GetCurrentActiveAbility"
        },
        {
            "desc": "获取当前的视野距离。",
            "func": "()",
            "return": "int",
            "name": "GetCurrentVisionRange"
        },
        {
            "desc": "获取鼠标指定的施法目标。",
            "func": "()",
            "return": "handle",
            "name": "GetCursorCastTarget"
        },
        {
            "desc": "获取鼠标位置。",
            "func": "()",
            "return": "Vector",
            "name": "GetCursorPosition"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "GetCursorTargetingNothing"
        },
        {
            "desc": "获取该单位的日间视野(将修改器并入计算)。",
            "func": "()",
            "return": "int",
            "name": "GetDayTimeVisionRange"
        },
        {
            "desc": "获取该单位的击杀经验值奖赏。",
            "func": "()",
            "return": "int",
            "name": "GetDeathXP"
        },
        {
            "desc": "Attack speed expressed as constant value",
            "func": "()",
            "return": "float",
            "name": "GetDisplayAttackSpeed"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetEvasion"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "GetForceAttackTarget"
        },
        {
            "desc": "获取该单位的击杀金钱奖赏。",
            "func": "()",
            "return": "int",
            "name": "GetGoldBounty"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetHasteFactor"
        },
        {
            "desc": "返回损失的血量(最大血量-当前血量)。",
            "func": "()",
            "return": "int",
            "name": "GetHealthDeficit"
        },
        {
            "desc": "获取该单位当前的血量百分比。",
            "func": "()",
            "return": "int",
            "name": "GetHealthPercent"
        },
        {
            "desc": "获取该单位当前的血量恢复值。",
            "func": "()",
            "return": "float",
            "name": "GetHealthRegen"
        },
        {
            "desc": "获取该单位的碰撞体积半径。",
            "func": "()",
            "return": "float",
            "name": "GetHullRadius"
        },
        {
            "desc": "获取该单位的跑速(将修改器并入计算)。",
            "func": "()",
            "return": "float",
            "name": "GetIdealSpeed"
        },
        {
            "desc": "Returns speed after all modifiers, but excluding those that reduce speed.",
            "func": "()",
            "return": "float",
            "name": "GetIdealSpeedNoSlows"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetIncreasedAttackSpeed"
        },
        {
            "desc": "返回该单位初始的路径点。",
            "func": "()",
            "return": "handle",
            "name": "GetInitialGoalEntity"
        },
        {
            "desc": "Get waypoint position for this NPC.",
            "func": "()",
            "return": "Vector",
            "name": "GetInitialGoalPosition"
        },
        {
            "desc": "以下标值获取物品栏中的物品。",
            "func": "( i )",
            "return": "handle",
            "name": "GetItemInSlot"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetLastAttackTime"
        },
        {
            "desc": "Get the last time this NPC took damage",
            "func": "()",
            "return": "float",
            "name": "GetLastDamageTime"
        },
        {
            "desc": "获取该单位最后进入/离开闲置状态的时间。",
            "func": "()",
            "return": "float",
            "name": "GetLastIdleChangeTime"
        },
        {
            "desc": "返回该单位当前的等级。",
            "func": "()",
            "return": "int",
            "name": "GetLevel"
        },
        {
            "desc": "返回该单位当前的魔法抗性值。",
            "func": "()",
            "return": "float",
            "name": "GetMagicalArmorValue"
        },
        {
            "desc": "返回控制该单位的玩家ID。",
            "func": "()",
            "return": "int",
            "name": "GetMainControllingPlayer"
        },
        {
            "desc": "获取该单位的魔力值。",
            "func": "()",
            "return": "float",
            "name": "GetMana"
        },
        {
            "desc": "获取该单位的剩余魔力值百分比。",
            "func": "()",
            "return": "int",
            "name": "GetManaPercent"
        },
        {
            "desc": "获取该单位的魔力恢复值。",
            "func": "()",
            "return": "float",
            "name": "GetManaRegen"
        },
        {
            "desc": "获取单位的最大法力值。",
            "func": "()",
            "return": "float",
            "name": "GetMaxMana"
        },
        {
            "desc": "获取击杀该单位所得的最大金钱。",
            "func": "()",
            "return": "int",
            "name": "GetMaximumGoldBounty"
        },
        {
            "desc": "获取击杀该单位所得的最小金钱。",
            "func": "()",
            "return": "int",
            "name": "GetMinimumGoldBounty"
        },
        {
            "desc": "获取模型大小半径。",
            "func": "()",
            "return": "float",
            "name": "GetModelRadius"
        },
        {
            "desc": "返回该单位所拥有的修改器数量。",
            "func": "()",
            "return": "int",
            "name": "GetModifierCount"
        },
        {
            "desc": "以下标值索引修改器，并返回修改器名称字符串。",
            "func": "( nIndex )",
            "return": "string",
            "name": "GetModifierNameByIndex"
        },
        {
            "desc": "Getsthestackcountofagivenmodifier.",
            "func": "( pszScriptName, hCaster )",
            "return": "int",
            "name": "GetModifierStackCount"
        },
        {
            "desc": "",
            "func": "( flBaseSpeed, bReturnUnslowed )",
            "return": "float",
            "name": "GetMoveSpeedModifier"
        },
        {
            "desc": "该单位是否被要求走访每个路径点?",
            "func": "()",
            "return": "bool",
            "name": "GetMustReachEachGoalEntity"
        },
        {
            "desc": "Get the name of this camp's neutral spawner.",
            "func": "()",
            "return": "string",
            "name": "GetNeutralSpawnerName"
        },
        {
            "desc": "If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
            "func": "()",
            "return": "bool",
            "name": "GetNeverMoveToClearSpace"
        },
        {
            "desc": "返回夜间视野距离(将修改器并入计算)。",
            "func": "()",
            "return": "int",
            "name": "GetNightTimeVisionRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetOpposingTeamNumber"
        },
        {
            "desc": "获取单位碰撞体积半径。",
            "func": "()",
            "return": "float",
            "name": "GetPaddedCollisionRadius"
        },
        {
            "desc": "返回基础护甲值。",
            "func": "()",
            "return": "float",
            "name": "GetPhysicalArmorBaseValue"
        },
        {
            "desc": "返回当前的护甲值。",
            "func": "( bIgnoreBase )",
            "return": "float",
            "name": "GetPhysicalArmorValue"
        },
        {
            "desc": "获取拥有此单位的玩家实体。",
            "func": "()",
            "return": "handle",
            "name": "GetPlayerOwner"
        },
        {
            "desc": "获取拥有此单位的玩家ID。",
            "func": "()",
            "return": "int",
            "name": "GetPlayerOwnerID"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetProjectileSpeed"
        },
        {
            "desc": "",
            "func": "( hNPC )",
            "return": "float",
            "name": "GetRangeToUnit"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetRangedProjectileName"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetSecondsPerAttack"
        },
        {
            "desc": "",
            "func": "( bBaseOnly )",
            "return": "float",
            "name": "GetSpellAmplification"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetStatusResistance"
        },
        {
            "desc": "获取用在升级的金钱。",
            "func": "()",
            "return": "int",
            "name": "GetTotalPurchasedUpgradeGoldCost"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetUnitLabel"
        },
        {
            "desc": "获取单位名称。",
            "func": "()",
            "return": "string",
            "name": "GetUnitName"
        },
        {
            "desc": "给予此单位指定的魔法值。(Giffmemana!)",
            "func": "( flMana )",
            "return": "void",
            "name": "GiveMana"
        },
        {
            "desc": "以技能名称搜寻该单位是否拥有此技能。",
            "func": "( pszAbilityName )",
            "return": "bool",
            "name": "HasAbility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasAnyActiveAbilities"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasAttackCapability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasFlyMovementCapability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasFlyingVision"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasGroundMovementCapability"
        },
        {
            "desc": "Does this unit have an inventory.",
            "func": "()",
            "return": "bool",
            "name": "HasInventory"
        },
        {
            "desc": "以物品名称搜寻该单位是否拥有此物品。",
            "func": "( pItemName )",
            "return": "bool",
            "name": "HasItemInInventory"
        },
        {
            "desc": "以修改器名称搜寻该单位是否拥有此修改器。",
            "func": "( pszScriptName )",
            "return": "bool",
            "name": "HasModifier"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasMovementCapability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasScepter"
        },
        {
            "desc": "治疗该单位。",
            "func": "( flAmount, hInflictor )",
            "return": "void",
            "name": "Heal"
        },
        {
            "desc": "命令单位在原地待命。",
            "func": "()",
            "return": "void",
            "name": "Hold"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "Interrupt"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "InterruptChannel"
        },
        {
            "desc": "Parameterbooleandeterminesfindingclearspace.",
            "func": "( bFindClearSpace )",
            "return": "void",
            "name": "InterruptMotionControllers"
        },
        {
            "desc": "此单位是否还活着?",
            "func": "()",
            "return": "bool",
            "name": "IsAlive"
        },
        {
            "desc": "该生物是否为远古野怪?",
            "func": "()",
            "return": "bool",
            "name": "IsAncient"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsAttackImmune"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsAttacking"
        },
        {
            "desc": "",
            "func": "( hEntity )",
            "return": "bool",
            "name": "IsAttackingEntity"
        },
        {
            "desc": "Is this unit a Barracks?",
            "func": "()",
            "return": "bool",
            "name": "IsBarracks"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsBlind"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsBlockDisabled"
        },
        {
            "desc": "Is this unit a boss?",
            "func": "()",
            "return": "bool",
            "name": "IsBoss"
        },
        {
            "desc": "Is this unit a building?",
            "func": "()",
            "return": "bool",
            "name": "IsBuilding"
        },
        {
            "desc": "Is this unit currently channeling a spell?",
            "func": "()",
            "return": "bool",
            "name": "IsChanneling"
        },
        {
            "desc": "Is this unit a clone? (Meepo)",
            "func": "()",
            "return": "bool",
            "name": "IsClone"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsCommandRestricted"
        },
        {
            "desc": "Is this unit a considered a hero for targeting purposes?",
            "func": "()",
            "return": "bool",
            "name": "IsConsideredHero"
        },
        {
            "desc": "该单位是否为非Bot玩家所控制?",
            "func": "()",
            "return": "bool",
            "name": "IsControllableByAnyPlayer"
        },
        {
            "desc": "Is this unit a courier?",
            "func": "()",
            "return": "bool",
            "name": "IsCourier"
        },
        {
            "desc": "此单位是否为怪物类型单位?",
            "func": "()",
            "return": "bool",
            "name": "IsCreature"
        },
        {
            "desc": "Is this unit a creep?",
            "func": "()",
            "return": "bool",
            "name": "IsCreep"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsCurrentlyHorizontalMotionControlled"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsCurrentlyVerticalMotionControlled"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDisarmed"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDominated"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsEvadeDisabled"
        },
        {
            "desc": "Is this unit an Ancient?",
            "func": "()",
            "return": "bool",
            "name": "IsFort"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsFrozen"
        },
        {
            "desc": "此单位是否为英雄或英雄幻象?",
            "func": "()",
            "return": "bool",
            "name": "IsHero"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHexed"
        },
        {
            "desc": "该生物是否处于闲置状态?",
            "func": "()",
            "return": "bool",
            "name": "IsIdle"
        },
        {
            "desc": "该单位是否为幻象单位?",
            "func": "()",
            "return": "bool",
            "name": "IsIllusion"
        },
        {
            "desc": "Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear",
            "func": "( nShopType, bPhysical )",
            "return": "bool",
            "name": "IsInRangeOfShop"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsInvisible"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsInvulnerable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsLowAttackPriority"
        },
        {
            "desc": "该单位是否魔法免疫?",
            "func": "()",
            "return": "bool",
            "name": "IsMagicImmune"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsMovementImpaired"
        },
        {
            "desc": "Is this unit moving?",
            "func": "()",
            "return": "bool",
            "name": "IsMoving"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsMuted"
        },
        {
            "desc": "该单位是否为野怪?",
            "func": "()",
            "return": "bool",
            "name": "IsNeutralUnitType"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsNightmared"
        },
        {
            "desc": "",
            "func": "( nTeam )",
            "return": "bool",
            "name": "IsOpposingTeam"
        },
        {
            "desc": "Is this unit a ward-type unit?",
            "func": "()",
            "return": "bool",
            "name": "IsOther"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsOutOfGame"
        },
        {
            "desc": "该单位是否为非Bot之玩家所有?",
            "func": "()",
            "return": "bool",
            "name": "IsOwnedByAnyPlayer"
        },
        {
            "desc": "该单位是否为幻象单位?",
            "func": "()",
            "return": "bool",
            "name": "IsPhantom"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsPhantomBlocker"
        },
        {
            "desc": "是否在相位状态?",
            "func": "()",
            "return": "bool",
            "name": "IsPhased"
        },
        {
            "desc": "是否在某点的范围内",
            "func": "( vPosition, flRange )",
            "return": "bool",
            "name": "IsPositionInRange"
        },
        {
            "desc": "该单位攻击类型是否为远程攻击?",
            "func": "()",
            "return": "bool",
            "name": "IsRangedAttacker"
        },
        {
            "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。",
            "func": "()",
            "return": "bool",
            "name": "IsRealHero"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsReincarnating"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsRooted"
        },
        {
            "desc": "Is this a shrine?",
            "func": "()",
            "return": "bool",
            "name": "IsShrine"
        },
        {
            "desc": "该单位是否被沉默?",
            "func": "()",
            "return": "bool",
            "name": "IsSilenced"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsSpeciallyDeniable"
        },
        {
            "desc": "该单位是否被晕眩了?",
            "func": "()",
            "return": "bool",
            "name": "IsStunned"
        },
        {
            "desc": "此单位是否为召唤物?",
            "func": "()",
            "return": "bool",
            "name": "IsSummoned"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsTempestDouble"
        },
        {
            "desc": "此单位是否为塔?",
            "func": "()",
            "return": "bool",
            "name": "IsTower"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsUnableToMiss"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsUnselectable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsUntargetable"
        },
        {
            "desc": "杀死一个单位，参数为使用的技能与攻击者。",
            "func": "( hAbility, hAttacker )",
            "return": "void",
            "name": "Kill"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "MakeIllusion"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "MakePhantomBlocker"
        },
        {
            "desc": "",
            "func": "( iTeam, flRadius )",
            "return": "void",
            "name": "MakeVisibleDueToAttack"
        },
        {
            "desc": "",
            "func": "( iTeam, flDuration )",
            "return": "void",
            "name": "MakeVisibleToTeam"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "ManageModelChanges"
        },
        {
            "desc": "设置血量为所指定的值",
            "func": "( iDesiredHealthValue, hAbility, bLethal, iAdditionalFlags )",
            "return": "void",
            "name": "ModifyHealth"
        },
        {
            "desc": "移动至指定的单位。",
            "func": "( hNPC )",
            "return": "void",
            "name": "MoveToNPC"
        },
        {
            "desc": "将身上的物品丢给指定的单位。",
            "func": "( hNPC, hItem )",
            "return": "void",
            "name": "MoveToNPCToGiveItem"
        },
        {
            "desc": "移动到指定的位置。",
            "func": "( vDest )",
            "return": "void",
            "name": "MoveToPosition"
        },
        {
            "desc": "移动到指定的位置。",
            "func": "( vDest )",
            "return": "void",
            "name": "MoveToPositionAggressive"
        },
        {
            "desc": "移动至指定的单位，并且发动攻击。",
            "func": "( hTarget )",
            "return": "void",
            "name": "MoveToTargetToAttack"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoHealthBar"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoTeamMoveTo"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoTeamSelect"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NoUnitCollision"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NotOnMinimap"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "NotOnMinimapForEnemies"
        },
        {
            "desc": "通知模型的可穿戴性发生了改变。",
            "func": "( bOriginalModel )",
            "return": "void",
            "name": "NotifyWearablesOfModelChange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "PassivesDisabled"
        },
        {
            "desc": "Issue a Patrol-To command.",
            "func": "( vDest )",
            "return": "void",
            "name": "PatrolToPosition"
        },
        {
            "desc": "对一单位执行攻击。",
            "func": "( hTarget, bUseCastAttackOrb, bProcessProcs, bSkipCooldown, bIgnoreInvis, bUseProjectile, bFakeAttack, bNeverMiss )",
            "return": "void",
            "name": "PerformAttack"
        },
        {
            "desc": "捡起掉落的物品。",
            "func": "( hItem )",
            "return": "void",
            "name": "PickupDroppedItem"
        },
        {
            "desc": "捡起神符。",
            "func": "( hItem )",
            "return": "void",
            "name": "PickupRune"
        },
        {
            "desc": "Play a VCD on the NPC.",
            "func": "( pVCD )",
            "return": "void",
            "name": "PlayVCD"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ProvidesVision"
        },
        {
            "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。",
            "func": "( bRemovePositiveBuffs, bRemoveDebuffs, bFrameOnly, bRemoveStuns, bRemoveExceptions )",
            "return": "void",
            "name": "Purge"
        },
        {
            "desc": "Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay.",
            "func": "( flDelay, hCriteriaTable, hCompletionCallbackFn, hContext, hCallbackInfo )",
            "return": "void",
            "name": "QueueConcept"
        },
        {
            "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。",
            "func": "( flAmount )",
            "return": "void",
            "name": "ReduceMana"
        },
        {
            "desc": "以技能名称移除该单位相应的技能。",
            "func": "( pszAbilityName )",
            "return": "void",
            "name": "RemoveAbility"
        },
        {
            "desc": "Remove the passed ability from this unit.",
            "func": "( hAbility )",
            "return": "void",
            "name": "RemoveAbilityByHandle"
        },
        {
            "desc": "",
            "func": "( pszAbilityName )",
            "return": "void",
            "name": "RemoveAbilityFromIndexByName"
        },
        {
            "desc": "移除某个动作。",
            "func": "( nActivity )",
            "return": "void",
            "name": "RemoveGesture"
        },
        {
            "desc": "移除水平方向上的运动控制器。",
            "func": "( hBuff )",
            "return": "void",
            "name": "RemoveHorizontalMotionController"
        },
        {
            "desc": "将该单位库存中的过期物品移除。",
            "func": "( hItem )",
            "return": "void",
            "name": "RemoveItem"
        },
        {
            "desc": "以名称移除修改器。",
            "func": "( pszScriptName )",
            "return": "void",
            "name": "RemoveModifierByName"
        },
        {
            "desc": "以施法者与修改器名称移除修改器。",
            "func": "( pszScriptName, hCaster )",
            "return": "void",
            "name": "RemoveModifierByNameAndCaster"
        },
        {
            "desc": "Removethenodrawflag.",
            "func": "()",
            "return": "void",
            "name": "RemoveNoDraw"
        },
        {
            "desc": "移除垂直方向上的运动控制器。",
            "func": "( hBuff )",
            "return": "void",
            "name": "RemoveVerticalMotionController"
        },
        {
            "desc": "复活该单位。",
            "func": "()",
            "return": "void",
            "name": "RespawnUnit"
        },
        {
            "desc": "Gets this unit's attack range after all modifiers.",
            "func": "()",
            "return": "float",
            "name": "Script_GetAttackRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "Script_IsDeniable"
        },
        {
            "desc": "卖出该单位的物品。",
            "func": "( hItem )",
            "return": "void",
            "name": "SellItem"
        },
        {
            "desc": "改变技能Index",
            "func": "( hAbility, iIndex )",
            "return": "void",
            "name": "SetAbilityByIndex"
        },
        {
            "desc": "Setsacquisitionrange",
            "func": "( nRange )",
            "return": "void",
            "name": "SetAcquisitionRange"
        },
        {
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。",
            "func": "( flWeight )",
            "return": "void",
            "name": "SetAdditionalBattleMusicWeight"
        },
        {
            "desc": "将这个单位的仇恨目标设为某个单位。",
            "func": "( hAggroTarget )",
            "return": "void",
            "name": "SetAggroTarget"
        },
        {
            "desc": "",
            "func": "( iAttackCapabilities )",
            "return": "void",
            "name": "SetAttackCapability"
        },
        {
            "desc": "",
            "func": "( hAttackTarget )",
            "return": "void",
            "name": "SetAttacking"
        },
        {
            "desc": "",
            "func": "( flBaseAttackTime )",
            "return": "void",
            "name": "SetBaseAttackTime"
        },
        {
            "desc": "设置基础最大攻击力。",
            "func": "( nMax )",
            "return": "void",
            "name": "SetBaseDamageMax"
        },
        {
            "desc": "设置基础最小攻击力。",
            "func": "( nMin )",
            "return": "void",
            "name": "SetBaseDamageMin"
        },
        {
            "desc": "",
            "func": "( flHealthRegen )",
            "return": "void",
            "name": "SetBaseHealthRegen"
        },
        {
            "desc": "设置基础魔法抗性值。",
            "func": "( flMagicalResistanceValue )",
            "return": "void",
            "name": "SetBaseMagicalResistanceValue"
        },
        {
            "desc": "设置基础魔力恢复值。",
            "func": "( flManaRegen )",
            "return": "void",
            "name": "SetBaseManaRegen"
        },
        {
            "desc": "设置基础最大血量。",
            "func": "( flBaseMaxHealth )",
            "return": "void",
            "name": "SetBaseMaxHealth"
        },
        {
            "desc": "设置基础跑速。",
            "func": "( iMoveSpeed )",
            "return": "void",
            "name": "SetBaseMoveSpeed"
        },
        {
            "desc": "设置这个单位是否能出售物品。",
            "func": "( bCanSell )",
            "return": "void",
            "name": "SetCanSellItems"
        },
        {
            "desc": "以玩家ID设置该单位的控制权。",
            "func": "( iIndex, bSkipAdjustingPosition )",
            "return": "void",
            "name": "SetControllableByPlayer"
        },
        {
            "desc": "",
            "func": "( hEntity )",
            "return": "void",
            "name": "SetCursorCastTarget"
        },
        {
            "desc": "",
            "func": "( vLocation )",
            "return": "void",
            "name": "SetCursorPosition"
        },
        {
            "desc": "",
            "func": "( bTargetingNothing )",
            "return": "void",
            "name": "SetCursorTargetingNothing"
        },
        {
            "desc": "",
            "func": "( pLabel, r, g, b )",
            "return": "void",
            "name": "SetCustomHealthLabel"
        },
        {
            "desc": "设置基础的视间视野距离。",
            "func": "( iRange )",
            "return": "void",
            "name": "SetDayTimeVisionRange"
        },
        {
            "desc": "SettheXPbountyonthisunit",
            "func": "( iXPBounty )",
            "return": "void",
            "name": "SetDeathXP"
        },
        {
            "desc": "",
            "func": "( hNPC )",
            "return": "void",
            "name": "SetForceAttackTarget"
        },
        {
            "desc": "",
            "func": "( hNPC )",
            "return": "void",
            "name": "SetForceAttackTargetAlly"
        },
        {
            "desc": "Set if this unit has an inventory.",
            "func": "( bHasInventory )",
            "return": "void",
            "name": "SetHasInventory"
        },
        {
            "desc": "设置该单位的碰撞半径。",
            "func": "( flHullRadius )",
            "return": "void",
            "name": "SetHullRadius"
        },
        {
            "desc": "",
            "func": "( bIdleAcquire )",
            "return": "void",
            "name": "SetIdleAcquire"
        },
        {
            "desc": "设置该单位的初始路径点。",
            "func": "( hGoal )",
            "return": "void",
            "name": "SetInitialGoalEntity"
        },
        {
            "desc": "Set waypoint position for this NPC.",
            "func": "( vPosition )",
            "return": "void",
            "name": "SetInitialGoalPosition"
        },
        {
            "desc": "设置该单位的魔力值。",
            "func": "( flMana )",
            "return": "void",
            "name": "SetMana"
        },
        {
            "desc": "Set the maximum mana of this unit.",
            "func": "( flMaxMana )",
            "return": "void",
            "name": "SetMaxMana"
        },
        {
            "desc": "设置该单位的最高赏金。",
            "func": "( iGoldBountyMax )",
            "return": "void",
            "name": "SetMaximumGoldBounty"
        },
        {
            "desc": "设置该单位的最低赏金。",
            "func": "( iGoldBountyMin )",
            "return": "void",
            "name": "SetMinimumGoldBounty"
        },
        {
            "desc": "Setsthestackcountofagivenmodifier.",
            "func": "( pszScriptName, hCaster, nStackCount )",
            "return": "void",
            "name": "SetModifierStackCount"
        },
        {
            "desc": "",
            "func": "( iMoveCapabilities )",
            "return": "void",
            "name": "SetMoveCapability"
        },
        {
            "desc": "设置该单位是否要走访每个路径点。",
            "func": "( must )",
            "return": "void",
            "name": "SetMustReachEachGoalEntity"
        },
        {
            "desc": "如果设置为True，则不会将该单位移动到净空的地方。",
            "func": "( neverMoveToClearSpace )",
            "return": "void",
            "name": "SetNeverMoveToClearSpace"
        },
        {
            "desc": "设置基础夜间视野距离。",
            "func": "( iRange )",
            "return": "void",
            "name": "SetNightTimeVisionRange"
        },
        {
            "desc": "设置单位位置。",
            "func": "( vLocation )",
            "return": "void",
            "name": "SetOrigin"
        },
        {
            "desc": "设置单位原模型。",
            "func": "( pszModelName )",
            "return": "void",
            "name": "SetOriginalModel"
        },
        {
            "desc": "设置基础护甲值。",
            "func": "( flPhysicalArmorValue )",
            "return": "void",
            "name": "SetPhysicalArmorBaseValue"
        },
        {
            "desc": "",
            "func": "( pProjectileName )",
            "return": "void",
            "name": "SetRangedProjectileName"
        },
        {
            "desc": "sets the client side map reveal radius for this unit",
            "func": "( revealRadius )",
            "return": "void",
            "name": "SetRevealRadius"
        },
        {
            "desc": "",
            "func": "( bShouldVisuallyFly )",
            "return": "void",
            "name": "SetShouldDoFlyHeightVisual"
        },
        {
            "desc": "",
            "func": "( bStolenScepter )",
            "return": "void",
            "name": "SetStolenScepter"
        },
        {
            "desc": "",
            "func": "( bCanRespawn )",
            "return": "void",
            "name": "SetUnitCanRespawn"
        },
        {
            "desc": "",
            "func": "( pName )",
            "return": "void",
            "name": "SetUnitName"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ShouldIdleAcquire"
        },
        {
            "desc": "Speak a response system concept with the TLK_DOTA_CUSTOM concept.",
            "func": "( hCriteriaTable )",
            "return": "void",
            "name": "SpeakConcept"
        },
        {
            "desc": "消耗魔力，可以用在技能消耗或使用物品。",
            "func": "( flManaSpent, hAbility )",
            "return": "void",
            "name": "SpendMana"
        },
        {
            "desc": "向单位添加给定的动作。",
            "func": "( nActivity )",
            "return": "void",
            "name": "StartGesture"
        },
        {
            "desc": "Add the given gesture activity faded according to its sequence settings.",
            "func": "( nActivity )",
            "return": "void",
            "name": "StartGestureFadeWithSequenceSettings"
        },
        {
            "desc": "Add the given gesture activity faded according to to the parameters.",
            "func": "( nActivity, fFadeIn, fFadeOut )",
            "return": "void",
            "name": "StartGestureWithFade"
        },
        {
            "desc": "向单位添加给定的动作，带有自定义的动作速度。",
            "func": "( nActivity, flRate )",
            "return": "void",
            "name": "StartGestureWithPlaybackRate"
        },
        {
            "desc": "使该单位暂停当前动作。",
            "func": "()",
            "return": "void",
            "name": "Stop"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "StopFacing"
        },
        {
            "desc": "交换两个技能的字段，并设置其是否生效。",
            "func": "( pAbilityName1, pAbilityName2, bEnable1, bEnable2 )",
            "return": "void",
            "name": "SwapAbilities"
        },
        {
            "desc": "交换两个物品的位置。",
            "func": "( nSlot1, nSlot2 )",
            "return": "void",
            "name": "SwapItems"
        },
        {
            "desc": "隐藏物品",
            "func": "( hItem )",
            "return": "handle",
            "name": "TakeItem"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "TimeUntilNextAttack"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "TriggerModifierDodge"
        },
        {
            "desc": "判断传递的技能是否会触发该单位的技能吸收",
            "func": "( hAbility )",
            "return": "bool",
            "name": "TriggerSpellAbsorb"
        },
        {
            "desc": "触发类似于清莲宝珠一样的效果。",
            "func": "( hAbility )",
            "return": "void",
            "name": "TriggerSpellReflect"
        },
        {
            "desc": "Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot.",
            "func": "( pszAbilityName, pszReplacedAbilityName )",
            "return": "void",
            "name": "UnHideAbilityToSlot"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "UnitCanRespawn"
        }
    ],
    "CDOTA_ShopTrigger": [
        {
            "desc": "Get the DOTA_SHOP_TYPE",
            "func": "()",
            "return": "int",
            "name": "GetShopType"
        },
        {
            "desc": "Set the DOTA_SHOP_TYPE.",
            "func": "( eShopType )",
            "return": "void",
            "name": "SetShopType"
        }
    ],
    "CDOTABaseAbility": [
        {
            "desc": "",
            "func": "()",
            "return": "<unknown>",
            "name": "CanAbilityBeUpgraded"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "CastAbility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ContinueCasting"
        },
        {
            "desc": "",
            "func": "( vLocation, fRadius, fDuration )",
            "return": "void",
            "name": "CreateVisibilityNode"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "DecrementModifierRefCount"
        },
        {
            "desc": "参数:boolbInterrupted",
            "func": "( bInterrupted )",
            "return": "void",
            "name": "EndChannel"
        },
        {
            "desc": "刷新这个技能",
            "func": "()",
            "return": "void",
            "name": "EndCooldown"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAOERadius"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityDamage"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityDamageType"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityIndex"
        },
        {
            "desc": "Gets the key values definition for this ability.",
            "func": "()",
            "return": "table",
            "name": "GetAbilityKeyValues"
        },
        {
            "desc": "Returns the name of this ability.",
            "func": "()",
            "return": "string",
            "name": "GetAbilityName"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityTargetFlags"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityTargetTeam"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityTargetType"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetAbilityType"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "GetAnimationIgnoresModelScale"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetAssociatedPrimaryAbilities"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetAssociatedSecondaryAbilities"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "GetAutoCastState"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetBackswingTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetBehavior"
        },
        {
            "desc": "Returnsthecastpointofthisability.",
            "func": "()",
            "return": "float",
            "name": "GetCastPoint"
        },
        {
            "desc": "Returnsthecastrangeofthisability.",
            "func": "( vLocation, hTarget )",
            "return": "int",
            "name": "GetCastRange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "GetCaster"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetChannelStartTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetChannelTime"
        },
        {
            "desc": "Returnsthechanneledmanacostpersecondofthisabilityifit'sachannelingability.",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetChannelledManaCostPerSecond"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "GetCloneSource"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetConceptRecipientType"
        },
        {
            "desc": "获得技能在给出的等级设定上的冷却时间,而不是目前的剩余的冷却时间",
            "func": "( iLevel )",
            "return": "float",
            "name": "GetCooldown"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCooldownTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetCooldownTimeRemaining"
        },
        {
            "desc": "Returnsthetargetpointvectorfromthelastcastofthispoint-targetingability.",
            "func": "()",
            "return": "Vector",
            "name": "GetCursorPosition"
        },
        {
            "desc": "Returnsthetargetunitfromthelastcastofthisunit-targetingability.",
            "func": "()",
            "return": "handle",
            "name": "GetCursorTarget"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "GetCursorTargetingNothing"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetDuration"
        },
        {
            "desc": "",
            "func": "( iLevel )",
            "return": "float",
            "name": "GetEffectiveCooldown"
        },
        {
            "desc": "",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetGoldCost"
        },
        {
            "desc": "",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetGoldCostForUpgrade"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetHeroLevelRequiredToUpgrade"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetIntrinsicModifierName"
        },
        {
            "desc": "获得技能目前的等级",
            "func": "()",
            "return": "int",
            "name": "GetLevel"
        },
        {
            "desc": "",
            "func": "( szName, nLevel )",
            "return": "table",
            "name": "GetLevelSpecialValueFor"
        },
        {
            "desc": "",
            "func": "( szName, nLevel )",
            "return": "table",
            "name": "GetLevelSpecialValueNoOverride"
        },
        {
            "desc": "",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetManaCost"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetMaxLevel"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetModifierValue"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetModifierValueBonus"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetPlaybackRateOverride"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetSharedCooldownName"
        },
        {
            "desc": "Gets a value from this ability's special value block for its current level.",
            "func": "( szName )",
            "return": "table",
            "name": "GetSpecialValueFor"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetStolenActivityModifier"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "GetToggleState"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "GetUpgradeRecommended"
        },
        {
            "desc": "",
            "func": "( flXP )",
            "return": "bool",
            "name": "HeroXPChange"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "IncrementModifierRefCount"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsActivated"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsAttributeBonus"
        },
        {
            "desc": "返回目前技能是否在施法状态",
            "func": "()",
            "return": "bool",
            "name": "IsChanneling"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsCooldownReady"
        },
        {
            "desc": "",
            "func": "( hEntity )",
            "return": "bool",
            "name": "IsCosmetic"
        },
        {
            "desc": "返回技能能否被释放",
            "func": "()",
            "return": "bool",
            "name": "IsFullyCastable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHidden"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHiddenAsSecondaryAbility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHiddenWhenStolen"
        },
        {
            "desc": "返回技能目前是否在被释放",
            "func": "()",
            "return": "bool",
            "name": "IsInAbilityPhase"
        },
        {
            "desc": "Returnswhetherthisisanabilityattachedtoanitem.",
            "func": "()",
            "return": "bool",
            "name": "IsItem"
        },
        {
            "desc": "",
            "func": "( nIssuerPlayerID )",
            "return": "bool",
            "name": "IsOwnersGoldEnough"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsOwnersGoldEnoughForUpgrade"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsOwnersManaEnough"
        },
        {
            "desc": "Returnswhetherthisisapassiveability.",
            "func": "()",
            "return": "bool",
            "name": "IsPassive"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsRefreshable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsSharedWithTeammates"
        },
        {
            "desc": "Returnswhetherthisabilitycanbestealed(byRubick'sultimate).",
            "func": "()",
            "return": "bool",
            "name": "IsStealable"
        },
        {
            "desc": "Returnswhetherthisabilityhasbeenstolen.",
            "func": "()",
            "return": "bool",
            "name": "IsStolen"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsToggle"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsTrained"
        },
        {
            "desc": "标记这个技能图标表示需要刷新",
            "func": "()",
            "return": "void",
            "name": "MarkAbilityButtonDirty"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "NumModifiersUsingAbility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnAbilityPhaseInterrupted"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "OnAbilityPhaseStart"
        },
        {
            "desc": "",
            "func": "( nPlayerID, bCtrlHeld )",
            "return": "void",
            "name": "OnAbilityPinged"
        },
        {
            "desc": "",
            "func": "( bInterrupted )",
            "return": "void",
            "name": "OnChannelFinish"
        },
        {
            "desc": "",
            "func": "( flInterval )",
            "return": "void",
            "name": "OnChannelThink"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnHeroCalculateStatBonus"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnHeroLevelUp"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnOwnerDied"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnOwnerSpawned"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnSpellStart"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnToggle"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnUpgrade"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "PayGoldCost"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "PayGoldCostForUpgrade"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "PayManaCost"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "PlaysDefaultAnimWhenStolen"
        },
        {
            "desc": "Returnswhetherthisabilityprocsmagicstick.",
            "func": "()",
            "return": "bool",
            "name": "ProcsMagicStick"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "RefCountsModifiers"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "RefreshCharges"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "RefundManaCost"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ResetToggleOnRespawn"
        },
        {
            "desc": "",
            "func": "( iIndex )",
            "return": "void",
            "name": "SetAbilityIndex"
        },
        {
            "desc": "",
            "func": "( bActivated )",
            "return": "void",
            "name": "SetActivated"
        },
        {
            "desc": "",
            "func": "( bChanneling )",
            "return": "void",
            "name": "SetChanneling"
        },
        {
            "desc": "",
            "func": "( bFrozenCooldown )",
            "return": "void",
            "name": "SetFrozenCooldown"
        },
        {
            "desc": "",
            "func": "( bHidden )",
            "return": "void",
            "name": "SetHidden"
        },
        {
            "desc": "",
            "func": "( bInAbilityPhase )",
            "return": "void",
            "name": "SetInAbilityPhase"
        },
        {
            "desc": "设置这个技能的等级",
            "func": "( iLevel )",
            "return": "void",
            "name": "SetLevel"
        },
        {
            "desc": "",
            "func": "( flCastPoint )",
            "return": "void",
            "name": "SetOverrideCastPoint"
        },
        {
            "desc": "",
            "func": "( bRefCounts )",
            "return": "void",
            "name": "SetRefCountsModifiers"
        },
        {
            "desc": "",
            "func": "( bStealable )",
            "return": "void",
            "name": "SetStealable"
        },
        {
            "desc": "",
            "func": "( bStolen )",
            "return": "void",
            "name": "SetStolen"
        },
        {
            "desc": "",
            "func": "( bUpgradeRecommended )",
            "return": "void",
            "name": "SetUpgradeRecommended"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ShouldUseResources"
        },
        {
            "desc": "",
            "func": "( iConcept )",
            "return": "void",
            "name": "SpeakAbilityConcept"
        },
        {
            "desc": "",
            "func": "()",
            "return": "<unknown>",
            "name": "SpeakTrigger"
        },
        {
            "desc": "参数:fl冷却时间?",
            "func": "( flCooldown )",
            "return": "void",
            "name": "StartCooldown"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "ToggleAbility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "ToggleAutoCast"
        },
        {
            "desc": "",
            "func": "( bSupressSpeech )",
            "return": "void",
            "name": "UpgradeAbility"
        },
        {
            "desc": "",
            "func": "( bMana, bGold, bCooldown )",
            "return": "void",
            "name": "UseResources"
        }
    ],
    "CDOTA_Modifier_Lua": [
        {
            "desc": "幻象是否继承这个Mordifier",
            "func": "()",
            "return": "bool",
            "name": "AllowIllusionDuplicate"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "CanParentBeAutoAttacked"
        },
        {
            "desc": "Buff是否会在Mordifier到期时被移除",
            "func": "()",
            "return": "bool",
            "name": "DestroyOnExpire"
        },
        {
            "desc": "返回被应用到Mordifier上的属性类别",
            "func": "()",
            "return": "int",
            "name": "GetAttributes"
        },
        {
            "desc": "Returns aura stickiness",
            "func": "()",
            "return": "float",
            "name": "GetAuraDuration"
        },
        {
            "desc": "返回实体是否在某些条件下获得光环",
            "func": "( hEntity )",
            "return": "bool",
            "name": "GetAuraEntityReject"
        },
        {
            "desc": "返回光环半径",
            "func": "()",
            "return": "int",
            "name": "GetAuraRadius"
        },
        {
            "desc": "返回光环施加效果时的Flag",
            "func": "()",
            "return": "int",
            "name": "GetAuraSearchFlags"
        },
        {
            "desc": "返回光环效果将施加的队伍",
            "func": "()",
            "return": "int",
            "name": "GetAuraSearchTeam"
        },
        {
            "desc": "返回光环效果将施加的单位类型",
            "func": "()",
            "return": "int",
            "name": "GetAuraSearchType"
        },
        {
            "desc": "通过GetEffectName获取将添加的粒子特效类型",
            "func": "()",
            "return": "int",
            "name": "GetEffectAttachType"
        },
        {
            "desc": "返回Mordifier运行时所产生的粒子特效的名称",
            "func": "()",
            "return": "string",
            "name": "GetEffectName"
        },
        {
            "desc": "返回Mordifier运行时所产生的英雄粒子特效的名称",
            "func": "()",
            "return": "string",
            "name": "GetHeroEffectName"
        },
        {
            "desc": "返回这个Mordifier将施加的二级Mordifier名称(如果一级Mordifier是光环)",
            "func": "()",
            "return": "string",
            "name": "GetModifierAura"
        },
        {
            "desc": "Return the priority order this modifier will be applied over others.",
            "func": "()",
            "return": "int",
            "name": "GetPriority"
        },
        {
            "desc": "返回Mordifier运行时所产生的状态粒子特效的名称",
            "func": "()",
            "return": "string",
            "name": "GetStatusEffectName"
        },
        {
            "desc": "返回Mordifier的图标",
            "func": "()",
            "return": "string",
            "name": "GetTexture"
        },
        {
            "desc": "英雄特效的显示优先级(更高的数字在Buff栏中被优先显示)",
            "func": "()",
            "return": "int",
            "name": "HeroEffectPriority"
        },
        {
            "desc": "这个Mordifier是否是光环",
            "func": "()",
            "return": "bool",
            "name": "IsAura"
        },
        {
            "desc": "返回携带单位死后其光环是否有效",
            "func": "()",
            "return": "bool",
            "name": "IsAuraActiveOnDeath"
        },
        {
            "desc": "返回这个Mordifier是否是Debuff",
            "func": "()",
            "return": "bool",
            "name": "IsDebuff"
        },
        {
            "desc": "返回这个Mordifier是否在状态栏中显示",
            "func": "()",
            "return": "bool",
            "name": "IsHidden"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsPermanent"
        },
        {
            "desc": "返回这个Mordifier是否能被清除",
            "func": "()",
            "return": "bool",
            "name": "IsPurgable"
        },
        {
            "desc": "返回这个Mordifier是否能被强力驱散清除",
            "func": "()",
            "return": "bool",
            "name": "IsPurgeException"
        },
        {
            "desc": "返回这个Mordifier是否是眩晕类Debuff",
            "func": "()",
            "return": "bool",
            "name": "IsStunDebuff"
        },
        {
            "desc": "在Mordifier被创建时运行",
            "func": "( table )",
            "return": "void",
            "name": "OnCreated"
        },
        {
            "desc": "在Mordifier清楚时运行",
            "func": "()",
            "return": "void",
            "name": "OnDestroy"
        },
        {
            "desc": "当计时器间隔开始时",
            "func": "()",
            "return": "void",
            "name": "OnIntervalThink"
        },
        {
            "desc": "当Mordifier被刷新时运行",
            "func": "( table )",
            "return": "void",
            "name": "OnRefresh"
        },
        {
            "desc": "Runs when the modifier is destroyed (before unit loses modifier).",
            "func": "()",
            "return": "void",
            "name": "OnRemoved"
        },
        {
            "desc": "Runs when stack count changes (param is old count).",
            "func": "( iStackCount )",
            "return": "void",
            "name": "OnStackCountChanged"
        },
        {
            "desc": "返回持有者死亡时Mordifier是否被移除",
            "func": "()",
            "return": "bool",
            "name": "RemoveOnDeath"
        },
        {
            "desc": "",
            "func": "( bHasCustomData )",
            "return": "void",
            "name": "SetHasCustomTransmitterData"
        },
        {
            "desc": "Apply the overhead offset to the attached effect.",
            "func": "()",
            "return": "bool",
            "name": "ShouldUseOverheadOffset"
        },
        {
            "desc": "状态特效的显示优先级(更高的数字在Buff栏中被优先显示)",
            "func": "()",
            "return": "int",
            "name": "StatusEffectPriority"
        },
        {
            "desc": "声明modifier function",
            "func": "()",
            "return": "table",
            "name": "DeclareFunctions"
        },
        {
            "desc": "设置单位状态 {[state] = true}",
            "func": "()",
            "return": "table",
            "name": "CheckState"
        }		
    ],
    "CDOTABaseGameMode": [
        {
            "desc": "( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop.",
            "func": "( pszItemName, pszShopName, pszCategory )",
            "return": "void",
            "name": "AddItemToCustomShop"
        },
        {
            "desc": "Begin tracking a sequence of events using the real time combat analyzer.",
            "func": "( hQueryTable, hPlayer, pszQueryName )",
            "return": "int",
            "name": "AddRealTimeCombatAnalyzerQuery"
        },
        {
            "desc": "Allocates an entity which can be used by custom games to control FoW occlusion volumes",
            "func": "( flMinX, flMinY, flMaxX, flMaxY, flGridSize )",
            "return": "handle",
            "name": "AllocateFowBlockerRegion"
        },
        {
            "desc": "Get if weather effects are disabled on the client.",
            "func": "()",
            "return": "bool",
            "name": "AreWeatherEffectsDisabled"
        },
        {
            "desc": "清除脚本过滤器--控制触发赏金符时的行为的",
            "func": "()",
            "return": "void",
            "name": "ClearBountyRunePickupFilter"
        },
        {
            "desc": "清除脚本过滤器--控制单位造成伤害",
            "func": "()",
            "return": "void",
            "name": "ClearDamageFilter"
        },
        {
            "desc": "清除脚本过滤器--在单位捡起物品时生效的",
            "func": "()",
            "return": "void",
            "name": "ClearExecuteOrderFilter"
        },
        {
            "desc": "Clear the script filter that controls how a unit heals.",
            "func": "()",
            "return": "void",
            "name": "ClearHealingFilter"
        },
        {
            "desc": "清除脚本过滤器--在物品放入物品栏时生效的",
            "func": "()",
            "return": "void",
            "name": "ClearItemAddedToInventoryFilter"
        },
        {
            "desc": "清除脚本过滤器--控制Modifier控制器的",
            "func": "()",
            "return": "void",
            "name": "ClearModifierGainedFilter"
        },
        {
            "desc": "清除脚本过滤器--控制单位的经验机制的",
            "func": "()",
            "return": "void",
            "name": "ClearModifyExperienceFilter"
        },
        {
            "desc": "清除脚本过滤器--控制英雄金钱机制的",
            "func": "()",
            "return": "void",
            "name": "ClearModifyGoldFilter"
        },
        {
            "desc": "清除脚本过滤器--控制神符刷新的",
            "func": "()",
            "return": "void",
            "name": "ClearRuneSpawnFilter"
        },
        {
            "desc": "清除脚本过滤器--控制追踪投射物的",
            "func": "()",
            "return": "void",
            "name": "ClearTrackingProjectileFilter"
        },
        {
            "desc": "Disable npc_dota_creature clumping behavior by default.",
            "func": "( bDisabled )",
            "return": "void",
            "name": "DisableClumpingBehaviorByDefault"
        },
        {
            "desc": "Use to disable hud flip for this mod",
            "func": "( bDisable )",
            "return": "void",
            "name": "DisableHudFlip"
        },
        {
            "desc": "返回是否不论任何单位被选中，始终在HUD上显示英雄的物品库存",
            "func": "()",
            "return": "bool",
            "name": "GetAlwaysShowPlayerInventory"
        },
        {
            "desc": "Get whether player names are always shown, regardless of client setting.",
            "func": "()",
            "return": "bool",
            "name": "GetAlwaysShowPlayerNames"
        },
        {
            "desc": "返回游戏内播音员是否被禁用",
            "func": "()",
            "return": "bool",
            "name": "GetAnnouncerDisabled"
        },
        {
            "desc": "返回是否设置摄像机距离Dota内的默认值为1134",
            "func": "()",
            "return": "float",
            "name": "GetCameraDistanceOverride"
        },
        {
            "desc": "Get current derived stat value constant.",
            "func": "( nDerivedStatType, hHero )",
            "return": "float",
            "name": "GetCustomAttributeDerivedStatValue"
        },
        {
            "desc": "Get the current rate cooldown ticks down for items in the backpack.",
            "func": "()",
            "return": "float",
            "name": "GetCustomBackpackCooldownPercent"
        },
        {
            "desc": "Get the current custom backpack swap cooldown.",
            "func": "()",
            "return": "float",
            "name": "GetCustomBackpackSwapCooldown"
        },
        {
            "desc": "返回是否允许自定义的买活CD",
            "func": "()",
            "return": "bool",
            "name": "GetCustomBuybackCooldownEnabled"
        },
        {
            "desc": "返回是否允许自定义的买活金钱",
            "func": "()",
            "return": "bool",
            "name": "GetCustomBuybackCostEnabled"
        },
        {
            "desc": "Get the current custom glyph cooldown.",
            "func": "()",
            "return": "float",
            "name": "GetCustomGlyphCooldown"
        },
        {
            "desc": "返回是否允许改变英雄的最高等级（默认25）",
            "func": "()",
            "return": "int",
            "name": "GetCustomHeroMaxLevel"
        },
        {
            "desc": "Get the current custom scan cooldown.",
            "func": "()",
            "return": "float",
            "name": "GetCustomScanCooldown"
        },
        {
            "desc": "Get the Game Seed passed from the GC.",
            "func": "()",
            "return": "int",
            "name": "GetEventGameSeed"
        },
        {
            "desc": "Get the Event Window Start Time passed from the GC.",
            "func": "()",
            "return": "unsigned",
            "name": "GetEventWindowStartTime"
        },
        {
            "desc": "返回是否返回固定的复活时间",
            "func": "()",
            "return": "float",
            "name": "GetFixedRespawnTime"
        },
        {
            "desc": "返回是否关闭/开启战争迷雾",
            "func": "()",
            "return": "bool",
            "name": "GetFogOfWarDisabled"
        },
        {
            "desc": "返回是否开启/关闭获得金钱时的音效",
            "func": "()",
            "return": "bool",
            "name": "GetGoldSoundDisabled"
        },
        {
            "desc": "Returns the HUD element visibility.",
            "func": "( iElement )",
            "return": "bool",
            "name": "GetHUDVisible"
        },
        {
            "desc": "获取单位的最大攻击速度",
            "func": "()",
            "return": "int",
            "name": "GetMaximumAttackSpeed"
        },
        {
            "desc": "获取单位的最小攻击速度",
            "func": "()",
            "return": "int",
            "name": "GetMinimumAttackSpeed"
        },
        {
            "desc": "返回是否开启/关闭推荐出装在商店中的显示",
            "func": "()",
            "return": "bool",
            "name": "GetRecommendedItemsDisabled"
        },
        {
            "desc": "Returns the scale applied to non-fixed respawn times.",
            "func": "()",
            "return": "float",
            "name": "GetRespawnTimeScale"
        },
        {
            "desc": "返回是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品",
            "func": "()",
            "return": "bool",
            "name": "GetStashPurchasingDisabled"
        },
        {
            "desc": "返回是否隐藏快速购买处的物品",
            "func": "()",
            "return": "bool",
            "name": "GetStickyItemDisabled"
        },
        {
            "desc": "返回是否覆盖游戏界面顶部的队伍比分",
            "func": "()",
            "return": "bool",
            "name": "GetTopBarTeamValuesOverride"
        },
        {
            "desc": "返回是否关闭/开启游戏界面顶部的队伍比分",
            "func": "()",
            "return": "bool",
            "name": "GetTopBarTeamValuesVisible"
        },
        {
            "desc": "返回是否启用/禁用偷塔保护",
            "func": "()",
            "return": "bool",
            "name": "GetTowerBackdoorProtectionEnabled"
        },
        {
            "desc": "返回自定义经验机制是否被使用",
            "func": "()",
            "return": "bool",
            "name": "GetUseCustomHeroLevels"
        },
        {
            "desc": "返回是否启用/禁用买活",
            "func": "()",
            "return": "bool",
            "name": "IsBuybackEnabled"
        },
        {
            "desc": "Is the day/night cycle disabled?",
            "func": "()",
            "return": "bool",
            "name": "IsDaynightCycleDisabled"
        },
        {
            "desc": "Set function and context for real time combat analyzer query failed.",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "ListenForQueryFailed"
        },
        {
            "desc": "Set function and context for real time combat analyzer query progress changed.",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "ListenForQueryProgressChanged"
        },
        {
            "desc": "Set function and context for real time combat analyzer query succeeded.",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "ListenForQuerySucceeded"
        },
        {
            "desc": "( pszItem, pszShop ) Remove an item to purchase at a custom shop.",
            "func": "( pszItemName, pszShopName )",
            "return": "void",
            "name": "RemoveItemFromCustomShop"
        },
        {
            "desc": "Stop tracking a combat analyzer query.",
            "func": "( nQueryID )",
            "return": "void",
            "name": "RemoveRealTimeCombatAnalyzerQuery"
        },
        {
            "desc": "设置一个过滤器，用来控制技能所用到的调整值(修改数据table并返回True来使用新值，,返回False来使用旧值)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetAbilityTuningValueFilter"
        },
        {
            "desc": "不论任何单位被选中，始终在HUD上显示英雄的物品库存",
            "func": "( bAlwaysShow )",
            "return": "void",
            "name": "SetAlwaysShowPlayerInventory"
        },
        {
            "desc": "Set whether player names are always shown, regardless of client setting.",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetAlwaysShowPlayerNames"
        },
        {
            "desc": "禁用播音员",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetAnnouncerDisabled"
        },
        {
            "desc": "允许/禁止机器人思考，需要与DotaPvP高度相似的三路线地图、商店等",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetBotThinkingEnabled"
        },
        {
            "desc": "设置Bot玩家是否总是跟从人类玩家进行推进",
            "func": "( bAlwaysPush )",
            "return": "void",
            "name": "SetBotsAlwaysPushWithHuman"
        },
        {
            "desc": "Setifbotsshouldenabletheirlategamebehavior.",
            "func": "( bLateGame )",
            "return": "void",
            "name": "SetBotsInLateGame"
        },
        {
            "desc": "设置Bot玩家将推进到哪一级别的防御塔（-1代表不推进）",
            "func": "( nMaxTier )",
            "return": "void",
            "name": "SetBotsMaxPushTier"
        },
        {
            "desc": "设置一个过滤器，用来控制触发赏金符时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetBountyRunePickupFilter"
        },
        {
            "desc": "Set bounty rune spawn rate",
            "func": "( flInterval )",
            "return": "void",
            "name": "SetBountyRuneSpawnInterval"
        },
        {
            "desc": "完全允许/禁止买活",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetBuybackEnabled"
        },
        {
            "desc": "设置默认的镜头距离Dota默认为1134",
            "func": "( flCameraDistanceOverride )",
            "return": "void",
            "name": "SetCameraDistanceOverride"
        },
        {
            "desc": "Set a different camera smooth count; dota default is 8.",
            "func": "( nSmoothCount )",
            "return": "void",
            "name": "SetCameraSmoothCountOverride"
        },
        {
            "desc": "Sets the camera Z range",
            "func": "( flMinZ, flMaxZ )",
            "return": "void",
            "name": "SetCameraZRange"
        },
        {
            "desc": "Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue.",
            "func": "( nStatType, flNewValue )",
            "return": "void",
            "name": "SetCustomAttributeDerivedStatValue"
        },
        {
            "desc": "Set the rate cooldown ticks down for items in the backpack.",
            "func": "( flPercent )",
            "return": "void",
            "name": "SetCustomBackpackCooldownPercent"
        },
        {
            "desc": "Set a custom cooldown for swapping items into the backpack.",
            "func": "( flCooldown )",
            "return": "void",
            "name": "SetCustomBackpackSwapCooldown"
        },
        {
            "desc": "开启该选项来允许自定义买活冷却时间",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetCustomBuybackCooldownEnabled"
        },
        {
            "desc": "开启该选项来允许自定义买活花费",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetCustomBuybackCostEnabled"
        },
        {
            "desc": "强制单人游戏英雄的选择",
            "func": "( pHeroName )",
            "return": "void",
            "name": "SetCustomGameForceHero"
        },
        {
            "desc": "Set a custom cooldown for team Glyph ability.",
            "func": "( flCooldown )",
            "return": "void",
            "name": "SetCustomGlyphCooldown"
        },
        {
            "desc": "定义最大英雄等级（默认为25）",
            "func": "( int_1 )",
            "return": "void",
            "name": "SetCustomHeroMaxLevel"
        },
        {
            "desc": "Set a custom cooldown for team Scan ability.",
            "func": "( flCooldown )",
            "return": "void",
            "name": "SetCustomScanCooldown"
        },
        {
            "desc": "Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode.",
            "func": "( pszEffectName )",
            "return": "void",
            "name": "SetCustomTerrainWeatherEffect"
        },
        {
            "desc": "定义英雄经验值表(table)",
            "func": "( hTable )",
            "return": "void",
            "name": "SetCustomXPRequiredToReachNextLevel"
        },
        {
            "desc": "设置一个过滤器，用来控制单位受到伤害时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetDamageFilter"
        },
        {
            "desc": "Enable or disable the day/night cycle.",
            "func": "( bDisable )",
            "return": "void",
            "name": "SetDaynightCycleDisabled"
        },
        {
            "desc": "Specify whether the full screen death overlay effect plays when the selected hero dies.",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetDeathOverlayDisabled"
        },
        {
            "desc": "Sets the default sticky item in the quickbuy",
            "func": "( pItem )",
            "return": "void",
            "name": "SetDefaultStickyItem"
        },
        {
            "desc": "Set drafting hero banning time",
            "func": "( flValue )",
            "return": "void",
            "name": "SetDraftingBanningTimeOverride"
        },
        {
            "desc": "Set drafting hero pick time",
            "func": "( flValue )",
            "return": "void",
            "name": "SetDraftingHeroPickSelectTimeOverride"
        },
        {
            "desc": "设置一个过滤器，用来控制单位捡起物品时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetExecuteOrderFilter"
        },
        {
            "desc": "Setsthedotarespawntime.-1fordefaultbehavior",
            "func": "( flFixedRespawnTime )",
            "return": "void",
            "name": "SetFixedRespawnTime"
        },
        {
            "desc": "开关战争迷雾",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetFogOfWarDisabled"
        },
        {
            "desc": "Prevent users from using the right click deny setting.",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetForceRightClickAttackDisabled"
        },
        {
            "desc": "设定泉水给予的固定魔法的恢复速率(默认为-1)",
            "func": "( flConstantManaRegen )",
            "return": "void",
            "name": "SetFountainConstantManaRegen"
        },
        {
            "desc": "设定泉水给予的的百分比生命恢复速率(默认为-1)",
            "func": "( flPercentageHealthRegen )",
            "return": "void",
            "name": "SetFountainPercentageHealthRegen"
        },
        {
            "desc": "设定泉水给予的百分比魔法恢复速率(默认为-1)",
            "func": "( flPercentageManaRegen )",
            "return": "void",
            "name": "SetFountainPercentageManaRegen"
        },
        {
            "desc": "If set to true, enable 7.23 free courier mode.",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetFreeCourierModeEnabled"
        },
        {
            "desc": "Allows clicks on friendly buildings to be handled normally.",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetFriendlyBuildingMoveToEnabled"
        },
        {
            "desc": "是否禁止获取金钱时的声音提示",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetGoldSoundDisabled"
        },
        {
            "desc": "设置HUD元素是否可见",
            "func": "( iHUDElement, bVisible )",
            "return": "void",
            "name": "SetHUDVisible"
        },
        {
            "desc": "Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetHealingFilter"
        },
        {
            "desc": "Specify whether the default combat events will show in the HUD.",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetHudCombatEventsDisabled"
        },
        {
            "desc": "设置一个过滤器，用来控制物品被放入物品栏时的行为。",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetItemAddedToInventoryFilter"
        },
        {
            "desc": "Set whether tombstones can be channeled to be removed by enemy heroes.",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetKillableTombstones"
        },
        {
            "desc": "Mutes the in-game killing spree announcer.",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetKillingSpreeAnnouncerDisabled"
        },
        {
            "desc": "设置禁用死亡时损失金钱",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetLoseGoldOnDeath"
        },
        {
            "desc": "设置单位的最大攻击速度",
            "func": "( nMaxSpeed )",
            "return": "void",
            "name": "SetMaximumAttackSpeed"
        },
        {
            "desc": "设置单位的最小攻击速度",
            "func": "( nMinSpeed )",
            "return": "void",
            "name": "SetMinimumAttackSpeed"
        },
        {
            "desc": "设置一个过滤器，用来控制Modifier的获得,返回Flase来删除Modifier",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetModifierGainedFilter"
        },
        {
            "desc": "设置一个过滤器，用来控制英雄经验值被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetModifyExperienceFilter"
        },
        {
            "desc": "设置一个过滤器，用来控制英雄的金钱被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetModifyGoldFilter"
        },
        {
            "desc": "When enabled, undiscovered items in the neutral item stash are hidden.",
            "func": "( bEnable )",
            "return": "void",
            "name": "SetNeutralItemHideUndiscoveredEnabled"
        },
        {
            "desc": "Allow items to be sent to the neutral stash.",
            "func": "( bEnable )",
            "return": "void",
            "name": "SetNeutralStashEnabled"
        },
        {
            "desc": "When enabled, the all neutral items tab cannot be viewed.",
            "func": "( bEnable )",
            "return": "void",
            "name": "SetNeutralStashTeamViewOnlyEnabled"
        },
        {
            "desc": "覆盖默认选择实体，替代所有玩家的英雄",
            "func": "( hOverrideEntity )",
            "return": "void",
            "name": "SetOverrideSelectionEntity"
        },
        {
            "desc": "Set pausing enabled/disabled",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetPauseEnabled"
        },
        {
            "desc": "Set power rune spawn rate",
            "func": "( flInterval )",
            "return": "void",
            "name": "SetPowerRuneSpawnInterval"
        },
        {
            "desc": "Disables bonus items for randoming a hero.",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetRandomHeroBonusItemGrantDisabled"
        },
        {
            "desc": "是否禁止显示商店中的推荐购买物品",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetRecommendedItemsDisabled"
        },
        {
            "desc": "使幻象死亡时立即消失，而不是延迟数秒",
            "func": "( bRemove )",
            "return": "void",
            "name": "SetRemoveIllusionsOnDeath"
        },
        {
            "desc": "Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations.",
            "func": "( flValue )",
            "return": "void",
            "name": "SetRespawnTimeScale"
        },
        {
            "desc": "设定某种神符是否启用",
            "func": "( nRune, bEnabled )",
            "return": "void",
            "name": "SetRuneEnabled"
        },
        {
            "desc": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetRuneSpawnFilter"
        },
        {
            "desc": "Enable/disable gold penalty for late picking.",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetSelectionGoldPenaltyEnabled"
        },
        {
            "desc": "Allow items to be sent to the stash.",
            "func": "( bEnable )",
            "return": "void",
            "name": "SetSendToStashEnabled"
        },
        {
            "desc": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetStashPurchasingDisabled"
        },
        {
            "desc": "隐藏快速购买处的物品",
            "func": "( bDisabled )",
            "return": "void",
            "name": "SetStickyItemDisabled"
        },
        {
            "desc": "Sets the item which goes in the TP scroll slot",
            "func": "( pItemName )",
            "return": "void",
            "name": "SetTPScrollSlotItemOverride"
        },
        {
            "desc": "设置顶端的队伍数值",
            "func": "( iTeam, nValue )",
            "return": "void",
            "name": "SetTopBarTeamValue"
        },
        {
            "desc": "是否覆盖顶端的队伍数值",
            "func": "( bOverride )",
            "return": "void",
            "name": "SetTopBarTeamValuesOverride"
        },
        {
            "desc": "开关顶端的队伍数值",
            "func": "( bVisible )",
            "return": "void",
            "name": "SetTopBarTeamValuesVisible"
        },
        {
            "desc": "开关偷塔保护",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetTowerBackdoorProtectionEnabled"
        },
        {
            "desc": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( hFunction, hContext )",
            "return": "void",
            "name": "SetTrackingProjectileFilter"
        },
        {
            "desc": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetUnseenFogOfWarEnabled"
        },
        {
            "desc": "开关自定义英雄英雄经验表，该表必须提前被定义",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetUseCustomHeroLevels"
        },
        {
            "desc": "If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals.",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetUseDefaultDOTARuneSpawnLogic"
        },
        {
            "desc": "Set if weather effects are disabled.",
            "func": "( bDisable )",
            "return": "void",
            "name": "SetWeatherEffectsDisabled"
        }
    ],
    "CFoWBlockerRegion": [
        {
            "desc": "AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle",
            "func": "( vMins, vMaxs, bClearRegion )",
            "return": "void",
            "name": "AddRectangularBlocker"
        },
        {
            "desc": "AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline",
            "func": "( vMins, vMaxs, bClearRegion )",
            "return": "void",
            "name": "AddRectangularOutlineBlocker"
        }
    ],
    "CDOTAGameManager": [
        {
            "desc": "Get the hero unit ",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetHeroDataByName_Script"
        },
        {
            "desc": "Get the hero ID given the hero name.",
            "func": "( string_1 )",
            "return": "int",
            "name": "GetHeroIDByName"
        },
        {
            "desc": "Get the hero name given a hero ID.",
            "func": "( int_1 )",
            "return": "string",
            "name": "GetHeroNameByID"
        },
        {
            "desc": "Get the hero name given a unit name.",
            "func": "( string_1 )",
            "return": "string",
            "name": "GetHeroNameForUnitName"
        },
        {
            "desc": "Get the hero unit name given the hero ID.",
            "func": "( int_1 )",
            "return": "string",
            "name": "GetHeroUnitNameByID"
        }
    ],
    "CDOTAPlayer": [
        {
            "desc": "Attempt to spawn the appropriate couriers for this mode.",
            "func": "( hHero )",
            "return": "void",
            "name": "CheckForCourierSpawning"
        },
        {
            "desc": "获取该玩家的英雄",
            "func": "()",
            "return": "handle",
            "name": "GetAssignedHero"
        },
        {
            "desc": "获取该玩家的官方玩家ID（PlayerID）玩家不在队伍中时返回-1",
            "func": "()",
            "return": "int",
            "name": "GetPlayerID"
        },
        {
            "desc": "随机该玩家的英雄",
            "func": "()",
            "return": "void",
            "name": "MakeRandomHeroSelection"
        },
        {
            "desc": "Sets this player's hero .",
            "func": "( hHero )",
            "return": "void",
            "name": "SetAssignedHeroEntity"
        },
        {
            "desc": "设置英雄的击杀镜头单位（killcamunit）",
            "func": "( hEntity )",
            "return": "void",
            "name": "SetKillCamUnit"
        },
        {
            "desc": "设置玩家的音乐状态，注意这只有在dota_music_battle_enable为off时才会有效",
            "func": "( nMusicStatus, flIntensity )",
            "return": "void",
            "name": "SetMusicStatus"
        },
        {
            "desc": "Sets this player's hero selection.",
            "func": "( pszHeroName )",
            "return": "void",
            "name": "SetSelectedHero"
        },
        {
            "desc": "Spawn a courier for this player at the given position.",
            "func": "( vLocation )",
            "return": "handle",
            "name": "SpawnCourierAtPosition"
        }
    ],
    "CDOTA_Ability_Animation_Attack": [
        {
            "desc": "重写播放速率",
            "func": "( flRate )",
            "return": "void",
            "name": "SetPlaybackRate"
        }
    ],
    "CDOTA_Ability_Animation_TailSpin": [
        {
            "desc": "Overrideplaybackrate",
            "func": "( flRate )",
            "return": "void",
            "name": "SetPlaybackRate"
        }
    ],
    "CDOTA_Ability_DataDriven": [
        {
            "desc": "获取单位的攻击力。",
            "func": "( hCaster, hTarget, pszModifierName, hModifierTable )",
            "return": "handle",
            "name": "ApplyDataDrivenModifier"
        },
        {
            "desc": "在指定地点应用一个数据驱动thinker。",
            "func": "( hCaster, vLocation, pszModifierName, hModifierTable )",
            "return": "handle",
            "name": "ApplyDataDrivenThinker"
        }
    ],
    "CDOTA_Ability_Lua": [
        {
            "desc": "判断一个无目标的命令是否有效",
            "func": "()",
            "return": "int",
            "name": "CastFilterResult"
        },
        {
            "desc": "(VectorvLocation)判断一个作用于某个地点的命令是否有效",
            "func": "( vLocation )",
            "return": "int",
            "name": "CastFilterResultLocation"
        },
        {
            "desc": "(HSCRIPThTarget)判断一个作用于某个单位的命令是否有效",
            "func": "( hTarget )",
            "return": "int",
            "name": "CastFilterResultTarget"
        },
        {
            "desc": "Controls the size of the AOE casting cursor.",
            "func": "()",
            "return": "float",
            "name": "GetAOERadius"
        },
        {
            "desc": "获取相互关联的技能Returnsabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.",
            "func": "()",
            "return": "string",
            "name": "GetAssociatedPrimaryAbilities"
        },
        {
            "desc": "Returnsotherabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.Generallyhiddenabilities.",
            "func": "()",
            "return": "string",
            "name": "GetAssociatedSecondaryAbilities"
        },
        {
            "desc": "返回技能的施法动作类型",
            "func": "()",
            "return": "int",
            "name": "GetBehavior"
        },
        {
            "desc": "返回技能的施法动画",
            "func": "()",
            "return": "int",
            "name": "GetCastAnimation"
        },
        {
            "desc": "Return cast point of this ability.",
            "func": "()",
            "return": "float",
            "name": "GetCastPoint"
        },
        {
            "desc": "返回技能的施法范围",
            "func": "( vLocation, hTarget )",
            "return": "int",
            "name": "GetCastRange"
        },
        {
            "desc": "返回技能的持续施法动画",
            "func": "()",
            "return": "int",
            "name": "GetChannelAnimation"
        },
        {
            "desc": "返回技能的持续施法时间",
            "func": "()",
            "return": "float",
            "name": "GetChannelTime"
        },
        {
            "desc": "返回当前等级下，技能持续施法时的每秒魔法消耗(当前为-1)",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetChannelledManaCostPerSecond"
        },
        {
            "desc": "返回该技能被释放时将听到语音的单位",
            "func": "()",
            "return": "int",
            "name": "GetConceptRecipientType"
        },
        {
            "desc": "返回技能的CD",
            "func": "( iLevel )",
            "return": "float",
            "name": "GetCooldown"
        },
        {
            "desc": "返回一条失效的无目标命令的错误信息",
            "func": "()",
            "return": "string",
            "name": "GetCustomCastError"
        },
        {
            "desc": "(VectorvLocation)返回一条失效的作用于地点的命令的错误信息",
            "func": "( vLocation )",
            "return": "string",
            "name": "GetCustomCastErrorLocation"
        },
        {
            "desc": "(HSCRIPThTarget)返回一条失效的指向目标的命令的错误信息",
            "func": "( hTarget )",
            "return": "string",
            "name": "GetCustomCastErrorTarget"
        },
        {
            "desc": "返回某等级的金钱花费（当前为-1）",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetGoldCost"
        },
        {
            "desc": "返回被该技能被动施加的Mordifier",
            "func": "()",
            "return": "string",
            "name": "GetIntrinsicModifierName"
        },
        {
            "desc": "返回某等级的魔法消耗（当前为-1）",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetManaCost"
        },
        {
            "desc": "返回施法动画的播放速度",
            "func": "()",
            "return": "float",
            "name": "GetPlaybackRateOverride"
        },
        {
            "desc": "返回当该技能不在动作面板上时是否能使用",
            "func": "()",
            "return": "bool",
            "name": "IsHiddenAbilityCastable"
        },
        {
            "desc": "返回该技能被技能窃取后是否是隐藏的",
            "func": "()",
            "return": "bool",
            "name": "IsHiddenWhenStolen"
        },
        {
            "desc": "返回该技能是否能被刷新球刷新",
            "func": "()",
            "return": "bool",
            "name": "IsRefreshable"
        },
        {
            "desc": "返回该技能是否能被窃取",
            "func": "()",
            "return": "bool",
            "name": "IsStealable"
        },
        {
            "desc": "施法被打断",
            "func": "()",
            "return": "void",
            "name": "OnAbilityPhaseInterrupted"
        },
        {
            "desc": "施法开始（施法成功时返回True）",
            "func": "()",
            "return": "bool",
            "name": "OnAbilityPhaseStart"
        },
        {
            "desc": "The ability was pinged (nPlayerID, bCtrlHeld).",
            "func": "( nPlayerID, bCtrlHeld )",
            "return": "void",
            "name": "OnAbilityPinged"
        },
        {
            "desc": "(boolbInterrupted)持续施法完成",
            "func": "( bInterrupted )",
            "return": "void",
            "name": "OnChannelFinish"
        },
        {
            "desc": "(floatflInterval)持续施法开始",
            "func": "( flInterval )",
            "return": "void",
            "name": "OnChannelThink"
        },
        {
            "desc": "施法者（仅限英雄）升级，得到技能加点,或receivedanewstatbonus.",
            "func": "()",
            "return": "void",
            "name": "OnHeroCalculateStatBonus"
        },
        {
            "desc": "一个英雄在附近死亡(比如说骨灰盒的效果)时,获取参数表",
            "func": "( unit, attacker, table )",
            "return": "void",
            "name": "OnHeroDiedNearby"
        },
        {
            "desc": "施法者升级",
            "func": "()",
            "return": "void",
            "name": "OnHeroLevelUp"
        },
        {
            "desc": "施法者物品库存发生变化",
            "func": "()",
            "return": "void",
            "name": "OnInventoryContentsChanged"
        },
        {
            "desc": "(HSCRIPThItem)施法者装备了物品",
            "func": "( hItem )",
            "return": "void",
            "name": "OnItemEquipped"
        },
        {
            "desc": "施法者死亡",
            "func": "()",
            "return": "void",
            "name": "OnOwnerDied"
        },
        {
            "desc": "施法者第一次出生或重生",
            "func": "()",
            "return": "void",
            "name": "OnOwnerSpawned"
        },
        {
            "desc": "(HSCRIPThTarget,VectorvLocation)投射物撞击到某目标或者到达指定位置(目标不可用)",
            "func": "( hTarget, vLocation )",
            "return": "bool",
            "name": "OnProjectileHit"
        },
        {
            "desc": "(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid).",
            "func": "( hTarget, vLocation, iProjectileHandle )",
            "return": "bool",
            "name": "OnProjectileHitHandle"
        },
        {
            "desc": "(HSCRIPThTarget,VectorvLocation,tablekv)投射物撞击到某目标或者到达指定位置(目标不可用)",
            "func": "( hTarget, vLocation, table )",
            "return": "bool",
            "name": "OnProjectileHit_ExtraData"
        },
        {
            "desc": "(VectorvLocation)投射物正在运动",
            "func": "( vLocation )",
            "return": "void",
            "name": "OnProjectileThink"
        },
        {
            "desc": "(int nProjectileHandle) Projectile is actively moving.",
            "func": "( iProjectileHandle )",
            "return": "void",
            "name": "OnProjectileThinkHandle"
        },
        {
            "desc": "(VectorvLocation,tablekv)投射物正在运动",
            "func": "( vLocation, table )",
            "return": "void",
            "name": "OnProjectileThink_ExtraData"
        },
        {
            "desc": "施法前摇结束，技能效果开始",
            "func": "()",
            "return": "void",
            "name": "OnSpellStart"
        },
        {
            "desc": "(HSCRIPThAbility)当技能被窃取时，进行的某特殊行为",
            "func": "( hSourceAbility )",
            "return": "void",
            "name": "OnStolen"
        },
        {
            "desc": "Abilityistoggledon/off.技能被开启/关闭",
            "func": "()",
            "return": "void",
            "name": "OnToggle"
        },
        {
            "desc": "当技能未被（成功）窃取时，进行的某特殊行为",
            "func": "()",
            "return": "void",
            "name": "OnUnStolen"
        },
        {
            "desc": "技能升级",
            "func": "()",
            "return": "void",
            "name": "OnUpgrade"
        },
        {
            "desc": "返回该技能是否会增加周围单位的魔棒点数",
            "func": "()",
            "return": "bool",
            "name": "ProcsMagicStick"
        },
        {
            "desc": "Returns true if this ability should return to the default toggle state when its parent respawns.",
            "func": "()",
            "return": "bool",
            "name": "ResetToggleOnRespawn"
        },
        {
            "desc": "返回所使用的语音类型",
            "func": "()",
            "return": "int",
            "name": "SpeakTrigger"
        }
    ],
    "CDOTA_Ability_Nian_Dive": [
        {
            "desc": "Overrideplaybackrate",
            "func": "( flRate )",
            "return": "void",
            "name": "SetPlaybackRate"
        }
    ],
    "CScriptHeroList": [
        {
            "desc": "返回当前世界全部英雄",
            "func": "()",
            "return": "table",
            "name": "GetAllHeroes"
        },
        {
            "desc": "获取英雄列表中第N位英雄",
            "func": "( int_1 )",
            "return": "handle",
            "name": "GetHero"
        },
        {
            "desc": "返回当前世界英雄数目",
            "func": "()",
            "return": "int",
            "name": "GetHeroCount"
        }
    ],
    "CDOTA_Ability_Nian_Roar": [
        {
            "desc": "年兽使用了咆哮的次数",
            "func": "()",
            "return": "int",
            "name": "GetCastCount"
        }
    ],
    "CDOTA_MapTree": [
        {
            "desc": "砍掉这棵树",
            "func": "( nTeamNumberKnownTo )",
            "return": "void",
            "name": "CutDown"
        },
        {
            "desc": "砍掉这棵树，一段时间后再生",
            "func": "( flRegrowAfter, nTeamNumberKnownTo )",
            "return": "void",
            "name": "CutDownRegrowAfter"
        },
        {
            "desc": "再生一棵被砍掉的树",
            "func": "()",
            "return": "void",
            "name": "GrowBack"
        },
        {
            "desc": "如果树站立着返回true,如果被砍掉返回false",
            "func": "()",
            "return": "bool",
            "name": "IsStanding"
        }
    ],
    "CDOTA_BaseNPC_Building": [
        {
            "desc": "返回建筑无敌计数",
            "func": "()",
            "return": "int",
            "name": "GetInvulnCount"
        },
        {
            "desc": "设置建筑无敌计数",
            "func": "( nInvulnCount )",
            "return": "void",
            "name": "SetInvulnCount"
        }
    ],
    "CDOTA_BaseNPC_Creature": [
        {
            "desc": "为该生物添加特别的道具掉落",
            "func": "( hDropData )",
            "return": "void",
            "name": "AddItemDrop"
        },
        {
            "desc": "升级目标生物指定级别",
            "func": "( iLevels )",
            "return": "void",
            "name": "CreatureLevelUp"
        },
        {
            "desc": "Set creature's current disable resistance",
            "func": "()",
            "return": "float",
            "name": "GetDisableResistance"
        },
        {
            "desc": "Set creature's current disable resistance from ultimates",
            "func": "()",
            "return": "float",
            "name": "GetUltimateDisableResistance"
        },
        {
            "desc": "是否为冠军生物",
            "func": "()",
            "return": "bool",
            "name": "IsChampion"
        },
        {
            "desc": "是否处于重生中",
            "func": "()",
            "return": "bool",
            "name": "IsReincarnating"
        },
        {
            "desc": "Remove all item drops from this creature.",
            "func": "()",
            "return": "void",
            "name": "RemoveAllItemDrops"
        },
        {
            "desc": "设置该生物每级增加的护甲",
            "func": "( flArmorGain )",
            "return": "void",
            "name": "SetArmorGain"
        },
        {
            "desc": "设置该生物每级增加的攻击速度",
            "func": "( flAttackTimeGain )",
            "return": "void",
            "name": "SetAttackTimeGain"
        },
        {
            "desc": "设置该生物每级增加的奖励金币",
            "func": "( nBountyGain )",
            "return": "void",
            "name": "SetBountyGain"
        },
        {
            "desc": "将该生物标记为冠军生物",
            "func": "( bIsChampion )",
            "return": "void",
            "name": "SetChampion"
        },
        {
            "desc": "设置该生物每级增加的攻击伤害",
            "func": "( nDamageGain )",
            "return": "void",
            "name": "SetDamageGain"
        },
        {
            "desc": "Set creature's current disable resistance",
            "func": "( flDisableResistance )",
            "return": "void",
            "name": "SetDisableResistance"
        },
        {
            "desc": "设置该生物每级增加的控制抗性",
            "func": "( flDisableResistanceGain )",
            "return": "void",
            "name": "SetDisableResistanceGain"
        },
        {
            "desc": "设置该生物每级增加的生命值",
            "func": "( nHPGain )",
            "return": "void",
            "name": "SetHPGain"
        },
        {
            "desc": "设置该生物每级增加的生命回复",
            "func": "( flHPRegenGain )",
            "return": "void",
            "name": "SetHPRegenGain"
        },
        {
            "desc": "设置该生物每级增加的魔法抗性",
            "func": "( flMagicResistanceGain )",
            "return": "void",
            "name": "SetMagicResistanceGain"
        },
        {
            "desc": "设置该生物每级增加的魔法值",
            "func": "( nManaGain )",
            "return": "void",
            "name": "SetManaGain"
        },
        {
            "desc": "设置该生物每级增加的魔法回复",
            "func": "( flManaRegenGain )",
            "return": "void",
            "name": "SetManaRegenGain"
        },
        {
            "desc": "设置该生物每级增加的移动速度",
            "func": "( nMoveSpeedGain )",
            "return": "void",
            "name": "SetMoveSpeedGain"
        },
        {
            "desc": "Set whether creatures require reaching their end path before becoming idle",
            "func": "( bRequiresReachingEndPath )",
            "return": "void",
            "name": "SetRequiresReachingEndPath"
        },
        {
            "desc": "Set creature's current disable resistance from ultimates",
            "func": "( flUltDisableResistance )",
            "return": "void",
            "name": "SetUltimateDisableResistance"
        },
        {
            "desc": "设置该生物每级增加的经验值",
            "func": "( nXPGain )",
            "return": "void",
            "name": "SetXPGain"
        }
    ],
    "CDOTA_BaseNPC_Hero": [
        {
            "desc": "给单位增加经验值",
            "func": "( flXP, nReason, bApplyBotDifficultyScaling, bIncrementTotal )",
            "return": "bool",
            "name": "AddExperience"
        },
        {
            "desc": "花费金钱并买活英雄",
            "func": "()",
            "return": "void",
            "name": "Buyback"
        },
        {
            "desc": "英雄返回属性后，重新计算全部属性",
            "func": "()",
            "return": "void",
            "name": "CalculateStatBonus"
        },
        {
            "desc": "返回布尔值，买活返回金钱限制时间是否少于游戏时间（其实就是是否能够正常返回金钱.....）",
            "func": "()",
            "return": "bool",
            "name": "CanEarnGold"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "ClearLastHitMultikill"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "ClearLastHitStreak"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "ClearStreak"
        },
        {
            "desc": "返回未分配的技能点数",
            "func": "()",
            "return": "int",
            "name": "GetAbilityPoints"
        },
        {
            "desc": "返回玩家拥有的额外单位",
            "func": "()",
            "return": "table",
            "name": "GetAdditionalOwnedUnits"
        },
        {
            "desc": "返回敏捷值",
            "func": "()",
            "return": "float",
            "name": "GetAgility"
        },
        {
            "desc": "返回敏捷成长",
            "func": "()",
            "return": "float",
            "name": "GetAgilityGain"
        },
        {
            "desc": "返回助攻数，数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "int",
            "name": "GetAssists"
        },
        {
            "desc": "",
            "func": "( nIndex )",
            "return": "int",
            "name": "GetAttacker"
        },
        {
            "desc": "返回基础敏捷",
            "func": "()",
            "return": "float",
            "name": "GetBaseAgility"
        },
        {
            "desc": "返回基础攻击伤害最大值，英雄的基础攻击伤害也会受到属性影响",
            "func": "()",
            "return": "int",
            "name": "GetBaseDamageMax"
        },
        {
            "desc": "返回基础攻击伤害最小值，英雄的基础攻击伤害也会受到属性影响",
            "func": "()",
            "return": "int",
            "name": "GetBaseDamageMin"
        },
        {
            "desc": "返回基础智力",
            "func": "()",
            "return": "float",
            "name": "GetBaseIntellect"
        },
        {
            "desc": "Returns the base mana regen.",
            "func": "()",
            "return": "float",
            "name": "GetBaseManaRegen"
        },
        {
            "desc": "返回基础力量",
            "func": "()",
            "return": "float",
            "name": "GetBaseStrength"
        },
        {
            "desc": "返回来自主属性奖励的攻击伤害值",
            "func": "()",
            "return": "int",
            "name": "GetBonusDamageFromPrimaryStat"
        },
        {
            "desc": "返回该英雄买活CD的剩余时间",
            "func": "()",
            "return": "float",
            "name": "GetBuybackCooldownTime"
        },
        {
            "desc": "返回买活所需金钱",
            "func": "( bReturnOldValues )",
            "return": "int",
            "name": "GetBuybackCost"
        },
        {
            "desc": "返回买活所带来的金钱惩罚剩余时间",
            "func": "()",
            "return": "float",
            "name": "GetBuybackGoldLimitTime"
        },
        {
            "desc": "返回当前经验值",
            "func": "()",
            "return": "int",
            "name": "GetCurrentXP"
        },
        {
            "desc": "返回死亡损失金钱",
            "func": "()",
            "return": "int",
            "name": "GetDeathGoldCost"
        },
        {
            "desc": "返回死亡次数",
            "func": "()",
            "return": "int",
            "name": "GetDeaths"
        },
        {
            "desc": "返回反补次数",
            "func": "()",
            "return": "int",
            "name": "GetDenies"
        },
        {
            "desc": "返回该英雄拥有者所有的金钱数量",
            "func": "()",
            "return": "int",
            "name": "GetGold"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetGoldBounty"
        },
        {
            "desc": "返回攻击速度增加值（IAS），英雄攻击速度受到敏捷影响",
            "func": "()",
            "return": "float",
            "name": "GetIncreasedAttackSpeed"
        },
        {
            "desc": "返回智力值",
            "func": "()",
            "return": "float",
            "name": "GetIntellect"
        },
        {
            "desc": "返回智力成长",
            "func": "()",
            "return": "float",
            "name": "GetIntellectGain"
        },
        {
            "desc": "返回击杀数，数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "int",
            "name": "GetKills"
        },
        {
            "desc": "返回正补数，数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "int",
            "name": "GetLastHits"
        },
        {
            "desc": "返回最近一次伤害时间",
            "func": "()",
            "return": "float",
            "name": "GetMostRecentDamageTime"
        },
        {
            "desc": "返回多杀计数",
            "func": "()",
            "return": "int",
            "name": "GetMultipleKillCount"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetNumAttackers"
        },
        {
            "desc": "返回玩家拥有的物品数量。",
            "func": "()",
            "return": "int",
            "name": "GetNumItemsInInventory"
        },
        {
            "desc": "返回玩家储藏处内",
            "func": "()",
            "return": "int",
            "name": "GetNumItemsInStash"
        },
        {
            "desc": "返回基础护甲值。",
            "func": "()",
            "return": "float",
            "name": "GetPhysicalArmorBaseValue"
        },
        {
            "desc": "返回英雄拥有者的ID",
            "func": "()",
            "return": "int",
            "name": "GetPlayerID"
        },
        {
            "desc": "返回英雄主要属性，0=力量,1=敏捷,2=智力.",
            "func": "()",
            "return": "int",
            "name": "GetPrimaryAttribute"
        },
        {
            "desc": "返回主属性值",
            "func": "()",
            "return": "float",
            "name": "GetPrimaryStatValue"
        },
        {
            "desc": "返回复活时间",
            "func": "()",
            "return": "float",
            "name": "GetRespawnTime"
        },
        {
            "desc": "返回该英雄是否被禁止复活。",
            "func": "()",
            "return": "bool",
            "name": "GetRespawnsDisabled"
        },
        {
            "desc": "返回连杀数",
            "func": "()",
            "return": "int",
            "name": "GetStreak"
        },
        {
            "desc": "返回力量值",
            "func": "()",
            "return": "float",
            "name": "GetStrength"
        },
        {
            "desc": "返回力量成长",
            "func": "()",
            "return": "float",
            "name": "GetStrengthGain"
        },
        {
            "desc": "返回复活所需的时间",
            "func": "()",
            "return": "float",
            "name": "GetTimeUntilRespawn"
        },
        {
            "desc": "返回物品栏中可佩带（可切换）的物品。",
            "func": "( nSlotType )",
            "return": "handle",
            "name": "GetTogglableWearable"
        },
        {
            "desc": "返回是否有可用物品栏空间",
            "func": "()",
            "return": "bool",
            "name": "HasAnyAvailableInventorySpace"
        },
        {
            "desc": "返回是否拥有空中视野",
            "func": "()",
            "return": "bool",
            "name": "HasFlyingVision"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasOwnerAbandoned"
        },
        {
            "desc": "参数:constcharpItemName,boolbIncludeStashCombines,boolbAllowSelling",
            "func": "( pItemName, bIncludeStashCombines, bAllowSelling )",
            "return": "int",
            "name": "HasRoomForItem"
        },
        {
            "desc": "升级英雄,参数决定是否播放升级效果.",
            "func": "( bPlayEffects )",
            "return": "void",
            "name": "HeroLevelUp"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "( iKillerID )",
            "return": "void",
            "name": "IncrementAssists"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "( iKillerID )",
            "return": "void",
            "name": "IncrementDeaths"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "IncrementDenies"
        },
        {
            "desc": "增加击杀数，击杀者为当前英雄，传入ID为受害者ID。数值存储在玩家资源(PlayerResource)中",
            "func": "( iVictimID )",
            "return": "void",
            "name": "IncrementKills"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "IncrementLastHitMultikill"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "IncrementLastHitStreak"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "IncrementLastHits"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "IncrementNearbyCreepDeaths"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "return": "void",
            "name": "IncrementStreak"
        },
        {
            "desc": "是否被死神镰刀禁止买活",
            "func": "()",
            "return": "bool",
            "name": "IsBuybackDisabledByReapersScythe"
        },
        {
            "desc": "是否处于重生中",
            "func": "()",
            "return": "bool",
            "name": "IsReincarnating"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsStashEnabled"
        },
        {
            "desc": "参数:英雄,加害者",
            "func": "( hHero, hInflictor )",
            "return": "void",
            "name": "KilledHero"
        },
        {
            "desc": "增加指定值到英雄基础敏捷，随后调用CalculateStatBonus",
            "func": "( flNewAgility )",
            "return": "void",
            "name": "ModifyAgility"
        },
        {
            "desc": "给予英雄金钱。参数:int金钱数,bool是否为可靠金钱,int原因",
            "func": "( iGoldChange, bReliable, iReason )",
            "return": "int",
            "name": "ModifyGold"
        },
        {
            "desc": "增加指定值到英雄基础智力，随后调用CalculateStatBonus",
            "func": "( flNewIntellect )",
            "return": "void",
            "name": "ModifyIntellect"
        },
        {
            "desc": "增加指定值到英雄基础力量，随后调用CalculateStatBonus",
            "func": "( flNewStrength )",
            "return": "void",
            "name": "ModifyStrength"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "PerformTaunt"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "RecordLastHit"
        },
        {
            "desc": "Respawn this hero.",
            "func": "( bBuyBack, bRespawnPenalty )",
            "return": "void",
            "name": "RespawnHero"
        },
        {
            "desc": "设置当前可用技能点",
            "func": "( iPoints )",
            "return": "void",
            "name": "SetAbilityPoints"
        },
        {
            "desc": "设置基础敏捷",
            "func": "( flAgility )",
            "return": "void",
            "name": "SetBaseAgility"
        },
        {
            "desc": "设置基础智力",
            "func": "( flIntellect )",
            "return": "void",
            "name": "SetBaseIntellect"
        },
        {
            "desc": "设置基础力量",
            "func": "( flStrength )",
            "return": "void",
            "name": "SetBaseStrength"
        },
        {
            "desc": "设置人机对战的难度。",
            "func": "( nDifficulty )",
            "return": "void",
            "name": "SetBotDifficulty"
        },
        {
            "desc": "设置是否被死神镰刀禁止买活",
            "func": "( bBuybackDisabled )",
            "return": "void",
            "name": "SetBuyBackDisabledByReapersScythe"
        },
        {
            "desc": "设置买活冷却时间",
            "func": "( flTime )",
            "return": "void",
            "name": "SetBuybackCooldownTime"
        },
        {
            "desc": "设置买活后金钱惩罚时间",
            "func": "( flTime )",
            "return": "void",
            "name": "SetBuybackGoldLimitTime"
        },
        {
            "desc": "GameRulesbooleanmustbesetforthistowork!}}",
            "func": "( iValue )",
            "return": "void",
            "name": "SetCustomDeathXP"
        },
        {
            "desc": "设置英雄拥有者的金钱",
            "func": "( iGold, bReliable )",
            "return": "void",
            "name": "SetGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "SetPlayerID"
        },
        {
            "desc": "设置英雄的主属性值。",
            "func": "( nPrimaryAttribute )",
            "return": "void",
            "name": "SetPrimaryAttribute"
        },
        {
            "desc": "",
            "func": "( vOrigin )",
            "return": "void",
            "name": "SetRespawnPosition"
        },
        {
            "desc": "禁止英雄复活。",
            "func": "( bDisableRespawns )",
            "return": "void",
            "name": "SetRespawnsDisabled"
        },
        {
            "desc": "",
            "func": "( bEnabled )",
            "return": "void",
            "name": "SetStashEnabled"
        },
        {
            "desc": "",
            "func": "( time )",
            "return": "void",
            "name": "SetTimeUntilRespawn"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "ShouldDoFlyHeightVisual"
        },
        {
            "desc": "参数:int金钱,int原因",
            "func": "( iCost, iReason )",
            "return": "void",
            "name": "SpendGold"
        },
        {
            "desc": "升级指定技能，需要英雄拥有该技能和技能点",
            "func": "( hAbility )",
            "return": "void",
            "name": "UpgradeAbility"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "WillReincarnate"
        }
    ],
    "CDOTA_BaseNPC_Shop": [
        {
            "desc": "Get the DOTA_SHOP_TYPE",
            "func": "()",
            "return": "int",
            "name": "GetShopType"
        },
        {
            "desc": "Set the DOTA_SHOP_TYPE.",
            "func": "( eShopType )",
            "return": "void",
            "name": "SetShopType"
        }
    ],
    "CDOTA_Item_BagOfGold": [
        {
            "desc": "Set the life time of this item",
            "func": "( flTime )",
            "return": "void",
            "name": "SetLifeTime"
        }
    ],
    "CMarkupVolumeTagged": [
        {
            "desc": "查询该卷是否带有指定标签",
            "func": "( pszTagName )",
            "return": "bool",
            "name": "HasTag"
        }
    ],
    "CDOTA_BaseNPC_Trap_Ward": [
        {
            "desc": "Get the trap target for this entity.",
            "func": "()",
            "return": "Vector",
            "name": "GetTrapTarget"
        },
        {
            "desc": "Set the animation sequence for this entity.",
            "func": "( pAnimation )",
            "return": "void",
            "name": "SetAnimation"
        }
    ],
    "CDOTA_Item_Physical": [
        {
            "desc": "返回禁用的物品?",
            "func": "()",
            "return": "handle",
            "name": "GetContainedItem"
        },
        {
            "desc": "返回物品第一次出现在地图上的时间",
            "func": "()",
            "return": "float",
            "name": "GetCreationTime"
        },
        {
            "desc": "设置禁用的物品?",
            "func": "( hItem )",
            "return": "void",
            "name": "SetContainedItem"
        }
    ],
    "CEntityInstance": [
        {
            "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "ConnectOutput"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "Destroy"
        },
        {
            "desc": "从这个实体的I/O事件移除已连接的脚本方法",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "DisconnectOutput"
        },
        {
            "desc": "从传入实体的I/O事件移除已连接的脚本方法",
            "func": "( string_1, string_2, handle_3 )",
            "return": "void",
            "name": "DisconnectRedirectedOutput"
        },
        {
            "desc": "触发实体的输出",
            "func": "( string_1, handle_2, handle_3, table_4, float_5 )",
            "return": "void",
            "name": "FireOutput"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetClassname"
        },
        {
            "desc": "如果没有定义的话获得实体名字的帮助",
            "func": "()",
            "return": "string",
            "name": "GetDebugName"
        },
        {
            "desc": "获得这个实体的EHANDLE",
            "func": "()",
            "return": "ehandle",
            "name": "GetEntityHandle"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetEntityIndex"
        },
        {
            "desc": "获得整型属性",
            "func": "( string_1 )",
            "return": "int",
            "name": "GetIntAttr"
        },
        {
            "desc": "",
            "func": "()",
            "return": "string",
            "name": "GetName"
        },
        {
            "desc": "恢复实体相关的每个实例私有的脚本数据,必要时会创建",
            "func": "()",
            "return": "handle",
            "name": "GetOrCreatePrivateScriptScope"
        },
        {
            "desc": "恢复实体相关的公用脚本数据,必要时会创建",
            "func": "()",
            "return": "handle",
            "name": "GetOrCreatePublicScriptScope"
        },
        {
            "desc": "恢复实体相关的每个实例私有的脚本数据",
            "func": "()",
            "return": "handle",
            "name": "GetPrivateScriptScope"
        },
        {
            "desc": "恢复实体相关的公用脚本数据",
            "func": "()",
            "return": "handle",
            "name": "GetPublicScriptScope"
        },
        {
            "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
            "func": "( string_1, string_2, handle_3 )",
            "return": "void",
            "name": "RedirectOutput"
        },
        {
            "desc": "删除这个实体",
            "func": "()",
            "return": "void",
            "name": "RemoveSelf"
        },
        {
            "desc": "设置整型属性",
            "func": "( string_1, int_2 )",
            "return": "void",
            "name": "SetIntAttr"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "entindex"
        }
    ],
    "CEnvProjectedTexture": [
        {
            "desc": "设置光照最大距离",
            "func": "( flRange )",
            "return": "void",
            "name": "SetFarRange"
        },
        {
            "desc": "设置光照线性淡化值",
            "func": "( flAtten )",
            "return": "void",
            "name": "SetLinearAttenuation"
        },
        {
            "desc": "设置光照最小距离",
            "func": "( flRange )",
            "return": "void",
            "name": "SetNearRange"
        },
        {
            "desc": "设置光照二次项淡化值",
            "func": "( flAtten )",
            "return": "void",
            "name": "SetQuadraticAttenuation"
        },
        {
            "desc": "开关体积光参数:boolbOn,floatflIntensity,floatflNoise,intnPlanes,floatflPlaneOffset",
            "func": "( bOn, flIntensity, flNoise, nPlanes, flPlaneOffset )",
            "return": "void",
            "name": "SetVolumetrics"
        }
    ],
    "CDOTA_Buff": [
        {
            "desc": "增加粒子。",
            "func": "( i, bDestroyImmediately, bStatusEffect, iPriority, bHeroEffect, bOverheadEffect )",
            "return": "void",
            "name": "AddParticle"
        },
        {
            "desc": "将Mordifier的叠加层数-1",
            "func": "()",
            "return": "void",
            "name": "DecrementStackCount"
        },
        {
            "desc": "运行所有相关的移除函数来移除这个Mordifier。",
            "func": "()",
            "return": "void",
            "name": "Destroy"
        },
        {
            "desc": "运行所有相关的刷新函数，使Mordifier恢复到初始",
            "func": "()",
            "return": "void",
            "name": "ForceRefresh"
        },
        {
            "desc": "获取产生这个Mordifier的技能。",
            "func": "()",
            "return": "handle",
            "name": "GetAbility"
        },
        {
            "desc": "Returns aura stickiness (default 0.5)",
            "func": "()",
            "return": "float",
            "name": "GetAuraDuration"
        },
        {
            "desc": "",
            "func": "()",
            "return": "handle",
            "name": "GetAuraOwner"
        },
        {
            "desc": "获取产生这个Mordifier的单位。",
            "func": "()",
            "return": "handle",
            "name": "GetCaster"
        },
        {
            "desc": "获取这个Mordifier所属的类。",
            "func": "()",
            "return": "string",
            "name": "GetClass"
        },
        {
            "desc": "获取这个Mordifier的创建时间。",
            "func": "()",
            "return": "float",
            "name": "GetCreationTime"
        },
        {
            "desc": "获取这个Mordifier的终止时间。",
            "func": "()",
            "return": "float",
            "name": "GetDieTime"
        },
        {
            "desc": "获取这个Mordifier的持续时间。",
            "func": "()",
            "return": "float",
            "name": "GetDuration"
        },
        {
            "desc": "获取这个Mordifier的消失时间。",
            "func": "()",
            "return": "float",
            "name": "GetElapsedTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "float",
            "name": "GetLastAppliedTime"
        },
        {
            "desc": "获取这个Mordifier的名称。",
            "func": "()",
            "return": "string",
            "name": "GetName"
        },
        {
            "desc": "获取这个Mordifier所继承的单位。",
            "func": "()",
            "return": "handle",
            "name": "GetParent"
        },
        {
            "desc": "获取这个Mordifier的剩余时间。",
            "func": "()",
            "return": "float",
            "name": "GetRemainingTime"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetSerialNumber"
        },
        {
            "desc": "获取这个Mordifier的叠加层数。",
            "func": "()",
            "return": "int",
            "name": "GetStackCount"
        },
        {
            "desc": "",
            "func": "( iFunction )",
            "return": "bool",
            "name": "HasFunction"
        },
        {
            "desc": "使Mordifier的叠加层数+1。",
            "func": "()",
            "return": "void",
            "name": "IncrementStackCount"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsDebuff"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsHexDebuff"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsStunDebuff"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "SendBuffRefreshToClients"
        },
        {
            "desc": "设置持续时间。",
            "func": "( flDuration, bInformClient )",
            "return": "void",
            "name": "SetDuration"
        },
        {
            "desc": "设置叠加层数。",
            "func": "( iCount )",
            "return": "void",
            "name": "SetStackCount"
        },
        {
            "desc": "开始Mordifier的计时功能(OnIntervalThink)，根据给定的间隔(float)。值-1将会停止这个功能。",
            "func": "( flInterval )",
            "return": "void",
            "name": "StartIntervalThink"
        }
    ],
    "CDOTA_Unit_CustomGameAnnouncer": [
        {
            "desc": "Determines whether response criteria is matched on server or client",
            "func": "( bIsServerAuthoritative )",
            "return": "void",
            "name": "SetServerAuthoritative"
        }
    ],
    "CPointWorldText": [
        {
            "desc": "Set the message on this entity.",
            "func": "( pMessage )",
            "return": "void",
            "name": "SetMessage"
        }
    ],
    "CDOTA_CustomUIManager": [
        {
            "desc": "为某玩家建立一个新的自定义用户界面元素。(intPlayerID/*-1meanseveryone*/,stringElementID/*shouldbeunique*/,stringLayoutFileName,tableDialogVariables/*canbenil*/)",
            "func": "( int_1, string_2, string_3, handle_4 )",
            "return": "void",
            "name": "DynamicHud_Create"
        },
        {
            "desc": "删除一个自定义用户界面元素。(intPlayerID/*-1meanseveryone*/,stringElementID)",
            "func": "( int_1, string_2 )",
            "return": "void",
            "name": "DynamicHud_Destroy"
        },
        {
            "desc": "为已有的用户界面元素添加/修改一个会话变量。(intPlayerID/*-1meanseveryone*/,stringElementID,tableDialogVariables)",
            "func": "( int_1, string_2, handle_3 )",
            "return": "void",
            "name": "DynamicHud_SetDialogVariables"
        },
        {
            "desc": "切换已有的用户见面元素的可见性。(intPlayerID/*-1meanseveryone*/,stringElementID,boolVisible)",
            "func": "( int_1, string_2, bool_3 )",
            "return": "void",
            "name": "DynamicHud_SetVisible"
        }
    ],
    "CDOTA_Modifier_Lua_Vertical_Motion": [
        {
            "desc": "启动垂直运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "return": "bool",
            "name": "ApplyVerticalMotionController"
        },
        {
            "desc": "获取优先级。",
            "func": "()",
            "return": "int",
            "name": "GetMotionPriority"
        },
        {
            "desc": "当竖直运动被打断时进行回调",
            "func": "()",
            "return": "void",
            "name": "OnVerticalMotionInterrupted"
        },
        {
            "desc": "设置优先级。",
            "func": "( nMotionPriority )",
            "return": "void",
            "name": "SetMotionPriority"
        },
        {
            "desc": "根据给定的间隔对NPC施加竖直运动。",
            "func": "( me, dt )",
            "return": "void",
            "name": "UpdateVerticalMotion"
        }
    ],
    "CDOTA_Item": [
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "CanBeUsedOutOfInventory"
        },
        {
            "desc": "获得物品所有者",
            "func": "()",
            "return": "handle",
            "name": "GetContainer"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetCost"
        },
        {
            "desc": "获得物品的目前充能",
            "func": "()",
            "return": "int",
            "name": "GetCurrentCharges"
        },
        {
            "desc": "获得物品的初始充能",
            "func": "()",
            "return": "int",
            "name": "GetInitialCharges"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetItemSlot"
        },
        {
            "desc": "Gets whether item is unequipped or ready.",
            "func": "()",
            "return": "int",
            "name": "GetItemState"
        },
        {
            "desc": "Get the parent for this item.",
            "func": "()",
            "return": "handle",
            "name": "GetParent"
        },
        {
            "desc": "获得物品的购买时间",
            "func": "()",
            "return": "float",
            "name": "GetPurchaseTime"
        },
        {
            "desc": "获得物品的购买者",
            "func": "()",
            "return": "handle",
            "name": "GetPurchaser"
        },
        {
            "desc": "Get the number of secondary charges this item currently has.",
            "func": "()",
            "return": "int",
            "name": "GetSecondaryCharges"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "GetShareability"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsAlertableItem"
        },
        {
            "desc": "判断物品是否可以被捡起。",
            "func": "()",
            "return": "bool",
            "name": "IsCastOnPickup"
        },
        {
            "desc": "判断物品是否可以合成。",
            "func": "()",
            "return": "bool",
            "name": "IsCombinable"
        },
        {
            "desc": "判断物品是否可以被拆分。",
            "func": "()",
            "return": "bool",
            "name": "IsDisassemblable"
        },
        {
            "desc": "判断物品是否可以被丢弃。",
            "func": "()",
            "return": "bool",
            "name": "IsDroppable"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsInBackpack"
        },
        {
            "desc": "Returnswhetherthisisanabilityattachedtoanitem.",
            "func": "()",
            "return": "bool",
            "name": "IsItem"
        },
        {
            "desc": "判断是否可以被击杀。",
            "func": "()",
            "return": "bool",
            "name": "IsKillable"
        },
        {
            "desc": "判断是否可以被禁用（？）",
            "func": "()",
            "return": "bool",
            "name": "IsMuted"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "IsNeutralDrop"
        },
        {
            "desc": "判断物品是否是永久性的",
            "func": "()",
            "return": "bool",
            "name": "IsPermanent"
        },
        {
            "desc": "判断物品是否可以被购买。",
            "func": "()",
            "return": "bool",
            "name": "IsPurchasable"
        },
        {
            "desc": "判断物品是否是卷轴。",
            "func": "()",
            "return": "bool",
            "name": "IsRecipe"
        },
        {
            "desc": "判断物品是否是由卷轴合成的。",
            "func": "()",
            "return": "bool",
            "name": "IsRecipeGenerated"
        },
        {
            "desc": "判断物品是否可以被出售。",
            "func": "()",
            "return": "bool",
            "name": "IsSellable"
        },
        {
            "desc": "判断物品是否可以叠加。",
            "func": "()",
            "return": "bool",
            "name": "IsStackable"
        },
        {
            "desc": "当物品掉落在地面时，将物品发射出去，使其落在某个地点。",
            "func": "( bAutoUse, flHeight, flDuration, vEndPoint )",
            "return": "void",
            "name": "LaunchLoot"
        },
        {
            "desc": "设置发射物品时的初始高度。",
            "func": "( bAutoUse, flInitialHeight, flLaunchHeight, flDuration, vEndPoint )",
            "return": "void",
            "name": "LaunchLootInitialHeight"
        },
        {
            "desc": "",
            "func": "( bAutoUse, flRequiredHeight, flHeight, flDuration, vEndPoint )",
            "return": "void",
            "name": "LaunchLootRequiredHeight"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnEquip"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "OnUnequip"
        },
        {
            "desc": "判断物品是否需要充能。",
            "func": "()",
            "return": "bool",
            "name": "RequiresCharges"
        },
        {
            "desc": "",
            "func": "( bValue )",
            "return": "void",
            "name": "SetCanBeUsedOutOfInventory"
        },
        {
            "desc": "",
            "func": "( bCastOnPickUp )",
            "return": "void",
            "name": "SetCastOnPickup"
        },
        {
            "desc": "设置物品的充能数",
            "func": "( iCharges )",
            "return": "void",
            "name": "SetCurrentCharges"
        },
        {
            "desc": "",
            "func": "( bDroppable )",
            "return": "void",
            "name": "SetDroppable"
        },
        {
            "desc": "Sets whether item is unequipped or ready.",
            "func": "( iState )",
            "return": "void",
            "name": "SetItemState"
        },
        {
            "desc": "设置物品的购买时间",
            "func": "( flTime )",
            "return": "void",
            "name": "SetPurchaseTime"
        },
        {
            "desc": "设置物品的购买者",
            "func": "( hPurchaser )",
            "return": "void",
            "name": "SetPurchaser"
        },
        {
            "desc": "Set the number of secondary charges on this item",
            "func": "( iCharges )",
            "return": "void",
            "name": "SetSecondaryCharges"
        },
        {
            "desc": "",
            "func": "( bSellable )",
            "return": "void",
            "name": "SetSellable"
        },
        {
            "desc": "",
            "func": "( iShareability )",
            "return": "void",
            "name": "SetShareability"
        },
        {
            "desc": "",
            "func": "( bStacksWithOtherOwners )",
            "return": "void",
            "name": "SetStacksWithOtherOwners"
        },
        {
            "desc": "",
            "func": "()",
            "return": "void",
            "name": "SpendCharge"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "StacksWithOtherOwners"
        },
        {
            "desc": "判断此物品",
            "func": "()",
            "return": "void",
            "name": "Think"
        }
    ],
    "CEnvEntityMaker": [
        {
            "desc": "在生成器的位置创建一个实体",
            "func": "()",
            "return": "void",
            "name": "SpawnEntity"
        },
        {
            "desc": "在指定实体的位置立刻创建一个实体",
            "func": "( hEntity )",
            "return": "void",
            "name": "SpawnEntityAtEntityOrigin"
        },
        {
            "desc": "在指定位置和方向创建一个实体，方向是角度制欧拉角(pitch,yaw,roll)",
            "func": "( vecAlternateOrigin, vecAlternateAngles )",
            "return": "void",
            "name": "SpawnEntityAtLocation"
        },
        {
            "desc": "在指定名字实体的位置创建一个实体",
            "func": "( pszName )",
            "return": "void",
            "name": "SpawnEntityAtNamedEntityOrigin"
        }
    ],
    "CDOTA_ItemSpawner": [
        {
            "desc": "Returns the item name",
            "func": "()",
            "return": "string",
            "name": "GetItemName"
        }
    ],
    "CDOTA_Item_Lua": [
        {
            "desc": "Returns true if this item can be picked up by the target unit.",
            "func": "( hUnit )",
            "return": "bool",
            "name": "CanUnitPickUp"
        },
        {
            "desc": "判断一个无目标的命令是否有效",
            "func": "()",
            "return": "int",
            "name": "CastFilterResult"
        },
        {
            "desc": "(VectorvLocation)判断一个作用于地点的命令是否有效",
            "func": "( vLocation )",
            "return": "int",
            "name": "CastFilterResultLocation"
        },
        {
            "desc": "(HSCRIPThTarget)判断一个作用于目标的命令是否有效",
            "func": "( hTarget )",
            "return": "int",
            "name": "CastFilterResultTarget"
        },
        {
            "desc": "Returnsabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.",
            "func": "()",
            "return": "string",
            "name": "GetAssociatedPrimaryAbilities"
        },
        {
            "desc": "Returnsotherabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.Generallyhiddenabilities.",
            "func": "()",
            "return": "string",
            "name": "GetAssociatedSecondaryAbilities"
        },
        {
            "desc": "返回技能的施法动作类型",
            "func": "()",
            "return": "int",
            "name": "GetBehavior"
        },
        {
            "desc": "返回技能的施法范围",
            "func": "( vLocation, hTarget )",
            "return": "int",
            "name": "GetCastRange"
        },
        {
            "desc": "返回技能的持续施法时间",
            "func": "()",
            "return": "float",
            "name": "GetChannelTime"
        },
        {
            "desc": "返回当前等级下，技能持续施法时的每秒魔法消耗(当前为-1)",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetChannelledManaCostPerSecond"
        },
        {
            "desc": "返回该技能被释放时将听到语音的单位",
            "func": "()",
            "return": "int",
            "name": "GetConceptRecipientType"
        },
        {
            "desc": "返回技能的CD",
            "func": "( iLevel )",
            "return": "float",
            "name": "GetCooldown"
        },
        {
            "desc": "返回一条失效的无目标命令的错误信息",
            "func": "()",
            "return": "string",
            "name": "GetCustomCastError"
        },
        {
            "desc": "(VectorvLocation)返回一条失效的作用与地点的命令的错误信息",
            "func": "( vLocation )",
            "return": "string",
            "name": "GetCustomCastErrorLocation"
        },
        {
            "desc": "(HSCRIPThTarget)返回一条失效的指向目标的命令的错误信息",
            "func": "( hTarget )",
            "return": "string",
            "name": "GetCustomCastErrorTarget"
        },
        {
            "desc": "返回某等级的金钱花费（当前为-1）",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetGoldCost"
        },
        {
            "desc": "返回被该技能被动地施加的Mordifier",
            "func": "()",
            "return": "string",
            "name": "GetIntrinsicModifierName"
        },
        {
            "desc": "返回某等级的魔法消耗（当前为-1）",
            "func": "( iLevel )",
            "return": "int",
            "name": "GetManaCost"
        },
        {
            "desc": "返回施法动画的播放速度",
            "func": "()",
            "return": "float",
            "name": "GetPlaybackRateOverride"
        },
        {
            "desc": "返回当该技能不在动作面板上时是否能使用",
            "func": "()",
            "return": "bool",
            "name": "IsHiddenAbilityCastable"
        },
        {
            "desc": "返回该技能被技能窃取后是否是隐藏的",
            "func": "()",
            "return": "bool",
            "name": "IsHiddenWhenStolen"
        },
        {
            "desc": "Returns whether this item is muted or not.",
            "func": "()",
            "return": "bool",
            "name": "IsMuted"
        },
        {
            "desc": "返回该技能是否能被刷新球刷新",
            "func": "()",
            "return": "bool",
            "name": "IsRefreshable"
        },
        {
            "desc": "返回该技能是否能被窃取",
            "func": "()",
            "return": "bool",
            "name": "IsStealable"
        },
        {
            "desc": "施法被打断",
            "func": "()",
            "return": "void",
            "name": "OnAbilityPhaseInterrupted"
        },
        {
            "desc": "施法开始（施法成功时返回True）",
            "func": "()",
            "return": "bool",
            "name": "OnAbilityPhaseStart"
        },
        {
            "desc": "(boolbInterrupted)持续施法完成",
            "func": "( bInterrupted )",
            "return": "void",
            "name": "OnChannelFinish"
        },
        {
            "desc": "(floatflInterval)持续施法开始",
            "func": "( flInterval )",
            "return": "void",
            "name": "OnChannelThink"
        },
        {
            "desc": "Caster(heroonly)gainedalevel,skilledanability,orreceivedanewstatbonus.",
            "func": "()",
            "return": "void",
            "name": "OnHeroCalculateStatBonus"
        },
        {
            "desc": "一个英雄在附近死亡(比如说骨灰盒的效果)时,获取参数表",
            "func": "( unit, attacker, table )",
            "return": "void",
            "name": "OnHeroDiedNearby"
        },
        {
            "desc": "施法者升级",
            "func": "()",
            "return": "void",
            "name": "OnHeroLevelUp"
        },
        {
            "desc": "施法者物品库存发生变化",
            "func": "()",
            "return": "void",
            "name": "OnInventoryContentsChanged"
        },
        {
            "desc": "(HSCRIPThItem)施法者装备了物品",
            "func": "( hItem )",
            "return": "void",
            "name": "OnItemEquipped"
        },
        {
            "desc": "施法者死亡",
            "func": "()",
            "return": "void",
            "name": "OnOwnerDied"
        },
        {
            "desc": "施法者第一次出生或重生",
            "func": "()",
            "return": "void",
            "name": "OnOwnerSpawned"
        },
        {
            "desc": "(HSCRIPThTarget,VectorvLocation)投射物撞击到某目标或者到达指定位置(目标不可用)",
            "func": "( hTarget, vLocation )",
            "return": "bool",
            "name": "OnProjectileHit"
        },
        {
            "desc": "(VectorvLocation)投射物正在运动",
            "func": "( vLocation )",
            "return": "void",
            "name": "OnProjectileThink"
        },
        {
            "desc": "施法前摇结束，技能效果开始",
            "func": "()",
            "return": "void",
            "name": "OnSpellStart"
        },
        {
            "desc": "(HSCRIPThAbility)当技能被窃取时，进行的某特殊行为",
            "func": "( hSourceAbility )",
            "return": "void",
            "name": "OnStolen"
        },
        {
            "desc": "技能被开启/关闭",
            "func": "()",
            "return": "void",
            "name": "OnToggle"
        },
        {
            "desc": "当技能未被（成功）窃取时，进行的某特殊行为",
            "func": "()",
            "return": "void",
            "name": "OnUnStolen"
        },
        {
            "desc": "技能升级",
            "func": "()",
            "return": "void",
            "name": "OnUpgrade"
        },
        {
            "desc": "返回该技能是否会增加周围单位的魔棒点数",
            "func": "()",
            "return": "bool",
            "name": "ProcsMagicStick"
        },
        {
            "desc": "返回所使用的语音类型",
            "func": "()",
            "return": "int",
            "name": "SpeakTrigger"
        }
    ],
    "CDOTA_Modifier_Lua_Horizontal_Motion": [
        {
            "desc": "启动水平运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "return": "bool",
            "name": "ApplyHorizontalMotionController"
        },
        {
            "desc": "获取优先级。",
            "func": "()",
            "return": "int",
            "name": "GetPriority"
        },
        {
            "desc": "当运动被打断时进行回调。",
            "func": "()",
            "return": "void",
            "name": "OnHorizontalMotionInterrupted"
        },
        {
            "desc": "设置优先级。",
            "func": "( nMotionPriority )",
            "return": "void",
            "name": "SetPriority"
        },
        {
            "desc": "根据给定的间隔对NPC施加水平运动",
            "func": "( me, dt )",
            "return": "void",
            "name": "UpdateHorizontalMotion"
        }
    ],
    "CDOTA_Modifier_Lua_Motion_Both": [
        {
            "desc": "启动水平运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "return": "bool",
            "name": "ApplyHorizontalMotionController"
        },
        {
            "desc": "启动垂直运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "return": "bool",
            "name": "ApplyVerticalMotionController"
        },
        {
            "desc": "获取优先级。",
            "func": "()",
            "return": "int",
            "name": "GetPriority"
        },
        {
            "desc": "当水平运动被打断时进行回调。",
            "func": "()",
            "return": "void",
            "name": "OnHorizontalMotionInterrupted"
        },
        {
            "desc": "当竖直运动被打断时进行回调。",
            "func": "()",
            "return": "void",
            "name": "OnVerticalMotionInterrupted"
        },
        {
            "desc": "设置优先级。",
            "func": "( nMotionPriority )",
            "return": "void",
            "name": "SetPriority"
        },
        {
            "desc": "根据给定的间隔对NPC施加水平运动。",
            "func": "( me, dt )",
            "return": "void",
            "name": "UpdateHorizontalMotion"
        },
        {
            "desc": "根据给定的间隔对NPC施加竖直运动。",
            "func": "( me, dt )",
            "return": "void",
            "name": "UpdateVerticalMotion"
        }
    ],
    "CDOTA_PlayerResource": [
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "AddAegisPickup"
        },
        {
            "desc": "",
            "func": "( iPlayerID, flFarmValue, bEarnedValue )",
            "return": "void",
            "name": "AddClaimedFarm"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iCost )",
            "return": "void",
            "name": "AddGoldSpentOnSupport"
        },
        {
            "desc": "",
            "func": "( iPlayerID, nTeamNumber, hItem )",
            "return": "void",
            "name": "AddNeutralItemToStash"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "AddRunePickup"
        },
        {
            "desc": "",
            "func": "( nUnitOwnerPlayerID, nOtherPlayerID )",
            "return": "bool",
            "name": "AreUnitsSharedWithPlayerID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "CanRepick"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "ClearKillsMatrix"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "ClearLastHitMultikill"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "ClearLastHitStreak"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "ClearRawPlayerDamageMatrix"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "ClearStreak"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetAegisPickups"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetAssists"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "unsigned",
            "name": "GetBroadcasterChannel"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "unsigned",
            "name": "GetBroadcasterChannelSlot"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetClaimedDenies"
        },
        {
            "desc": "",
            "func": "( iPlayerID, bOnlyEarned )",
            "return": "float",
            "name": "GetClaimedFarm"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetClaimedMisses"
        },
        {
            "desc": "返回一个指示玩家连接状态的数字。0-无连接.1-机器人连入.2-玩家连入.3机器人/玩家断线.",
            "func": "( iPlayerID )",
            "return": "<unknown>",
            "name": "GetConnectionState"
        },
        {
            "desc": "",
            "func": "( iPlayerID, bTotal )",
            "return": "int",
            "name": "GetCreepDamageTaken"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetCustomBuybackCooldown"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetCustomBuybackCost"
        },
        {
            "desc": "返回玩家要加入的队伍编号",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetCustomTeamAssignment"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iVictimID )",
            "return": "int",
            "name": "GetDamageDoneToHero"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetDeaths"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetDenies"
        },
        {
            "desc": "(nPlayerID, nActionID)",
            "func": "( nPlayerID, unActionID )",
            "return": "int",
            "name": "GetEventGameCustomActionClaimCount"
        },
        {
            "desc": "(nPlayerID, pActionName)",
            "func": "( nPlayerID, pActionName )",
            "return": "int",
            "name": "GetEventGameCustomActionClaimCountByName"
        },
        {
            "desc": "",
            "func": "( nPlayerID )",
            "return": "unsigned",
            "name": "GetEventPointsForPlayerID"
        },
        {
            "desc": "",
            "func": "( nPlayerID )",
            "return": "unsigned",
            "name": "GetEventPremiumPoints"
        },
        {
            "desc": "",
            "func": "( nPlayerID )",
            "return": "<unknown>",
            "name": "GetEventRanks"
        },
        {
            "desc": "返回指定玩家现有金钱量",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetGoldLostToDeath"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetGoldPerMin"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetGoldSpentOnBuybacks"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetGoldSpentOnConsumables"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetGoldSpentOnItems"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetGoldSpentOnSupport"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetHealing"
        },
        {
            "desc": "",
            "func": "( iPlayerID, bTotal )",
            "return": "int",
            "name": "GetHeroDamageTaken"
        },
        {
            "desc": "返回指定玩家击杀次数",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetKills"
        },
        {
            "desc": "返回攻击者(第一个参数)杀死指定受害者(第二个参数)的次数",
            "func": "( iPlayerID, iVictimID )",
            "return": "int",
            "name": "GetKillsDoneToHero"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetLastHitMultikill"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetLastHitStreak"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetLastHits"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetLevel"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "<unknown>",
            "name": "GetLiveSpectatorTeam"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetMisses"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetNearbyCreepDeaths"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetNetWorth"
        },
        {
            "desc": "",
            "func": "( nCourierIndex, nTeamNumber )",
            "return": "handle",
            "name": "GetNthCourierForTeam"
        },
        {
            "desc": "",
            "func": "( iTeamNumber, iNthPlayer )",
            "return": "int",
            "name": "GetNthPlayerIDOnTeam"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetNumConsumablesPurchased"
        },
        {
            "desc": "",
            "func": "( nTeamNumber )",
            "return": "int",
            "name": "GetNumCouriersForTeam"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetNumItemsPurchased"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "uint64",
            "name": "GetPartyID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "handle",
            "name": "GetPlayer"
        },
        {
            "desc": "获取未加入队伍的观战者和玩家数量。",
            "func": "()",
            "return": "int",
            "name": "GetPlayerCount"
        },
        {
            "desc": "获取队伍中的玩家数量。",
            "func": "( iTeam )",
            "return": "int",
            "name": "GetPlayerCountForTeam"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "GetPlayerLoadedCompletely"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "string",
            "name": "GetPlayerName"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetRawPlayerDamage"
        },
        {
            "desc": "返回指定玩家现有可靠金钱量",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetReliableGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetRespawnSeconds"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetRoshanKills"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetRunePickups"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "handle",
            "name": "GetSelectedHeroEntity"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetSelectedHeroID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "string",
            "name": "GetSelectedHeroName"
        },
        {
            "desc": "获取32位SteamID",
            "func": "( iPlayerID )",
            "return": "unsigned",
            "name": "GetSteamAccountID"
        },
        {
            "desc": "获取64位SteamID",
            "func": "( iPlayerID )",
            "return": "uint64",
            "name": "GetSteamID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetStreak"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetStuns"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetTeam"
        },
        {
            "desc": "",
            "func": "( iTeam )",
            "return": "int",
            "name": "GetTeamKills"
        },
        {
            "desc": "获取处于有效队伍（天辉，夜魇，或者自定义队伍）的玩家数量。",
            "func": "()",
            "return": "int",
            "name": "GetTeamPlayerCount"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetTimeOfLastConsumablePurchase"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetTimeOfLastDeath"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetTimeOfLastItemPurchase"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetTotalEarnedGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetTotalEarnedXP"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetTotalGoldSpent"
        },
        {
            "desc": "",
            "func": "( iPlayerID, bTotal )",
            "return": "int",
            "name": "GetTowerDamageTaken"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetTowerKills"
        },
        {
            "desc": "",
            "func": "( nPlayerID, nOtherPlayerID )",
            "return": "int",
            "name": "GetUnitShareMaskForPlayer"
        },
        {
            "desc": "返回指定玩家现有不可靠金钱量",
            "func": "( iPlayerID )",
            "return": "int",
            "name": "GetUnreliableGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "float",
            "name": "GetXPPerMin"
        },
        {
            "desc": "当玩家拥有通行证时返回true",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "HasCustomGameTicketForPlayerID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "HasRandomed"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "HasSelectedHero"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HasSetEventGameCustomActionClaimCount"
        },
        {
            "desc": "",
            "func": "()",
            "return": "bool",
            "name": "HaveAllPlayersJoined"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iVictimID )",
            "return": "void",
            "name": "IncrementAssists"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementClaimedDenies"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementClaimedMisses"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iKillerID )",
            "return": "void",
            "name": "IncrementDeaths"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementDenies"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iVictimID )",
            "return": "void",
            "name": "IncrementKills"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementLastHitMultikill"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementLastHitStreak"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementLastHits"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementMisses"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementNearbyCreepDeaths"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "IncrementStreak"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iXP, nReason )",
            "return": "void",
            "name": "IncrementTotalEarnedXP"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "IsBroadcaster"
        },
        {
            "desc": "",
            "func": "( nPlayerID, nOtherPlayerID )",
            "return": "bool",
            "name": "IsDisableHelpSetForPlayerID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "IsFakeClient"
        },
        {
            "desc": "",
            "func": "( pHeroname, bIgnoreUnrevealedPick )",
            "return": "bool",
            "name": "IsHeroSelected"
        },
        {
            "desc": "",
            "func": "( nUnitOwnerPlayerID, nOtherPlayerID )",
            "return": "bool",
            "name": "IsHeroSharedWithPlayerID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "IsValidPlayer"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "IsValidPlayerID"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "IsValidTeamPlayer"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "bool",
            "name": "IsValidTeamPlayerID"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iGoldChange, bReliable, nReason )",
            "return": "int",
            "name": "ModifyGold"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "NumPlayers"
        },
        {
            "desc": "",
            "func": "()",
            "return": "int",
            "name": "NumTeamPlayers"
        },
        {
            "desc": "Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement)",
            "func": "( iPlayerID, item_definition_index, nChargeIncrementOrDecrement )",
            "return": "void",
            "name": "RecordConsumableAbilityChargeChange"
        },
        {
            "desc": "(玩家ID,英雄职业名,金钱,经验值)-将玩家的英雄替换成指定的英雄、金钱和经验值",
            "func": "( iPlayerID, pszHeroClass, nGold, nXP )",
            "return": "handle",
            "name": "ReplaceHeroWith"
        },
        {
            "desc": "",
            "func": "( nPlayerID )",
            "return": "void",
            "name": "ResetBuybackCostTime"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "ResetTotalEarnedGold"
        },
        {
            "desc": "",
            "func": "( nPlayerID, flBuybackCooldown )",
            "return": "void",
            "name": "SetBuybackCooldownTime"
        },
        {
            "desc": "",
            "func": "( nPlayerID, flBuybackCooldown )",
            "return": "void",
            "name": "SetBuybackGoldLimitTime"
        },
        {
            "desc": "(玩家ID,实体)-强制玩家镜头跟随目标实体",
            "func": "( nPlayerID, hTarget )",
            "return": "void",
            "name": "SetCameraTarget"
        },
        {
            "desc": "",
            "func": "( iPlayerID, bCanRepick )",
            "return": "void",
            "name": "SetCanRepick"
        },
        {
            "desc": "设置玩家买活冷却时间",
            "func": "( iPlayerID, flCooldownTime )",
            "return": "void",
            "name": "SetCustomBuybackCooldown"
        },
        {
            "desc": "设置玩家买活花费",
            "func": "( iPlayerID, iGoldCost )",
            "return": "void",
            "name": "SetCustomBuybackCost"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iParam )",
            "return": "void",
            "name": "SetCustomIntParam"
        },
        {
            "desc": "为玩家设定自定义颜色（将显示在小地图，计分板等）。",
            "func": "( iPlayerID, r, g, b )",
            "return": "void",
            "name": "SetCustomPlayerColor"
        },
        {
            "desc": "设置玩家要加入的队伍",
            "func": "( iPlayerID, iTeamAssignment )",
            "return": "void",
            "name": "SetCustomTeamAssignment"
        },
        {
            "desc": "设置玩家的可靠/不可靠金钱数",
            "func": "( iPlayerID, iGold, bReliable )",
            "return": "void",
            "name": "SetGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID )",
            "return": "void",
            "name": "SetHasRandomed"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iLastBuybackTime )",
            "return": "void",
            "name": "SetLastBuybackTime"
        },
        {
            "desc": "强制玩家选择实体。",
            "func": "( nPlayerID, hEntity )",
            "return": "void",
            "name": "SetOverrideSelectionEntity"
        },
        {
            "desc": "",
            "func": "( nPlayerID, nOtherPlayerID, nFlag, bState )",
            "return": "void",
            "name": "SetUnitShareMaskForPlayer"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iCost, iReason )",
            "return": "void",
            "name": "SpendGold"
        },
        {
            "desc": "",
            "func": "( iPlayerID, iTeamNumber, desiredSlot )",
            "return": "void",
            "name": "UpdateTeamSlot"
        },
        {
            "desc": "",
            "func": "( pHeroFilename, bIgnoreUnrevealedPick )",
            "return": "int",
            "name": "WhoSelectedHero"
        }
    ],
    "CDOTA_SimpleObstruction": [
        {
            "desc": "Returnswhethertheobstructioniscurrentlyactive",
            "func": "()",
            "return": "bool",
            "name": "IsEnabled"
        },
        {
            "desc": "Enableordisabletheobstruction",
            "func": "( bEnabled, bForce )",
            "return": "void",
            "name": "SetEnabled"
        }
    ],
    "CDotaQuest": [
        {
            "desc": "为该任务添加子任务",
            "func": "( hSubquest )",
            "return": "void",
            "name": "AddSubquest"
        },
        {
            "desc": "标记该任务完成",
            "func": "()",
            "return": "void",
            "name": "CompleteQuest"
        },
        {
            "desc": "用索引号找到该任务的子任务",
            "func": "( nIndex )",
            "return": "handle",
            "name": "GetSubquest"
        },
        {
            "desc": "用任务名称找到该任务的子任务",
            "func": "( pszName )",
            "return": "handle",
            "name": "GetSubquestByName"
        },
        {
            "desc": "从该任务移除一个子任务",
            "func": "( hSubquest )",
            "return": "void",
            "name": "RemoveSubquest"
        },
        {
            "desc": "设置该任务的文本取代字符串",
            "func": "( pszString )",
            "return": "void",
            "name": "SetTextReplaceString"
        },
        {
            "desc": "设置任务数值",
            "func": "( valueSlot, value )",
            "return": "void",
            "name": "SetTextReplaceValue"
        }
    ],
    "CDOTA_Unit_Nian": [
        {
            "desc": "获取年兽角",
            "func": "()",
            "return": "handle",
            "name": "GetHorn"
        },
        {
            "desc": "获取年兽尾巴",
            "func": "()",
            "return": "handle",
            "name": "GetTail"
        },
        {
            "desc": "年兽的角巴是否损坏?",
            "func": "()",
            "return": "bool",
            "name": "IsHornAlive"
        },
        {
            "desc": "年兽的尾巴是否损坏?",
            "func": "()",
            "return": "bool",
            "name": "IsTailAlive"
        }
    ],
    "CInfoData": [
        {
            "desc": "查询该键值颜色数据",
            "func": "( tok, vDefault )",
            "return": "Vector",
            "name": "QueryColor"
        },
        {
            "desc": "查询该键值浮点（float）数据",
            "func": "( tok, flDefault )",
            "return": "float",
            "name": "QueryFloat"
        },
        {
            "desc": "查询该键值整型（int）数据",
            "func": "( tok, nDefault )",
            "return": "int",
            "name": "QueryInt"
        },
        {
            "desc": "查询该键值数值数据",
            "func": "( tok, flDefault )",
            "return": "float",
            "name": "QueryNumber"
        },
        {
            "desc": "查询该键值字符串（string）数据",
            "func": "( tok, pDefault )",
            "return": "string",
            "name": "QueryString"
        },
        {
            "desc": "查询该键值矢量（vector）数据",
            "func": "( tok, vDefault )",
            "return": "Vector",
            "name": "QueryVector"
        }
    ],
    "CDebugOverlayScriptHelper": [
        {
            "desc": "绘制一个轴线。在世界空间中指定出发点和方向",
            "func": "( Vector_1, Quaternion_2, float_3, bool_4, float_5 )",
            "return": "void",
            "name": "Axis"
        },
        {
            "desc": "绘制一个世界空间轴向盒。在世界空间中指定边界",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "return": "void",
            "name": "Box"
        },
        {
            "desc": "在出发点绘制一个定向盒。在世界空间中指定边界",
            "func": "( Vector_1, Vector_2, Vector_3, Quaternion_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "return": "void",
            "name": "BoxAngles"
        },
        {
            "desc": "绘制一个胶囊体。在世界空间中指定基部",
            "func": "( Vector_1, Quaternion_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "return": "void",
            "name": "Capsule"
        },
        {
            "desc": "绘制一个圆。在世界空间中指定中心",
            "func": "( Vector_1, Quaternion_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "return": "void",
            "name": "Circle"
        },
        {
            "desc": "绘制一个指向屏幕的圆。在世界空间中指定中心",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "return": "void",
            "name": "CircleScreenOriented"
        },
        {
            "desc": "绘制一个线框锥形。在世界空间中指定结束点和方向",
            "func": "( Vector_1, Vector_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "return": "void",
            "name": "Cone"
        },
        {
            "desc": "绘制一个对齐屏幕的十字。在世界空间中指定出发点",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "return": "void",
            "name": "Cross"
        },
        {
            "desc": "绘制一个对齐世界的十字。在世界空间中指定出发点",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "return": "void",
            "name": "Cross3D"
        },
        {
            "desc": "绘制一个指向的十字。在世界空间中指定出发点",
            "func": "( Vector_1, Quaternion_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "return": "void",
            "name": "Cross3DOriented"
        },
        {
            "desc": "绘制一个短划线。在世界空间中指定结束点",
            "func": "( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "return": "void",
            "name": "DrawTickMarkedLine"
        },
        {
            "desc": "绘制实体附件",
            "func": "( ehandle_1, float_2, float_3 )",
            "return": "void",
            "name": "EntityAttachments"
        },
        {
            "desc": "绘制实体源坐标轴",
            "func": "( ehandle_1, float_2, bool_3, float_4 )",
            "return": "void",
            "name": "EntityAxis"
        },
        {
            "desc": "绘制实体边界",
            "func": "( ehandle_1, int_2, int_3, int_4, int_5, bool_6, float_7 )",
            "return": "void",
            "name": "EntityBounds"
        },
        {
            "desc": "绘制实体骨架",
            "func": "( ehandle_1, float_2 )",
            "return": "void",
            "name": "EntitySkeleton"
        },
        {
            "desc": "在实体上绘制文本",
            "func": "( ehandle_1, int_2, string_3, int_4, int_5, int_6, int_7, float_8 )",
            "return": "void",
            "name": "EntityText"
        },
        {
            "desc": "绘制一个2D矩形填充的屏幕空间。按照像素对齐",
            "func": "( Vector2D_1, Vector2D_2, int_3, int_4, int_5, int_6, float_7 )",
            "return": "void",
            "name": "FilledRect2D"
        },
        {
            "desc": "绘制一个水平箭头。在世界空间中指定结束点",
            "func": "( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "return": "void",
            "name": "HorzArrow"
        },
        {
            "desc": "绘制一个两点间连线",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "return": "void",
            "name": "Line"
        },
        {
            "desc": "绘制一个屏幕空间中亮点间连线",
            "func": "( Vector2D_1, Vector2D_2, int_3, int_4, int_5, int_6, float_7 )",
            "return": "void",
            "name": "Line2D"
        },
        {
            "desc": "弹出蒙版分组用的标记，被标记的蒙版可被成批删除",
            "func": "()",
            "return": "void",
            "name": "PopDebugOverlayScope"
        },
        {
            "desc": "推入一个蒙版分组用的标记。删除所有使用该蒙版ID的蒙版",
            "func": "( utlstringtoken_1 )",
            "return": "void",
            "name": "PushAndClearDebugOverlayScope"
        },
        {
            "desc": "推入一个蒙版分组用的标记。被标记的蒙版可被成批删除",
            "func": "( utlstringtoken_1 )",
            "return": "void",
            "name": "PushDebugOverlayScope"
        },
        {
            "desc": "移除指定标记的全部蒙版，无视其生命周期",
            "func": "( utlstringtoken_1 )",
            "return": "void",
            "name": "RemoveAllInScope"
        },
        {
            "desc": "绘制一个固体锥。在世界空间中指定出发点和方向",
            "func": "( Vector_1, Vector_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "return": "void",
            "name": "SolidCone"
        },
        {
            "desc": "绘制一个线框球体。在世界空间中指定中心",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "return": "void",
            "name": "Sphere"
        },
        {
            "desc": "绘制一个扫描盒。在世界空间中指定结束点并在本地空间中指定边界",
            "func": "( Vector_1, Vector_2, Vector_3, Vector_4, Quaternion_5, int_6, int_7, int_8, int_9, float_10 )",
            "return": "void",
            "name": "SweptBox"
        },
        {
            "desc": "绘制2D文本。在世界空间中指定出发点",
            "func": "( Vector_1, int_2, string_3, float_4, int_5, int_6, int_7, int_8, float_9 )",
            "return": "void",
            "name": "Text"
        },
        {
            "desc": "绘制一个屏幕空间纹理。按照像素对齐",
            "func": "( string_1, Vector2D_2, Vector2D_3, int_4, int_5, int_6, int_7, Vector2D_8, Vector2D_9, float_10 )",
            "return": "void",
            "name": "Texture"
        },
        {
            "desc": "绘制一个填充三角形。在世界空间中指定顶部",
            "func": "( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "return": "void",
            "name": "Triangle"
        },
        {
            "desc": "转换蒙版混合类型,用于单位测试",
            "func": "()",
            "return": "void",
            "name": "UnitTestCycleOverlayRenderType"
        },
        {
            "desc": "绘制3D文本。在世界空间中指定出发点和方向",
            "func": "( Vector_1, Quaternion_2, string_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "return": "void",
            "name": "VectorText3D"
        },
        {
            "desc": "绘制一个垂直箭头。在世界空间中指定结束点",
            "func": "( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "return": "void",
            "name": "VertArrow"
        },
        {
            "desc": "绘制一个指定偏航角的箭头。在世界空间中指定结束点",
            "func": "( Vector_1, float_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "return": "void",
            "name": "YawArrow"
        }
    ],
    "CDotaSubquestBase": [
        {
            "desc": "完成子任务",
            "func": "()",
            "return": "void",
            "name": "CompleteSubquest"
        },
        {
            "desc": "设置该任务的文本取代字符串",
            "func": "( pszString )",
            "return": "void",
            "name": "SetTextReplaceString"
        },
        {
            "desc": "设置任务数值",
            "func": "( valueSlot, value )",
            "return": "void",
            "name": "SetTextReplaceValue"
        }
    ],
    "CEntities": [
        {
            "desc": "用类名来创建一个实体",
            "func": "( string_1 )",
            "return": "handle",
            "name": "CreateByClassname"
        },
        {
            "desc": "通过类名来寻找所有实体.返回被找到实体的数组或表.",
            "func": "( string_1 )",
            "return": "table",
            "name": "FindAllByClassname"
        },
        {
            "desc": "在一个半径范围内通过类名寻找实体.",
            "func": "( string_1, Vector_2, float_3 )",
            "return": "table",
            "name": "FindAllByClassnameWithin"
        },
        {
            "desc": "通过模型名字来找到对象.",
            "func": "( string_1 )",
            "return": "table",
            "name": "FindAllByModel"
        },
        {
            "desc": "通过名字来寻找所有实体.返回被找到实体的数组或表.",
            "func": "( string_1 )",
            "return": "table",
            "name": "FindAllByName"
        },
        {
            "desc": "在半径范围内通过名字来寻找实体.",
            "func": "( string_1, Vector_2, float_3 )",
            "return": "table",
            "name": "FindAllByNameWithin"
        },
        {
            "desc": "通过目标名字来寻找实体",
            "func": "( string_1 )",
            "return": "table",
            "name": "FindAllByTarget"
        },
        {
            "desc": "在(球形)范围内寻找实体",
            "func": "( Vector_1, float_2 )",
            "return": "table",
            "name": "FindAllInSphere"
        },
        {
            "desc": "通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "return": "handle",
            "name": "FindByClassname"
        },
        {
            "desc": "在最近一个点通过类名寻找实体",
            "func": "( string_1, Vector_2, float_3 )",
            "return": "handle",
            "name": "FindByClassnameNearest"
        },
        {
            "desc": "在半径范围内通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2, Vector_3, float_4 )",
            "return": "handle",
            "name": "FindByClassnameWithin"
        },
        {
            "desc": "通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "return": "handle",
            "name": "FindByModel"
        },
        {
            "desc": "在半径范围内通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2, Vector_3, float_4 )",
            "return": "handle",
            "name": "FindByModelWithin"
        },
        {
            "desc": "通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "return": "handle",
            "name": "FindByName"
        },
        {
            "desc": "通过名字寻找最近原点的实体",
            "func": "( string_1, Vector_2, float_3 )",
            "return": "handle",
            "name": "FindByNameNearest"
        },
        {
            "desc": "在半径范围内通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2, Vector_3, float_4 )",
            "return": "handle",
            "name": "FindByNameWithin"
        },
        {
            "desc": "通过目标名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "return": "handle",
            "name": "FindByTarget"
        },
        {
            "desc": "在半径范围内寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, Vector_2, float_3 )",
            "return": "handle",
            "name": "FindInSphere"
        },
        {
            "desc": "在实体数组或表中开始一个迭代程序",
            "func": "()",
            "return": "handle",
            "name": "First"
        },
        {
            "desc": "Get the local player.",
            "func": "()",
            "return": "handle",
            "name": "GetLocalPlayer"
        },
        {
            "desc": "从指定列表中的实体开始迭代",
            "func": "( handle_1 )",
            "return": "handle",
            "name": "Next"
        }
    ],
    "CNativeOutputs": [
        {
            "desc": "增加一个输出",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "AddOutput"
        },
        {
            "desc": "初始化输出",
            "func": "( int_1 )",
            "return": "void",
            "name": "Init"
        }
    ],
    "CInfoWorldLayer": [
        {
            "desc": "Hides this layer",
            "func": "()",
            "return": "void",
            "name": "HideWorldLayer"
        },
        {
            "desc": "Shows this layer",
            "func": "()",
            "return": "void",
            "name": "ShowWorldLayer"
        }
    ],
    "CLogicRelay": [
        {
            "desc": "Trigger( hActivator, hCaller ) : Triggers the logic_relay",
            "func": "( hActivator, hCaller )",
            "return": "void",
            "name": "Trigger"
        }
    ],
    "CPhysicsProp": [
        {
            "desc": "禁止该元件运动",
            "func": "()",
            "return": "void",
            "name": "DisableMotion"
        },
        {
            "desc": "允许该元件运动",
            "func": "()",
            "return": "void",
            "name": "EnableMotion"
        },
        {
            "desc": "Enable/disable dynamic vs dynamic continuous collision traces",
            "func": "( bIsDynamicVsDynamicContinuousEnabled )",
            "return": "void",
            "name": "SetDynamicVsDynamicContinuous"
        }
    ],
    "CPointClientUIWorldPanel": [
        {
            "desc": "Tells the panel to accept user input.",
            "func": "()",
            "return": "void",
            "name": "AcceptUserInput"
        },
        {
            "desc": "Adds CSS class(es) to the panel",
            "func": "( pszClasses )",
            "return": "void",
            "name": "AddCSSClasses"
        },
        {
            "desc": "Tells the panel to ignore user input.",
            "func": "()",
            "return": "void",
            "name": "IgnoreUserInput"
        },
        {
            "desc": "Returns whether this entity is grabbable.",
            "func": "()",
            "return": "bool",
            "name": "IsGrabbable"
        },
        {
            "desc": "Remove CSS class(es) from the panel",
            "func": "( pszClasses )",
            "return": "void",
            "name": "RemoveCSSClasses"
        }
    ],
    "CPropHMDAvatar": [
        {
            "desc": "根据ID获取VR",
            "func": "( nHandID )",
            "return": "handle",
            "name": "GetVRHand"
        }
    ],
    "CPropVRHand": [
        {
            "desc": "Add the attachment to this hand",
            "func": "( hAttachment )",
            "return": "void",
            "name": "AddHandAttachment"
        },
        {
            "desc": "Add a model override for this hand",
            "func": "( pModelName )",
            "return": "handle",
            "name": "AddHandModelOverride"
        },
        {
            "desc": "Find a specific model override for this hand",
            "func": "( pModelName )",
            "return": "handle",
            "name": "FindHandModelOverride"
        },
        {
            "desc": "Fire a haptic pulse on this hand. [0,2] for strength.",
            "func": "( nStrength )",
            "return": "void",
            "name": "FireHapticPulse"
        },
        {
            "desc": "Fire a haptic pulse on this hand. Specify the duration in micro seconds.",
            "func": "( nPulseDuration )",
            "return": "void",
            "name": "FireHapticPulsePrecise"
        },
        {
            "desc": "Get the attachment on this hand",
            "func": "()",
            "return": "handle",
            "name": "GetHandAttachment"
        },
        {
            "desc": "Get hand ID",
            "func": "()",
            "return": "int",
            "name": "GetHandID"
        },
        {
            "desc": "Get literal type for this hand",
            "func": "()",
            "return": "int",
            "name": "GetLiteralHandType"
        },
        {
            "desc": "Get the player for this hand",
            "func": "()",
            "return": "handle",
            "name": "GetPlayer"
        },
        {
            "desc": "Get the filtered controller velocity.",
            "func": "()",
            "return": "Vector",
            "name": "GetVelocity"
        },
        {
            "desc": "Remove all model overrides for this hand",
            "func": "()",
            "return": "void",
            "name": "RemoveAllHandModelOverrides"
        },
        {
            "desc": "Remove hand attachment by handle",
            "func": "( hAttachment )",
            "return": "void",
            "name": "RemoveHandAttachmentByHandle"
        },
        {
            "desc": "Remove a model override for this hand",
            "func": "( pModelName )",
            "return": "void",
            "name": "RemoveHandModelOverride"
        },
        {
            "desc": "Set the attachment for this hand",
            "func": "( hAttachment )",
            "return": "void",
            "name": "SetHandAttachment"
        }
    ],
    "CSceneEntity": [
        {
            "desc": "在记分板列表上增加一个组（使用索引号）",
            "func": "( int_1 )",
            "return": "void",
            "name": "AddBroadcastTeamTarget"
        },
        {
            "desc": "取消场景重播",
            "func": "()",
            "return": "void",
            "name": "Cancel"
        },
        {
            "desc": "返回场景长度（秒）",
            "func": "()",
            "return": "float",
            "name": "EstimateLength"
        },
        {
            "desc": "获取镜头",
            "func": "()",
            "return": "handle",
            "name": "FindCamera"
        },
        {
            "desc": "通过一个实体参照，比如!target，获取场景物体中的实际实体",
            "func": "( string_1 )",
            "return": "handle",
            "name": "FindNamedEntity"
        },
        {
            "desc": "场景是否被暂停",
            "func": "()",
            "return": "bool",
            "name": "IsPaused"
        },
        {
            "desc": "场景是否正播放",
            "func": "()",
            "return": "bool",
            "name": "IsPlayingBack"
        },
        {
            "desc": "输入虚拟场景名和VCD字符串，载入场景",
            "func": "( string_1, string_2 )",
            "return": "bool",
            "name": "LoadSceneFromString"
        },
        {
            "desc": "从记分板列表上移除一个组（使用索引号）",
            "func": "( int_1 )",
            "return": "void",
            "name": "RemoveBroadcastTeamTarget"
        },
        {
            "desc": "开始场景重播，参数为激活者实体（activatorEntity）",
            "func": "( handle_1 )",
            "return": "void",
            "name": "Start"
        }
    ],
    "CScriptKeyValues": [
        {
            "desc": "读取一个键值（spawnkey）",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetValue"
        }
    ],
    "GridNav": [
        {
            "desc": "判断是否能从某个起始点移动到某个终点。(vStart,vEnd)",
            "func": "( Vector_1, Vector_2 )",
            "return": "bool",
            "name": "CanFindPath"
        },
        {
            "desc": "砍掉区域内所有的树。(vPosition,flRadius,bFullCollision",
            "func": "( Vector_1, float_2, bool_3 )",
            "return": "void",
            "name": "DestroyTreesAroundPoint"
        },
        {
            "desc": "找到两点间可通过的路径，并返回路径长度。如果寻路失败，将返回-1。float(vStart,vEnd)",
            "func": "( Vector_1, Vector_2 )",
            "return": "float",
            "name": "FindPathLength"
        },
        {
            "desc": "以table形式返回附近所有的树木。HSCRIPTS(vPosition,flRadius,bFullCollision).",
            "func": "( Vector_1, float_2, bool_3 )",
            "return": "table",
            "name": "GetAllTreesAroundPoint"
        },
        {
            "desc": "获取指定X索引号的世界中心X位置（网格到世界）",
            "func": "( int_1 )",
            "return": "float",
            "name": "GridPosToWorldCenterX"
        },
        {
            "desc": "获取指定Y索引号的世界中心Y位置（网格到世界）",
            "func": "( int_1 )",
            "return": "float",
            "name": "GridPosToWorldCenterY"
        },
        {
            "desc": "检查给定位置是否被阻挡",
            "func": "( Vector_1 )",
            "return": "bool",
            "name": "IsBlocked"
        },
        {
            "desc": "(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point",
            "func": "( Vector_1, float_2, bool_3 )",
            "return": "bool",
            "name": "IsNearbyTree"
        },
        {
            "desc": "检查给予维持是否可通过",
            "func": "( Vector_1 )",
            "return": "bool",
            "name": "IsTraversable"
        },
        {
            "desc": "Causes all trees in the map to regrow",
            "func": "()",
            "return": "void",
            "name": "RegrowAllTrees"
        },
        {
            "desc": "获取指定世界X位置的X索引（世界到网格）",
            "func": "( float_1 )",
            "return": "int",
            "name": "WorldToGridPosX"
        },
        {
            "desc": "获取指定世界Y位置的Y索引（世界到网格）",
            "func": "( float_1 )",
            "return": "int",
            "name": "WorldToGridPosY"
        }
    ],
    "CScriptParticleManager": [
        {
            "desc": "创建一个新的粒子特效",
            "func": "( string_1, int_2, handle_3 )",
            "return": "int",
            "name": "CreateParticle"
        },
        {
            "desc": "创建一个只对指定玩家播放的粒子特效",
            "func": "( string_1, int_2, handle_3, handle_4 )",
            "return": "int",
            "name": "CreateParticleForPlayer"
        },
        {
            "desc": "创建一个仅为某方队伍播放的粒子特效。",
            "func": "( string_1, int_2, handle_3, int_4 )",
            "return": "int",
            "name": "CreateParticleForTeam"
        },
        {
            "desc": "清除粒子。",
            "func": "( int_1, bool_2 )",
            "return": "void",
            "name": "DestroyParticle"
        },
        {
            "desc": "",
            "func": "( string_1, handle_2 )",
            "return": "string",
            "name": "GetParticleReplacement"
        },
        {
            "desc": "施放指定粒子特效索引号",
            "func": "( int_1 )",
            "return": "void",
            "name": "ReleaseParticleIndex"
        },
        {
            "desc": "",
            "func": "( int_1 )",
            "return": "void",
            "name": "SetParticleAlwaysSimulate"
        },
        {
            "desc": "设置控制粒子特效的控制点数据",
            "func": "( int_1, int_2, Vector_3 )",
            "return": "void",
            "name": "SetParticleControl"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, handle_3, int_4, string_5, Vector_6, bool_7 )",
            "return": "void",
            "name": "SetParticleControlEnt"
        },
        {
            "desc": "(int iIndex, int iPoint, Vector vecPosition)",
            "func": "( int_1, int_2, Vector_3 )",
            "return": "void",
            "name": "SetParticleControlFallback"
        },
        {
            "desc": "设置粒子的前进运动",
            "func": "( int_1, int_2, Vector_3 )",
            "return": "void",
            "name": "SetParticleControlForward"
        },
        {
            "desc": "设置粒子的三向运动。",
            "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
            "return": "void",
            "name": "SetParticleControlOrientation"
        },
        {
            "desc": "(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect",
            "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
            "return": "void",
            "name": "SetParticleControlOrientationFLU"
        },
        {
            "desc": "int nfxindex, int nPoint, int nPoint2, float flRadius",
            "func": "( int_1, int_2, int_3, float_4 )",
            "return": "void",
            "name": "SetParticleFoWProperties"
        },
        {
            "desc": "int nfxindex, bool bCheckFoW",
            "func": "( int_1, bool_2 )",
            "return": "bool",
            "name": "SetParticleShouldCheckFoW"
        }
    ],
    "CScriptPrecacheContext": [
        {
            "desc": "预缓存指定资源",
            "func": "( string_1 )",
            "return": "void",
            "name": "AddResource"
        },
        {
            "desc": "读取一个键值（spawnkey）",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetValue"
        }
    ],
    "Convars": [
        {
            "desc": "获取指定的控制台变量（convar）的boolean值",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetBool"
        },
        {
            "desc": "返回输入该控制台指令的玩家",
            "func": "()",
            "return": "handle",
            "name": "GetCommandClient"
        },
        {
            "desc": "返回输入该控制台指令的DOTA玩家",
            "func": "()",
            "return": "handle",
            "name": "GetDOTACommandClient"
        },
        {
            "desc": "将指定的控制台变量（convar）作为float返回.不存在时返回nil",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetFloat"
        },
        {
            "desc": "将指定的控制台变量（convar）作为int返回.不存在时返回nil",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetInt"
        },
        {
            "desc": "将指定的控制台变量（convar）作为string返回.不存在时返回nil",
            "func": "( string_1 )",
            "return": "table",
            "name": "GetStr"
        },
        {
            "desc": "注册一个控制台指令",
            "func": "( string_1, handle_2, string_3, int_4 )",
            "return": "void",
            "name": "RegisterCommand"
        },
        {
            "desc": "注册一个新的控制台变量",
            "func": "( string_1, string_2, string_3, int_4 )",
            "return": "void",
            "name": "RegisterConvar"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定bool",
            "func": "( string_1, bool_2 )",
            "return": "void",
            "name": "SetBool"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定float",
            "func": "( string_1, float_2 )",
            "return": "void",
            "name": "SetFloat"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定int",
            "func": "( string_1, int_2 )",
            "return": "void",
            "name": "SetInt"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定string",
            "func": "( string_1, string_2 )",
            "return": "void",
            "name": "SetStr"
        }
    ],
    "GlobalSys": [
        {
            "desc": "CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
            "func": "( string_1 )",
            "return": "table",
            "name": "CommandLineCheck"
        },
        {
            "desc": "CommandLineFloat(name) : returns the command line param as a float.",
            "func": "( string_1, float_2 )",
            "return": "table",
            "name": "CommandLineFloat"
        },
        {
            "desc": "CommandLineInt(name) : returns the command line param as an int.",
            "func": "( string_1, int_2 )",
            "return": "table",
            "name": "CommandLineInt"
        },
        {
            "desc": "CommandLineStr(name) : returns the command line param as a string.",
            "func": "( string_1, string_2 )",
            "return": "table",
            "name": "CommandLineStr"
        }
    ],
    "ProjectileManager": [
        {
            "desc": "Update speed",
            "func": "( handle_1, int_2 )",
            "return": "void",
            "name": "ChangeTrackingProjectileSpeed"
        },
        {
            "desc": "创建一个线性投射物并返回其ID",
            "func": "( handle_1 )",
            "return": "int",
            "name": "CreateLinearProjectile"
        },
        {
            "desc": "创建一个追踪投射物",
            "func": "( handle_1 )",
            "return": "int",
            "name": "CreateTrackingProjectile"
        },
        {
            "desc": "摧毁指定ID的线性投射物",
            "func": "( int_1 )",
            "return": "void",
            "name": "DestroyLinearProjectile"
        },
        {
            "desc": "Destroy a tracking projectile early",
            "func": "( int_1 )",
            "return": "void",
            "name": "DestroyTrackingProjectile"
        },
        {
            "desc": "Returns current location of projectile",
            "func": "( int_1 )",
            "return": "Vector",
            "name": "GetLinearProjectileLocation"
        },
        {
            "desc": "Returns current radius of projectile",
            "func": "( int_1 )",
            "return": "float",
            "name": "GetLinearProjectileRadius"
        },
        {
            "desc": "返回一个表示当前投射物速度的向量。",
            "func": "( int_1 )",
            "return": "Vector",
            "name": "GetLinearProjectileVelocity"
        },
        {
            "desc": "Returns current location of projectile",
            "func": "( int_1 )",
            "return": "Vector",
            "name": "GetTrackingProjectileLocation"
        },
        {
            "desc": "使得特定单位躲避投射物",
            "func": "( handle_1 )",
            "return": "void",
            "name": "ProjectileDodge"
        },
        {
            "desc": "Update velocity",
            "func": "( int_1, Vector_2, float_3 )",
            "return": "void",
            "name": "UpdateLinearProjectileDirection"
        }
    ],
    "Vector": [
        {
            "desc": "矢量叉积",
            "func": "( Vector a, Vector b )",
            "return": "Vector",
            "name": "Cross"
        },
        {
            "desc": "矢量点积",
            "func": "( Vector a, Vector b )",
            "return": "float",
            "name": "Dot"
        },
        {
            "desc": "矢量长度（模）",
            "func": "()",
            "return": "float",
            "name": "Length"
        },
        {
            "desc": "矢量XY平面上长度（模）",
            "func": "()",
            "return": "float",
            "name": "Length2D"
        },
        {
            "desc": "返回单位矢量",
            "func": "()",
            "return": "Vector",
            "name": "Normalized"
        },
        {
            "desc": "返回两向量插值",
            "func": "( Vector a,float b )",
            "return": "Vector",
            "name": "Lerp"
        },
        {
            "desc": "重载+.矢量加运算",
            "func": "( Vector a, Vector b )",
            "return": "Vector",
            "name": "__add"
        },
        {
            "desc": "重载/.矢量除运算",
            "func": "( Vector a, Vector b )",
            "return": "Vector",
            "name": "__div"
        },
        {
            "desc": "重载==.矢量比较运算",
            "func": "( Vector a, Vector b )",
            "return": "bool",
            "name": "__eq"
        },
        {
            "desc": "重载#返回矢量长度",
            "func": "()",
            "return": "float",
            "name": "__len"
        },
        {
            "desc": "重载*返回矢量乘运算",
            "func": "( Vector a, Vector b )",
            "return": "Vector",
            "name": "__mul"
        },
        {
            "desc": "重载-.矢量减运算",
            "func": "( Vector a, Vector b )",
            "return": "Vector",
            "name": "__sub"
        },
        {
            "desc": "重载..转换矢量为字符串",
            "func": "()",
            "return": "string",
            "name": "__tostring"
        },
        {
            "desc": "重载-operator",
            "func": "()",
            "return": "Vector",
            "name": "__unm"
        }
    ],
    "QAngle": [
        {
            "desc": "重载..转换矢量为字符串",
            "func": "()",
            "return": "string",
            "name": "__tostring"            
        },
        {
            "desc": "重载+.矢量加运算",
            "func": "( QAngle a, QAngle b )",
            "return": "QAngle",
            "name": "__add"            
        },
        {
            "desc": "重载==.矢量比较运算",
            "func": "( QAngle a, QAngle b )",
            "return": "bool",
            "name": "__eq"            
        },
        {
            "desc": "返回单位向量",
            "func": "()",
            "return": "Vector",
            "name": "Forward"              
        },
        {
            "desc": "平面镜像旋转(失去上下角度)",
            "func": "()",
            "return": "Vector",
            "name": "Left"              
        },
        {
            "desc": "上下镜像旋转",
            "func": "()",
            "return": "Vector",
            "name": "Up"               
        }
    ],
    "FDesc":[
        {
            "desc": "返回函数/对象说明(所有对象都包含此对象)",
            "func": "()",
            "return": "string",
            "name": "__tostring"              
        }
    ]
}